// Code generated by MockGen. DO NOT EDIT.
// Source: pubsub.go

// Package test_pubsub is a generated GoMock package.
package test_pubsub

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pubsub "github.com/wetware/pkg/api/pubsub"
)

// MockJoinServer is a mock of JoinServer interface.
type MockJoinServer struct {
	ctrl     *gomock.Controller
	recorder *MockJoinServerMockRecorder
}

// MockJoinServerMockRecorder is the mock recorder for MockJoinServer.
type MockJoinServerMockRecorder struct {
	mock *MockJoinServer
}

// NewMockJoinServer creates a new mock instance.
func NewMockJoinServer(ctrl *gomock.Controller) *MockJoinServer {
	mock := &MockJoinServer{ctrl: ctrl}
	mock.recorder = &MockJoinServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJoinServer) EXPECT() *MockJoinServerMockRecorder {
	return m.recorder
}

// Join mocks base method.
func (m *MockJoinServer) Join(arg0 context.Context, arg1 pubsub.Router_join) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockJoinServerMockRecorder) Join(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockJoinServer)(nil).Join), arg0, arg1)
}

// MockTopicServer is a mock of TopicServer interface.
type MockTopicServer struct {
	ctrl     *gomock.Controller
	recorder *MockTopicServerMockRecorder
}

// MockTopicServerMockRecorder is the mock recorder for MockTopicServer.
type MockTopicServerMockRecorder struct {
	mock *MockTopicServer
}

// NewMockTopicServer creates a new mock instance.
func NewMockTopicServer(ctrl *gomock.Controller) *MockTopicServer {
	mock := &MockTopicServer{ctrl: ctrl}
	mock.recorder = &MockTopicServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicServer) EXPECT() *MockTopicServerMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockTopicServer) Name(arg0 context.Context, arg1 pubsub.Topic_name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTopicServerMockRecorder) Name(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTopicServer)(nil).Name), arg0, arg1)
}

// Publish mocks base method.
func (m *MockTopicServer) Publish(arg0 context.Context, arg1 pubsub.Topic_publish) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockTopicServerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockTopicServer)(nil).Publish), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockTopicServer) Subscribe(arg0 context.Context, arg1 pubsub.Topic_subscribe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockTopicServerMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockTopicServer)(nil).Subscribe), arg0, arg1)
}
