// Code generated by MockGen. DO NOT EDIT.
// Source: view.go

// Package mock_view is a generated GoMock package.
package mock_view

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cluster "github.com/wetware/ww/api/cluster"
)

// MockQueryParams is a mock of QueryParams interface.
type MockQueryParams struct {
	ctrl     *gomock.Controller
	recorder *MockQueryParamsMockRecorder
}

// MockQueryParamsMockRecorder is the mock recorder for MockQueryParams.
type MockQueryParamsMockRecorder struct {
	mock *MockQueryParams
}

// NewMockQueryParams creates a new mock instance.
func NewMockQueryParams(ctrl *gomock.Controller) *MockQueryParams {
	mock := &MockQueryParams{ctrl: ctrl}
	mock.recorder = &MockQueryParamsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryParams) EXPECT() *MockQueryParamsMockRecorder {
	return m.recorder
}

// NewConstraints mocks base method.
func (m *MockQueryParams) NewConstraints(arg0 int32) (cluster.View_Constraint_List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConstraints", arg0)
	ret0, _ := ret[0].(cluster.View_Constraint_List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConstraints indicates an expected call of NewConstraints.
func (mr *MockQueryParamsMockRecorder) NewConstraints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConstraints", reflect.TypeOf((*MockQueryParams)(nil).NewConstraints), arg0)
}

// NewSelector mocks base method.
func (m *MockQueryParams) NewSelector() (cluster.View_Selector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSelector")
	ret0, _ := ret[0].(cluster.View_Selector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSelector indicates an expected call of NewSelector.
func (mr *MockQueryParamsMockRecorder) NewSelector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSelector", reflect.TypeOf((*MockQueryParams)(nil).NewSelector))
}
