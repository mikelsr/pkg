// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type BytecodeCache capnp.Client

// BytecodeCache_TypeID is the unique identifier for the type BytecodeCache.
const BytecodeCache_TypeID = 0xe64ce403f6090174

func (c BytecodeCache) Put(ctx context.Context, params func(BytecodeCache_put_Params) error) (BytecodeCache_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_put_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Get(ctx context.Context, params func(BytecodeCache_get_Params) error) (BytecodeCache_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_get_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Has(ctx context.Context, params func(BytecodeCache_has_Params) error) (BytecodeCache_has_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_has_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_has_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BytecodeCache) String() string {
	return "BytecodeCache(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BytecodeCache) AddRef() BytecodeCache {
	return BytecodeCache(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BytecodeCache) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BytecodeCache) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BytecodeCache) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BytecodeCache) DecodeFromPtr(p capnp.Ptr) BytecodeCache {
	return BytecodeCache(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BytecodeCache) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BytecodeCache) IsSame(other BytecodeCache) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BytecodeCache) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BytecodeCache) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BytecodeCache_Server is a BytecodeCache with a local implementation.
type BytecodeCache_Server interface {
	Put(context.Context, BytecodeCache_put) error

	Get(context.Context, BytecodeCache_get) error

	Has(context.Context, BytecodeCache_has) error
}

// BytecodeCache_NewServer creates a new Server from an implementation of BytecodeCache_Server.
func BytecodeCache_NewServer(s BytecodeCache_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BytecodeCache_Methods(nil, s), s, c)
}

// BytecodeCache_ServerToClient creates a new Client from an implementation of BytecodeCache_Server.
// The caller is responsible for calling Release on the returned Client.
func BytecodeCache_ServerToClient(s BytecodeCache_Server) BytecodeCache {
	return BytecodeCache(capnp.NewClient(BytecodeCache_NewServer(s)))
}

// BytecodeCache_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BytecodeCache_Methods(methods []server.Method, s BytecodeCache_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, BytecodeCache_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, BytecodeCache_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Has(ctx, BytecodeCache_has{call})
		},
	})

	return methods
}

// BytecodeCache_put holds the state for a server call to BytecodeCache.put.
// See server.Call for documentation.
type BytecodeCache_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_put) Args() BytecodeCache_put_Params {
	return BytecodeCache_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_put) AllocResults() (BytecodeCache_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(r), err
}

// BytecodeCache_get holds the state for a server call to BytecodeCache.get.
// See server.Call for documentation.
type BytecodeCache_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_get) Args() BytecodeCache_get_Params {
	return BytecodeCache_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_get) AllocResults() (BytecodeCache_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(r), err
}

// BytecodeCache_has holds the state for a server call to BytecodeCache.has.
// See server.Call for documentation.
type BytecodeCache_has struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_has) Args() BytecodeCache_has_Params {
	return BytecodeCache_has_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_has) AllocResults() (BytecodeCache_has_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(r), err
}

// BytecodeCache_List is a list of BytecodeCache.
type BytecodeCache_List = capnp.CapList[BytecodeCache]

// NewBytecodeCache creates a new list of BytecodeCache.
func NewBytecodeCache_List(s *capnp.Segment, sz int32) (BytecodeCache_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BytecodeCache](l), err
}

type BytecodeCache_put_Params capnp.Struct

// BytecodeCache_put_Params_TypeID is the unique identifier for the type BytecodeCache_put_Params.
const BytecodeCache_put_Params_TypeID = 0x91b6120f2a2e3ebe

func NewBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func NewRootBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func ReadRootBytecodeCache_put_Params(msg *capnp.Message) (BytecodeCache_put_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Params(root.Struct()), err
}

func (s BytecodeCache_put_Params) String() string {
	str, _ := text.Marshal(0x91b6120f2a2e3ebe, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Params {
	return BytecodeCache_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Params_List is a list of BytecodeCache_put_Params.
type BytecodeCache_put_Params_List = capnp.StructList[BytecodeCache_put_Params]

// NewBytecodeCache_put_Params creates a new list of BytecodeCache_put_Params.
func NewBytecodeCache_put_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Params](l), err
}

// BytecodeCache_put_Params_Future is a wrapper for a BytecodeCache_put_Params promised by a client call.
type BytecodeCache_put_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Params_Future) Struct() (BytecodeCache_put_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Params(p.Struct()), err
}

type BytecodeCache_put_Results capnp.Struct

// BytecodeCache_put_Results_TypeID is the unique identifier for the type BytecodeCache_put_Results.
const BytecodeCache_put_Results_TypeID = 0xf51e7dd3fc20b968

func NewBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func NewRootBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func ReadRootBytecodeCache_put_Results(msg *capnp.Message) (BytecodeCache_put_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Results(root.Struct()), err
}

func (s BytecodeCache_put_Results) String() string {
	str, _ := text.Marshal(0xf51e7dd3fc20b968, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Results {
	return BytecodeCache_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Results) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Results) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Results_List is a list of BytecodeCache_put_Results.
type BytecodeCache_put_Results_List = capnp.StructList[BytecodeCache_put_Results]

// NewBytecodeCache_put_Results creates a new list of BytecodeCache_put_Results.
func NewBytecodeCache_put_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Results](l), err
}

// BytecodeCache_put_Results_Future is a wrapper for a BytecodeCache_put_Results promised by a client call.
type BytecodeCache_put_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Results_Future) Struct() (BytecodeCache_put_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Results(p.Struct()), err
}

type BytecodeCache_get_Params capnp.Struct

// BytecodeCache_get_Params_TypeID is the unique identifier for the type BytecodeCache_get_Params.
const BytecodeCache_get_Params_TypeID = 0xf694129c75eba87c

func NewBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func NewRootBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func ReadRootBytecodeCache_get_Params(msg *capnp.Message) (BytecodeCache_get_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Params(root.Struct()), err
}

func (s BytecodeCache_get_Params) String() string {
	str, _ := text.Marshal(0xf694129c75eba87c, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Params {
	return BytecodeCache_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Params_List is a list of BytecodeCache_get_Params.
type BytecodeCache_get_Params_List = capnp.StructList[BytecodeCache_get_Params]

// NewBytecodeCache_get_Params creates a new list of BytecodeCache_get_Params.
func NewBytecodeCache_get_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Params](l), err
}

// BytecodeCache_get_Params_Future is a wrapper for a BytecodeCache_get_Params promised by a client call.
type BytecodeCache_get_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Params_Future) Struct() (BytecodeCache_get_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Params(p.Struct()), err
}

type BytecodeCache_get_Results capnp.Struct

// BytecodeCache_get_Results_TypeID is the unique identifier for the type BytecodeCache_get_Results.
const BytecodeCache_get_Results_TypeID = 0xb2c6f1c55b7403f4

func NewBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func NewRootBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func ReadRootBytecodeCache_get_Results(msg *capnp.Message) (BytecodeCache_get_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Results(root.Struct()), err
}

func (s BytecodeCache_get_Results) String() string {
	str, _ := text.Marshal(0xb2c6f1c55b7403f4, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Results {
	return BytecodeCache_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Results) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Results) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Results) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Results_List is a list of BytecodeCache_get_Results.
type BytecodeCache_get_Results_List = capnp.StructList[BytecodeCache_get_Results]

// NewBytecodeCache_get_Results creates a new list of BytecodeCache_get_Results.
func NewBytecodeCache_get_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Results](l), err
}

// BytecodeCache_get_Results_Future is a wrapper for a BytecodeCache_get_Results promised by a client call.
type BytecodeCache_get_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Results_Future) Struct() (BytecodeCache_get_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Results(p.Struct()), err
}

type BytecodeCache_has_Params capnp.Struct

// BytecodeCache_has_Params_TypeID is the unique identifier for the type BytecodeCache_has_Params.
const BytecodeCache_has_Params_TypeID = 0xc25a17a8499cfe55

func NewBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func NewRootBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func ReadRootBytecodeCache_has_Params(msg *capnp.Message) (BytecodeCache_has_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Params(root.Struct()), err
}

func (s BytecodeCache_has_Params) String() string {
	str, _ := text.Marshal(0xc25a17a8499cfe55, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Params {
	return BytecodeCache_has_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_has_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_has_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_has_Params_List is a list of BytecodeCache_has_Params.
type BytecodeCache_has_Params_List = capnp.StructList[BytecodeCache_has_Params]

// NewBytecodeCache_has_Params creates a new list of BytecodeCache_has_Params.
func NewBytecodeCache_has_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_has_Params](l), err
}

// BytecodeCache_has_Params_Future is a wrapper for a BytecodeCache_has_Params promised by a client call.
type BytecodeCache_has_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Params_Future) Struct() (BytecodeCache_has_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Params(p.Struct()), err
}

type BytecodeCache_has_Results capnp.Struct

// BytecodeCache_has_Results_TypeID is the unique identifier for the type BytecodeCache_has_Results.
const BytecodeCache_has_Results_TypeID = 0xf9602cd2c3f65e0f

func NewBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func NewRootBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func ReadRootBytecodeCache_has_Results(msg *capnp.Message) (BytecodeCache_has_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Results(root.Struct()), err
}

func (s BytecodeCache_has_Results) String() string {
	str, _ := text.Marshal(0xf9602cd2c3f65e0f, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Results {
	return BytecodeCache_has_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Results) Has() bool {
	return capnp.Struct(s).Bit(0)
}

func (s BytecodeCache_has_Results) SetHas(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// BytecodeCache_has_Results_List is a list of BytecodeCache_has_Results.
type BytecodeCache_has_Results_List = capnp.StructList[BytecodeCache_has_Results]

// NewBytecodeCache_has_Results creates a new list of BytecodeCache_has_Results.
func NewBytecodeCache_has_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BytecodeCache_has_Results](l), err
}

// BytecodeCache_has_Results_Future is a wrapper for a BytecodeCache_has_Results promised by a client call.
type BytecodeCache_has_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Results_Future) Struct() (BytecodeCache_has_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Results(p.Struct()), err
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release

}

func (c Process) Kill(ctx context.Context, params func(Process_kill_Params) error) (Process_kill_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_kill_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_kill_Results_Future{Future: ans.Future()}, release

}

func (c Process) Link(ctx context.Context, params func(Process_link_Params) error) (Process_link_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "link",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_link_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_link_Results_Future{Future: ans.Future()}, release

}

func (c Process) Unlink(ctx context.Context, params func(Process_unlink_Params) error) (Process_unlink_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      3,
			InterfaceName: "process.capnp:Process",
			MethodName:    "unlink",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_unlink_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_unlink_Results_Future{Future: ans.Future()}, release

}

func (c Process) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return "Process(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Wait(context.Context, Process_wait) error

	Kill(context.Context, Process_kill) error

	Link(context.Context, Process_link) error

	Unlink(context.Context, Process_unlink) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Kill(ctx, Process_kill{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "link",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Link(ctx, Process_link{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      3,
			InterfaceName: "process.capnp:Process",
			MethodName:    "unlink",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlink(ctx, Process_unlink{call})
		},
	})

	return methods
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(r), err
}

// Process_kill holds the state for a server call to Process.kill.
// See server.Call for documentation.
type Process_kill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_kill) Args() Process_kill_Params {
	return Process_kill_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_kill) AllocResults() (Process_kill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(r), err
}

// Process_link holds the state for a server call to Process.link.
// See server.Call for documentation.
type Process_link struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_link) Args() Process_link_Params {
	return Process_link_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_link) AllocResults() (Process_link_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_link_Results(r), err
}

// Process_unlink holds the state for a server call to Process.unlink.
// See server.Call for documentation.
type Process_unlink struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_unlink) Args() Process_unlink_Params {
	return Process_unlink_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_unlink) AllocResults() (Process_unlink_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlink_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_wait_Results) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}

type Process_kill_Params capnp.Struct

// Process_kill_Params_TypeID is the unique identifier for the type Process_kill_Params.
const Process_kill_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func NewRootProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func ReadRootProcess_kill_Params(msg *capnp.Message) (Process_kill_Params, error) {
	root, err := msg.Root()
	return Process_kill_Params(root.Struct()), err
}

func (s Process_kill_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_kill_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Params) DecodeFromPtr(p capnp.Ptr) Process_kill_Params {
	return Process_kill_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Params_List is a list of Process_kill_Params.
type Process_kill_Params_List = capnp.StructList[Process_kill_Params]

// NewProcess_kill_Params creates a new list of Process_kill_Params.
func NewProcess_kill_Params_List(s *capnp.Segment, sz int32) (Process_kill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Params](l), err
}

// Process_kill_Params_Future is a wrapper for a Process_kill_Params promised by a client call.
type Process_kill_Params_Future struct{ *capnp.Future }

func (f Process_kill_Params_Future) Struct() (Process_kill_Params, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Params(p.Struct()), err
}

type Process_kill_Results capnp.Struct

// Process_kill_Results_TypeID is the unique identifier for the type Process_kill_Results.
const Process_kill_Results_TypeID = 0xc53168b273d497ee

func NewProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func NewRootProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func ReadRootProcess_kill_Results(msg *capnp.Message) (Process_kill_Results, error) {
	root, err := msg.Root()
	return Process_kill_Results(root.Struct()), err
}

func (s Process_kill_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_kill_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Results) DecodeFromPtr(p capnp.Ptr) Process_kill_Results {
	return Process_kill_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Results_List is a list of Process_kill_Results.
type Process_kill_Results_List = capnp.StructList[Process_kill_Results]

// NewProcess_kill_Results creates a new list of Process_kill_Results.
func NewProcess_kill_Results_List(s *capnp.Segment, sz int32) (Process_kill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Results](l), err
}

// Process_kill_Results_Future is a wrapper for a Process_kill_Results promised by a client call.
type Process_kill_Results_Future struct{ *capnp.Future }

func (f Process_kill_Results_Future) Struct() (Process_kill_Results, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Results(p.Struct()), err
}

type Process_link_Params capnp.Struct

// Process_link_Params_TypeID is the unique identifier for the type Process_link_Params.
const Process_link_Params_TypeID = 0xd22f75df06c187e8

func NewProcess_link_Params(s *capnp.Segment) (Process_link_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_link_Params(st), err
}

func NewRootProcess_link_Params(s *capnp.Segment) (Process_link_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_link_Params(st), err
}

func ReadRootProcess_link_Params(msg *capnp.Message) (Process_link_Params, error) {
	root, err := msg.Root()
	return Process_link_Params(root.Struct()), err
}

func (s Process_link_Params) String() string {
	str, _ := text.Marshal(0xd22f75df06c187e8, capnp.Struct(s))
	return str
}

func (s Process_link_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_link_Params) DecodeFromPtr(p capnp.Ptr) Process_link_Params {
	return Process_link_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_link_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_link_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_link_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_link_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_link_Params) Other() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_link_Params) SetOther(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_link_Params_List is a list of Process_link_Params.
type Process_link_Params_List = capnp.StructList[Process_link_Params]

// NewProcess_link_Params creates a new list of Process_link_Params.
func NewProcess_link_Params_List(s *capnp.Segment, sz int32) (Process_link_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_link_Params](l), err
}

// Process_link_Params_Future is a wrapper for a Process_link_Params promised by a client call.
type Process_link_Params_Future struct{ *capnp.Future }

func (f Process_link_Params_Future) Struct() (Process_link_Params, error) {
	p, err := f.Future.Ptr()
	return Process_link_Params(p.Struct()), err
}

type Process_link_Results capnp.Struct

// Process_link_Results_TypeID is the unique identifier for the type Process_link_Results.
const Process_link_Results_TypeID = 0x9d6074459fa0602b

func NewProcess_link_Results(s *capnp.Segment) (Process_link_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_link_Results(st), err
}

func NewRootProcess_link_Results(s *capnp.Segment) (Process_link_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_link_Results(st), err
}

func ReadRootProcess_link_Results(msg *capnp.Message) (Process_link_Results, error) {
	root, err := msg.Root()
	return Process_link_Results(root.Struct()), err
}

func (s Process_link_Results) String() string {
	str, _ := text.Marshal(0x9d6074459fa0602b, capnp.Struct(s))
	return str
}

func (s Process_link_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_link_Results) DecodeFromPtr(p capnp.Ptr) Process_link_Results {
	return Process_link_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_link_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_link_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_link_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_link_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_link_Results_List is a list of Process_link_Results.
type Process_link_Results_List = capnp.StructList[Process_link_Results]

// NewProcess_link_Results creates a new list of Process_link_Results.
func NewProcess_link_Results_List(s *capnp.Segment, sz int32) (Process_link_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_link_Results](l), err
}

// Process_link_Results_Future is a wrapper for a Process_link_Results promised by a client call.
type Process_link_Results_Future struct{ *capnp.Future }

func (f Process_link_Results_Future) Struct() (Process_link_Results, error) {
	p, err := f.Future.Ptr()
	return Process_link_Results(p.Struct()), err
}

type Process_unlink_Params capnp.Struct

// Process_unlink_Params_TypeID is the unique identifier for the type Process_unlink_Params.
const Process_unlink_Params_TypeID = 0x86e3410d1abd406b

func NewProcess_unlink_Params(s *capnp.Segment) (Process_unlink_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_unlink_Params(st), err
}

func NewRootProcess_unlink_Params(s *capnp.Segment) (Process_unlink_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_unlink_Params(st), err
}

func ReadRootProcess_unlink_Params(msg *capnp.Message) (Process_unlink_Params, error) {
	root, err := msg.Root()
	return Process_unlink_Params(root.Struct()), err
}

func (s Process_unlink_Params) String() string {
	str, _ := text.Marshal(0x86e3410d1abd406b, capnp.Struct(s))
	return str
}

func (s Process_unlink_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_unlink_Params) DecodeFromPtr(p capnp.Ptr) Process_unlink_Params {
	return Process_unlink_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_unlink_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_unlink_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_unlink_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_unlink_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_unlink_Params) Other() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_unlink_Params) SetOther(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_unlink_Params_List is a list of Process_unlink_Params.
type Process_unlink_Params_List = capnp.StructList[Process_unlink_Params]

// NewProcess_unlink_Params creates a new list of Process_unlink_Params.
func NewProcess_unlink_Params_List(s *capnp.Segment, sz int32) (Process_unlink_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_unlink_Params](l), err
}

// Process_unlink_Params_Future is a wrapper for a Process_unlink_Params promised by a client call.
type Process_unlink_Params_Future struct{ *capnp.Future }

func (f Process_unlink_Params_Future) Struct() (Process_unlink_Params, error) {
	p, err := f.Future.Ptr()
	return Process_unlink_Params(p.Struct()), err
}

type Process_unlink_Results capnp.Struct

// Process_unlink_Results_TypeID is the unique identifier for the type Process_unlink_Results.
const Process_unlink_Results_TypeID = 0xd93c9aa0627bc93c

func NewProcess_unlink_Results(s *capnp.Segment) (Process_unlink_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlink_Results(st), err
}

func NewRootProcess_unlink_Results(s *capnp.Segment) (Process_unlink_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlink_Results(st), err
}

func ReadRootProcess_unlink_Results(msg *capnp.Message) (Process_unlink_Results, error) {
	root, err := msg.Root()
	return Process_unlink_Results(root.Struct()), err
}

func (s Process_unlink_Results) String() string {
	str, _ := text.Marshal(0xd93c9aa0627bc93c, capnp.Struct(s))
	return str
}

func (s Process_unlink_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_unlink_Results) DecodeFromPtr(p capnp.Ptr) Process_unlink_Results {
	return Process_unlink_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_unlink_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_unlink_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_unlink_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_unlink_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_unlink_Results_List is a list of Process_unlink_Results.
type Process_unlink_Results_List = capnp.StructList[Process_unlink_Results]

// NewProcess_unlink_Results creates a new list of Process_unlink_Results.
func NewProcess_unlink_Results_List(s *capnp.Segment, sz int32) (Process_unlink_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_unlink_Results](l), err
}

// Process_unlink_Results_Future is a wrapper for a Process_unlink_Results promised by a client call.
type Process_unlink_Results_Future struct{ *capnp.Future }

func (f Process_unlink_Results_Future) Struct() (Process_unlink_Results, error) {
	p, err := f.Future.Ptr()
	return Process_unlink_Results(p.Struct()), err
}

type Info capnp.Struct

// Info_TypeID is the unique identifier for the type Info.
const Info_TypeID = 0xc3153fa5a13d8a26

func NewInfo(s *capnp.Segment) (Info, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Info(st), err
}

func NewRootInfo(s *capnp.Segment) (Info, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Info(st), err
}

func ReadRootInfo(msg *capnp.Message) (Info, error) {
	root, err := msg.Root()
	return Info(root.Struct()), err
}

func (s Info) String() string {
	str, _ := text.Marshal(0xc3153fa5a13d8a26, capnp.Struct(s))
	return str
}

func (s Info) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Info) DecodeFromPtr(p capnp.Ptr) Info {
	return Info(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Info) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Info) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Info) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Info) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Info) Pid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Info) SetPid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Info) Ppid() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Info) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Info) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Info) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Info) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Info) Argv() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Info) HasArgv() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Info) SetArgv(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewArgv sets the argv field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Info) NewArgv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Info) Time() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Info) SetTime(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// Info_List is a list of Info.
type Info_List = capnp.StructList[Info]

// NewInfo creates a new list of Info.
func NewInfo_List(s *capnp.Segment, sz int32) (Info_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Info](l), err
}

// Info_Future is a wrapper for a Info promised by a client call.
type Info_Future struct{ *capnp.Future }

func (f Info_Future) Struct() (Info, error) {
	p, err := f.Future.Ptr()
	return Info(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda\xa4T]h\x1cU\x18\xfd\xce\xbd3{#d" +
	"3\xde\xcc\xa6\xda\xd2\x1a\x1b\xa3\xd2U\xd3\xc4\xe2CB" +
	"u7-\xa5\xa4(\xec-\xfa\xa0R\xc9t3f\x87" +
	"\xfc\xad;\xb3\xa6b\x0b\x0a\xadZ\xd1\x87\x82\xa0\x84\x16" +
	"#(\xe6AE\xe3\x0f\xf8\xa0PK\x95\xbe\xb6\x82T" +
	"\x1f\x84VE\x11\x8b\x05\x13(\x88+wvg2M" +
	"6\x06\xe2\xcb\xb2w\xee\xf9\xcew\xee\xf7sz'X" +
	"\xde\xe8K\xe7\x041\xf5\xb0\x99\xaa\x8d\xe5\xbf\xd8\x94\x1e" +
	"\xbc\xfc\x02\xa9\x0d\x00\x91!\x88v\x1c\xe3] \xd8\xaf" +
	"\xf2\x1c\xa1\xf6\xe5\x03=Y\xab\xfd\xb3\x13$7\x83\xc8" +
	"\x84\x06\xbc\xcf\x074\xe0\xd3\x10p\xd7\xf0\xec\x9b{\x82" +
	"\xe1S$7D\x04\x17\xf9&\x90Q\xfb\x8b\x07\x8f\x9f" +
	"\xbd\xfa\xf5|2\xf44\xdf\xa5C\xcf\x85\xa1\x8f\xfcs" +
	"rh\xee\xa6\xc7\xbeJ\x02\xfe\xa8s/\x84\x80;^" +
	"\xbe\xff\xadwr\x1dgH\xb5\x81\xd5\x8a\xd3wN\xf7" +
	"\xfd\xacf\xc8d\x82\xc8\xee0f\xec-a\xbe\x8dF" +
	"'\x08\xb5+\xaf\x7f\xeb\xcf\x97\xfa\xce&\x94\xf4\x9b\xa1" +
	"\x92__<\x9d\xfa\xb1\xba\xfd|\xf2\x95[\xcdv\x9d" +
	"h\x9b\xa9\x13\xbd\xb7\xb7\xb7{\xf6\x93\xecwI\xc0\x90" +
	"\x8e\x85\xadB\xc0\xces\xcf\x1e\x9c\x9d\xd9y1\xc1]" +
	"5\xb3\x9a{G\xea\xf6\xb9\x0b\x7f\xde\xf6=\xc96\xbe" +
	"$\x91`\x1f0\xe7m\xd7\xd4H\xc7\x14\xb0\x91\x12D" +
	"\xb5\x007,\xf2\x9f\x1e\xfce\x05\xfa7\xf3\x92\xbd\xa0" +
	"\xd1\xf6U\xf3\x1b\xdb\x0b\xc1{\x0fl\xffp\xe3\x07\xef" +
	"^I$U\xa9v\x9d\xb4\xf4\xf9\xad\x7f_8r\xcb" +
	"B\xb2r\xfd\xa9\xb0\xb4\x83)\xad\xf7\xf0\xdc\xef\xd5\x93" +
	"\xed\xaf-&\x01N*,\xad\x17\x02\xac'\x16\xcf\x9c" +
	"\xbf{\xf8\x1a\xa9\xcd\xf1\x8b\x8f\xd7\x19N\x84\x80\xcb\x1f" +
	"\xff\xd0ri\x9fw-\x91\xfc#\x9d\xbc\xb7V\xaeL" +
	"\x15]\xdf\xef\xe1E\xa7<Y\x1e(4\x8e\xd5\xc9q" +
	"or\xac\xbb\xe0T\x843\xe1+\x83\x1bD\x06\x88d" +
	"\xfa^\"\xd5\xc2\xa12\x0c\x9dSA\xc9\xad\xa0\x85\x18" +
	"Z\x08\xcb\xa9v=\x13\xb8\xc5\xa9\x11w\xb7S,\xb9" +
	"=\xe5j\xd0\x9d+8\x95el\xfb\x88T+\x87\xba" +
	"\x99\xa1v\xb0\x11@DH\x13Cz%g$/\x14" +
	"\xb7\xdf\xf5\xab\xe3<\xf0c\x90\xd1,\xf1\xa8\x1b\xd4\x91" +
	"\x81O\xff#\xf3\xf5\xa4%\xc7o\xf6\x9a\xae\xa5\xda\x88" +
	"\xa27\xb2\x82\x0bu\xae\xa1I\xfe\xe4T\x01P\x998" +
	"\xf4\x88\x0e=\xc4\xa1\x8e2H \xa3\xdb(\x9f\xcf\x12" +
	"\xa9\xc3\x1c\xea%\x06\xb0\x0c\x18\x91<\xa6\x81\xcfq\xa8" +
	"W\x18$G\x06\x9cH\x1e\xd7\xc0\xa3\x1cj\x96A\x1a" +
	"\xc8\xc0 \x92\xa7\xf4\xc778\xd4\xdb\x0c\xa2\xec\x8dD" +
	"}\xb2\xca\x89CR\xa6\xe5TF\x9fF\x1b\xa1\xc0\x81" +
	"Vb\xfa\xaf\x15x\x13.Lb0W\xef\xc6\x987" +
	">\xbe\xb2\x1b\xcdZ\x16\x96\x0c\xeb\x9b\xa7\x88h\xda\xf1" +
	"\x828\xdbj\x1du\x0fy\xc1\xeeFG\xd7\xe0k\x8c" +
	"\xfa~\xd7\xb7\xf4\x90,oV\xa1\xd2\x19\x9eu\xbfn" +
	"\xe4&Q\xbcL\x88\x8cF>\x95%&]\x01\xc4[" +
	"\x8e\xc8\xbf\xe4\xa3\xfa\xee!\x01\x16\x1b\x17\"\x97\x95\x83" +
	"\xfa\xee>\x01\x1e[7\"o\x92\xdb\x06\x88\xc9-\xc2" +
	"\xd2\xcf\xcd\xc3\xd25\xce\xc3\xd2R\xf3\xc8\xd55\xe7Q" +
	"\xc0\xd2\xb3\xd8\xf2A\x15\xc5\x92\xabU\xb7\x86\xaa#\xef" +
	"Gd7Ru\x11\x93{\xb4\xea\xc8`\x10\xb9\xbc\xec" +
	"\xd7w\xf7h\xd5\x91\xaf#2\x19\xb9U\xdfu\x08Q" +
	"\xae\x06y\x88QW\xff\x96\x1c\xffz5\xcdF\xa4\xd1" +
	"\xfd\xff\xdeWm\x14\xcd\xf6u\xad\xdd\xe2\xab-\xff:" +
	"\xf6\xd4Xm\xe7\xd7\x12Vr|\x80\x18\xb0\xc6\xf86" +
	"*\xf1o\x00\x00\x00\xff\xff\x85\x11\x08\x19"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9a51e53177277763,
		Nodes: []uint64{
			0x86e3410d1abd406b,
			0x91b6120f2a2e3ebe,
			0x9d6074459fa0602b,
			0xb2c6f1c55b7403f4,
			0xc25a17a8499cfe55,
			0xc3153fa5a13d8a26,
			0xc53168b273d497ee,
			0xd22f75df06c187e8,
			0xd72ab4a0243047ac,
			0xd93c9aa0627bc93c,
			0xda23f0d3a8250633,
			0xe64ce403f6090174,
			0xeea7ae19b02f5d47,
			0xf51e7dd3fc20b968,
			0xf694129c75eba87c,
			0xf9602cd2c3f65e0f,
			0xf9694ae208dbb3e3,
		},
		Compressed: true,
	})
}
