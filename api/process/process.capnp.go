// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xaf2e5ebaa58175d2

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release

}

func (c Executor) ExecCached(ctx context.Context, params func(Executor_execCached_Params) error) (Executor_execCached_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      1,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "execCached",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_execCached_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_execCached_Results_Future{Future: ans.Future()}, release

}

func (c Executor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return "Executor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error

	ExecCached(context.Context, Executor_execCached) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      1,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "execCached",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExecCached(ctx, Executor_execCached{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(r), err
}

// Executor_execCached holds the state for a server call to Executor.execCached.
// See server.Call for documentation.
type Executor_execCached struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_execCached) Args() Executor_execCached_Params {
	return Executor_execCached_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_execCached) AllocResults() (Executor_execCached_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_exec_Params capnp.Struct

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0xf20b3dea95929312

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Executor_exec_Params(st), err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Executor_exec_Params(st), err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params(root.Struct()), err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0xf20b3dea95929312, capnp.Struct(s))
	return str
}

func (s Executor_exec_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Params) DecodeFromPtr(p capnp.Ptr) Executor_exec_Params {
	return Executor_exec_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Executor_exec_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Executor_exec_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_exec_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_exec_Params) Bctx() BootContext {
	p, _ := capnp.Struct(s).Ptr(1)
	return BootContext(p.Interface().Client())
}

func (s Executor_exec_Params) HasBctx() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_exec_Params) SetBctx(v BootContext) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Executor_exec_Params](l), err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (f Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Params(p.Struct()), err
}
func (p Executor_exec_Params_Future) Bctx() BootContext {
	return BootContext(p.Future.Field(1, nil).Client())
}

type Executor_exec_Results capnp.Struct

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0xbb4f16b0a7d2d09b

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results(root.Struct()), err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0xbb4f16b0a7d2d09b, capnp.Struct(s))
	return str
}

func (s Executor_exec_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Results) DecodeFromPtr(p capnp.Ptr) Executor_exec_Results {
	return Executor_exec_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Results) Process() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Executor_exec_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Results) SetProcess(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results](l), err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (f Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Results(p.Struct()), err
}
func (p Executor_exec_Results_Future) Process() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Executor_execCached_Params capnp.Struct

// Executor_execCached_Params_TypeID is the unique identifier for the type Executor_execCached_Params.
const Executor_execCached_Params_TypeID = 0xb9b9c4df47b44962

func NewExecutor_execCached_Params(s *capnp.Segment) (Executor_execCached_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Executor_execCached_Params(st), err
}

func NewRootExecutor_execCached_Params(s *capnp.Segment) (Executor_execCached_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Executor_execCached_Params(st), err
}

func ReadRootExecutor_execCached_Params(msg *capnp.Message) (Executor_execCached_Params, error) {
	root, err := msg.Root()
	return Executor_execCached_Params(root.Struct()), err
}

func (s Executor_execCached_Params) String() string {
	str, _ := text.Marshal(0xb9b9c4df47b44962, capnp.Struct(s))
	return str
}

func (s Executor_execCached_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execCached_Params) DecodeFromPtr(p capnp.Ptr) Executor_execCached_Params {
	return Executor_execCached_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execCached_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execCached_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execCached_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execCached_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execCached_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Executor_execCached_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execCached_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Executor_execCached_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_execCached_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_execCached_Params) Bctx() BootContext {
	p, _ := capnp.Struct(s).Ptr(1)
	return BootContext(p.Interface().Client())
}

func (s Executor_execCached_Params) HasBctx() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_execCached_Params) SetBctx(v BootContext) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Executor_execCached_Params_List is a list of Executor_execCached_Params.
type Executor_execCached_Params_List = capnp.StructList[Executor_execCached_Params]

// NewExecutor_execCached_Params creates a new list of Executor_execCached_Params.
func NewExecutor_execCached_Params_List(s *capnp.Segment, sz int32) (Executor_execCached_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Executor_execCached_Params](l), err
}

// Executor_execCached_Params_Future is a wrapper for a Executor_execCached_Params promised by a client call.
type Executor_execCached_Params_Future struct{ *capnp.Future }

func (f Executor_execCached_Params_Future) Struct() (Executor_execCached_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_execCached_Params(p.Struct()), err
}
func (p Executor_execCached_Params_Future) Bctx() BootContext {
	return BootContext(p.Future.Field(1, nil).Client())
}

type Executor_execCached_Results capnp.Struct

// Executor_execCached_Results_TypeID is the unique identifier for the type Executor_execCached_Results.
const Executor_execCached_Results_TypeID = 0xa21a945a0ef3799e

func NewExecutor_execCached_Results(s *capnp.Segment) (Executor_execCached_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(st), err
}

func NewRootExecutor_execCached_Results(s *capnp.Segment) (Executor_execCached_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(st), err
}

func ReadRootExecutor_execCached_Results(msg *capnp.Message) (Executor_execCached_Results, error) {
	root, err := msg.Root()
	return Executor_execCached_Results(root.Struct()), err
}

func (s Executor_execCached_Results) String() string {
	str, _ := text.Marshal(0xa21a945a0ef3799e, capnp.Struct(s))
	return str
}

func (s Executor_execCached_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execCached_Results) DecodeFromPtr(p capnp.Ptr) Executor_execCached_Results {
	return Executor_execCached_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execCached_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execCached_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execCached_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execCached_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execCached_Results) Process() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Executor_execCached_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execCached_Results) SetProcess(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_execCached_Results_List is a list of Executor_execCached_Results.
type Executor_execCached_Results_List = capnp.StructList[Executor_execCached_Results]

// NewExecutor_execCached_Results creates a new list of Executor_execCached_Results.
func NewExecutor_execCached_Results_List(s *capnp.Segment, sz int32) (Executor_execCached_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_execCached_Results](l), err
}

// Executor_execCached_Results_Future is a wrapper for a Executor_execCached_Results promised by a client call.
type Executor_execCached_Results_Future struct{ *capnp.Future }

func (f Executor_execCached_Results_Future) Struct() (Executor_execCached_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_execCached_Results(p.Struct()), err
}
func (p Executor_execCached_Results_Future) Process() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type BytecodeCache capnp.Client

// BytecodeCache_TypeID is the unique identifier for the type BytecodeCache.
const BytecodeCache_TypeID = 0xe64ce403f6090174

func (c BytecodeCache) Put(ctx context.Context, params func(BytecodeCache_put_Params) error) (BytecodeCache_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_put_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Get(ctx context.Context, params func(BytecodeCache_get_Params) error) (BytecodeCache_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_get_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Has(ctx context.Context, params func(BytecodeCache_has_Params) error) (BytecodeCache_has_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_has_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_has_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BytecodeCache) String() string {
	return "BytecodeCache(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BytecodeCache) AddRef() BytecodeCache {
	return BytecodeCache(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BytecodeCache) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BytecodeCache) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BytecodeCache) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BytecodeCache) DecodeFromPtr(p capnp.Ptr) BytecodeCache {
	return BytecodeCache(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BytecodeCache) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BytecodeCache) IsSame(other BytecodeCache) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BytecodeCache) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BytecodeCache) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BytecodeCache_Server is a BytecodeCache with a local implementation.
type BytecodeCache_Server interface {
	Put(context.Context, BytecodeCache_put) error

	Get(context.Context, BytecodeCache_get) error

	Has(context.Context, BytecodeCache_has) error
}

// BytecodeCache_NewServer creates a new Server from an implementation of BytecodeCache_Server.
func BytecodeCache_NewServer(s BytecodeCache_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BytecodeCache_Methods(nil, s), s, c)
}

// BytecodeCache_ServerToClient creates a new Client from an implementation of BytecodeCache_Server.
// The caller is responsible for calling Release on the returned Client.
func BytecodeCache_ServerToClient(s BytecodeCache_Server) BytecodeCache {
	return BytecodeCache(capnp.NewClient(BytecodeCache_NewServer(s)))
}

// BytecodeCache_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BytecodeCache_Methods(methods []server.Method, s BytecodeCache_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, BytecodeCache_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, BytecodeCache_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Has(ctx, BytecodeCache_has{call})
		},
	})

	return methods
}

// BytecodeCache_put holds the state for a server call to BytecodeCache.put.
// See server.Call for documentation.
type BytecodeCache_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_put) Args() BytecodeCache_put_Params {
	return BytecodeCache_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_put) AllocResults() (BytecodeCache_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(r), err
}

// BytecodeCache_get holds the state for a server call to BytecodeCache.get.
// See server.Call for documentation.
type BytecodeCache_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_get) Args() BytecodeCache_get_Params {
	return BytecodeCache_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_get) AllocResults() (BytecodeCache_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(r), err
}

// BytecodeCache_has holds the state for a server call to BytecodeCache.has.
// See server.Call for documentation.
type BytecodeCache_has struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_has) Args() BytecodeCache_has_Params {
	return BytecodeCache_has_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_has) AllocResults() (BytecodeCache_has_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(r), err
}

// BytecodeCache_List is a list of BytecodeCache.
type BytecodeCache_List = capnp.CapList[BytecodeCache]

// NewBytecodeCache creates a new list of BytecodeCache.
func NewBytecodeCache_List(s *capnp.Segment, sz int32) (BytecodeCache_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BytecodeCache](l), err
}

type BytecodeCache_put_Params capnp.Struct

// BytecodeCache_put_Params_TypeID is the unique identifier for the type BytecodeCache_put_Params.
const BytecodeCache_put_Params_TypeID = 0x91b6120f2a2e3ebe

func NewBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func NewRootBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func ReadRootBytecodeCache_put_Params(msg *capnp.Message) (BytecodeCache_put_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Params(root.Struct()), err
}

func (s BytecodeCache_put_Params) String() string {
	str, _ := text.Marshal(0x91b6120f2a2e3ebe, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Params {
	return BytecodeCache_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Params_List is a list of BytecodeCache_put_Params.
type BytecodeCache_put_Params_List = capnp.StructList[BytecodeCache_put_Params]

// NewBytecodeCache_put_Params creates a new list of BytecodeCache_put_Params.
func NewBytecodeCache_put_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Params](l), err
}

// BytecodeCache_put_Params_Future is a wrapper for a BytecodeCache_put_Params promised by a client call.
type BytecodeCache_put_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Params_Future) Struct() (BytecodeCache_put_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Params(p.Struct()), err
}

type BytecodeCache_put_Results capnp.Struct

// BytecodeCache_put_Results_TypeID is the unique identifier for the type BytecodeCache_put_Results.
const BytecodeCache_put_Results_TypeID = 0xf51e7dd3fc20b968

func NewBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func NewRootBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func ReadRootBytecodeCache_put_Results(msg *capnp.Message) (BytecodeCache_put_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Results(root.Struct()), err
}

func (s BytecodeCache_put_Results) String() string {
	str, _ := text.Marshal(0xf51e7dd3fc20b968, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Results {
	return BytecodeCache_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Results) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Results) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Results_List is a list of BytecodeCache_put_Results.
type BytecodeCache_put_Results_List = capnp.StructList[BytecodeCache_put_Results]

// NewBytecodeCache_put_Results creates a new list of BytecodeCache_put_Results.
func NewBytecodeCache_put_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Results](l), err
}

// BytecodeCache_put_Results_Future is a wrapper for a BytecodeCache_put_Results promised by a client call.
type BytecodeCache_put_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Results_Future) Struct() (BytecodeCache_put_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Results(p.Struct()), err
}

type BytecodeCache_get_Params capnp.Struct

// BytecodeCache_get_Params_TypeID is the unique identifier for the type BytecodeCache_get_Params.
const BytecodeCache_get_Params_TypeID = 0xf694129c75eba87c

func NewBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func NewRootBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func ReadRootBytecodeCache_get_Params(msg *capnp.Message) (BytecodeCache_get_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Params(root.Struct()), err
}

func (s BytecodeCache_get_Params) String() string {
	str, _ := text.Marshal(0xf694129c75eba87c, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Params {
	return BytecodeCache_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Params_List is a list of BytecodeCache_get_Params.
type BytecodeCache_get_Params_List = capnp.StructList[BytecodeCache_get_Params]

// NewBytecodeCache_get_Params creates a new list of BytecodeCache_get_Params.
func NewBytecodeCache_get_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Params](l), err
}

// BytecodeCache_get_Params_Future is a wrapper for a BytecodeCache_get_Params promised by a client call.
type BytecodeCache_get_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Params_Future) Struct() (BytecodeCache_get_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Params(p.Struct()), err
}

type BytecodeCache_get_Results capnp.Struct

// BytecodeCache_get_Results_TypeID is the unique identifier for the type BytecodeCache_get_Results.
const BytecodeCache_get_Results_TypeID = 0xb2c6f1c55b7403f4

func NewBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func NewRootBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func ReadRootBytecodeCache_get_Results(msg *capnp.Message) (BytecodeCache_get_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Results(root.Struct()), err
}

func (s BytecodeCache_get_Results) String() string {
	str, _ := text.Marshal(0xb2c6f1c55b7403f4, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Results {
	return BytecodeCache_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Results) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Results) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Results) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Results_List is a list of BytecodeCache_get_Results.
type BytecodeCache_get_Results_List = capnp.StructList[BytecodeCache_get_Results]

// NewBytecodeCache_get_Results creates a new list of BytecodeCache_get_Results.
func NewBytecodeCache_get_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Results](l), err
}

// BytecodeCache_get_Results_Future is a wrapper for a BytecodeCache_get_Results promised by a client call.
type BytecodeCache_get_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Results_Future) Struct() (BytecodeCache_get_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Results(p.Struct()), err
}

type BytecodeCache_has_Params capnp.Struct

// BytecodeCache_has_Params_TypeID is the unique identifier for the type BytecodeCache_has_Params.
const BytecodeCache_has_Params_TypeID = 0xc25a17a8499cfe55

func NewBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func NewRootBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func ReadRootBytecodeCache_has_Params(msg *capnp.Message) (BytecodeCache_has_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Params(root.Struct()), err
}

func (s BytecodeCache_has_Params) String() string {
	str, _ := text.Marshal(0xc25a17a8499cfe55, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Params {
	return BytecodeCache_has_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_has_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_has_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_has_Params_List is a list of BytecodeCache_has_Params.
type BytecodeCache_has_Params_List = capnp.StructList[BytecodeCache_has_Params]

// NewBytecodeCache_has_Params creates a new list of BytecodeCache_has_Params.
func NewBytecodeCache_has_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_has_Params](l), err
}

// BytecodeCache_has_Params_Future is a wrapper for a BytecodeCache_has_Params promised by a client call.
type BytecodeCache_has_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Params_Future) Struct() (BytecodeCache_has_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Params(p.Struct()), err
}

type BytecodeCache_has_Results capnp.Struct

// BytecodeCache_has_Results_TypeID is the unique identifier for the type BytecodeCache_has_Results.
const BytecodeCache_has_Results_TypeID = 0xf9602cd2c3f65e0f

func NewBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func NewRootBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func ReadRootBytecodeCache_has_Results(msg *capnp.Message) (BytecodeCache_has_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Results(root.Struct()), err
}

func (s BytecodeCache_has_Results) String() string {
	str, _ := text.Marshal(0xf9602cd2c3f65e0f, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Results {
	return BytecodeCache_has_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Results) Has() bool {
	return capnp.Struct(s).Bit(0)
}

func (s BytecodeCache_has_Results) SetHas(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// BytecodeCache_has_Results_List is a list of BytecodeCache_has_Results.
type BytecodeCache_has_Results_List = capnp.StructList[BytecodeCache_has_Results]

// NewBytecodeCache_has_Results creates a new list of BytecodeCache_has_Results.
func NewBytecodeCache_has_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BytecodeCache_has_Results](l), err
}

// BytecodeCache_has_Results_Future is a wrapper for a BytecodeCache_has_Results promised by a client call.
type BytecodeCache_has_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Results_Future) Struct() (BytecodeCache_has_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Results(p.Struct()), err
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release

}

func (c Process) Kill(ctx context.Context, params func(Process_kill_Params) error) (Process_kill_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_kill_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_kill_Results_Future{Future: ans.Future()}, release

}

func (c Process) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return "Process(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Wait(context.Context, Process_wait) error

	Kill(context.Context, Process_kill) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Kill(ctx, Process_kill{call})
		},
	})

	return methods
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(r), err
}

// Process_kill holds the state for a server call to Process.kill.
// See server.Call for documentation.
type Process_kill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_kill) Args() Process_kill_Params {
	return Process_kill_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_kill) AllocResults() (Process_kill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_wait_Results) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}

type Process_kill_Params capnp.Struct

// Process_kill_Params_TypeID is the unique identifier for the type Process_kill_Params.
const Process_kill_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func NewRootProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func ReadRootProcess_kill_Params(msg *capnp.Message) (Process_kill_Params, error) {
	root, err := msg.Root()
	return Process_kill_Params(root.Struct()), err
}

func (s Process_kill_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_kill_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Params) DecodeFromPtr(p capnp.Ptr) Process_kill_Params {
	return Process_kill_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Params_List is a list of Process_kill_Params.
type Process_kill_Params_List = capnp.StructList[Process_kill_Params]

// NewProcess_kill_Params creates a new list of Process_kill_Params.
func NewProcess_kill_Params_List(s *capnp.Segment, sz int32) (Process_kill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Params](l), err
}

// Process_kill_Params_Future is a wrapper for a Process_kill_Params promised by a client call.
type Process_kill_Params_Future struct{ *capnp.Future }

func (f Process_kill_Params_Future) Struct() (Process_kill_Params, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Params(p.Struct()), err
}

type Process_kill_Results capnp.Struct

// Process_kill_Results_TypeID is the unique identifier for the type Process_kill_Results.
const Process_kill_Results_TypeID = 0xc53168b273d497ee

func NewProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func NewRootProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func ReadRootProcess_kill_Results(msg *capnp.Message) (Process_kill_Results, error) {
	root, err := msg.Root()
	return Process_kill_Results(root.Struct()), err
}

func (s Process_kill_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_kill_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Results) DecodeFromPtr(p capnp.Ptr) Process_kill_Results {
	return Process_kill_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Results_List is a list of Process_kill_Results.
type Process_kill_Results_List = capnp.StructList[Process_kill_Results]

// NewProcess_kill_Results creates a new list of Process_kill_Results.
func NewProcess_kill_Results_List(s *capnp.Segment, sz int32) (Process_kill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Results](l), err
}

// Process_kill_Results_Future is a wrapper for a Process_kill_Results promised by a client call.
type Process_kill_Results_Future struct{ *capnp.Future }

func (f Process_kill_Results_Future) Struct() (Process_kill_Results, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Results(p.Struct()), err
}

type BootContext capnp.Client

// BootContext_TypeID is the unique identifier for the type BootContext.
const BootContext_TypeID = 0xef622b23fee0980e

func (c BootContext) Pid(ctx context.Context, params func(BootContext_pid_Params) error) (BootContext_pid_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      0,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "pid",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_pid_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_pid_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) Cid(ctx context.Context, params func(BootContext_cid_Params) error) (BootContext_cid_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      1,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "cid",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_cid_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_cid_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) Args(ctx context.Context, params func(BootContext_args_Params) error) (BootContext_args_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      2,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "args",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_args_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_args_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) Caps(ctx context.Context, params func(BootContext_caps_Params) error) (BootContext_caps_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      3,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "caps",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_caps_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_caps_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) SetPid(ctx context.Context, params func(BootContext_setPid_Params) error) (BootContext_setPid_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      4,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "setPid",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_setPid_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_setPid_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) SetCid(ctx context.Context, params func(BootContext_setCid_Params) error) (BootContext_setCid_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      5,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "setCid",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_setCid_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_setCid_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BootContext) String() string {
	return "BootContext(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BootContext) AddRef() BootContext {
	return BootContext(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BootContext) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BootContext) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BootContext) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BootContext) DecodeFromPtr(p capnp.Ptr) BootContext {
	return BootContext(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BootContext) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BootContext) IsSame(other BootContext) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BootContext) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BootContext) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BootContext_Server is a BootContext with a local implementation.
type BootContext_Server interface {
	Pid(context.Context, BootContext_pid) error

	Cid(context.Context, BootContext_cid) error

	Args(context.Context, BootContext_args) error

	Caps(context.Context, BootContext_caps) error

	SetPid(context.Context, BootContext_setPid) error

	SetCid(context.Context, BootContext_setCid) error
}

// BootContext_NewServer creates a new Server from an implementation of BootContext_Server.
func BootContext_NewServer(s BootContext_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BootContext_Methods(nil, s), s, c)
}

// BootContext_ServerToClient creates a new Client from an implementation of BootContext_Server.
// The caller is responsible for calling Release on the returned Client.
func BootContext_ServerToClient(s BootContext_Server) BootContext {
	return BootContext(capnp.NewClient(BootContext_NewServer(s)))
}

// BootContext_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BootContext_Methods(methods []server.Method, s BootContext_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      0,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "pid",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pid(ctx, BootContext_pid{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      1,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "cid",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cid(ctx, BootContext_cid{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      2,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "args",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Args(ctx, BootContext_args{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      3,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "caps",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Caps(ctx, BootContext_caps{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      4,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "setPid",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetPid(ctx, BootContext_setPid{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      5,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "setCid",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetCid(ctx, BootContext_setCid{call})
		},
	})

	return methods
}

// BootContext_pid holds the state for a server call to BootContext.pid.
// See server.Call for documentation.
type BootContext_pid struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_pid) Args() BootContext_pid_Params {
	return BootContext_pid_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_pid) AllocResults() (BootContext_pid_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_pid_Results(r), err
}

// BootContext_cid holds the state for a server call to BootContext.cid.
// See server.Call for documentation.
type BootContext_cid struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_cid) Args() BootContext_cid_Params {
	return BootContext_cid_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_cid) AllocResults() (BootContext_cid_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_cid_Results(r), err
}

// BootContext_args holds the state for a server call to BootContext.args.
// See server.Call for documentation.
type BootContext_args struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_args) Args() BootContext_args_Params {
	return BootContext_args_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_args) AllocResults() (BootContext_args_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_args_Results(r), err
}

// BootContext_caps holds the state for a server call to BootContext.caps.
// See server.Call for documentation.
type BootContext_caps struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_caps) Args() BootContext_caps_Params {
	return BootContext_caps_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_caps) AllocResults() (BootContext_caps_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_caps_Results(r), err
}

// BootContext_setPid holds the state for a server call to BootContext.setPid.
// See server.Call for documentation.
type BootContext_setPid struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_setPid) Args() BootContext_setPid_Params {
	return BootContext_setPid_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_setPid) AllocResults() (BootContext_setPid_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setPid_Results(r), err
}

// BootContext_setCid holds the state for a server call to BootContext.setCid.
// See server.Call for documentation.
type BootContext_setCid struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_setCid) Args() BootContext_setCid_Params {
	return BootContext_setCid_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_setCid) AllocResults() (BootContext_setCid_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setCid_Results(r), err
}

// BootContext_List is a list of BootContext.
type BootContext_List = capnp.CapList[BootContext]

// NewBootContext creates a new list of BootContext.
func NewBootContext_List(s *capnp.Segment, sz int32) (BootContext_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BootContext](l), err
}

type BootContext_pid_Params capnp.Struct

// BootContext_pid_Params_TypeID is the unique identifier for the type BootContext_pid_Params.
const BootContext_pid_Params_TypeID = 0xa7600db255bca0c7

func NewBootContext_pid_Params(s *capnp.Segment) (BootContext_pid_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_pid_Params(st), err
}

func NewRootBootContext_pid_Params(s *capnp.Segment) (BootContext_pid_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_pid_Params(st), err
}

func ReadRootBootContext_pid_Params(msg *capnp.Message) (BootContext_pid_Params, error) {
	root, err := msg.Root()
	return BootContext_pid_Params(root.Struct()), err
}

func (s BootContext_pid_Params) String() string {
	str, _ := text.Marshal(0xa7600db255bca0c7, capnp.Struct(s))
	return str
}

func (s BootContext_pid_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_pid_Params) DecodeFromPtr(p capnp.Ptr) BootContext_pid_Params {
	return BootContext_pid_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_pid_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_pid_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_pid_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_pid_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_pid_Params_List is a list of BootContext_pid_Params.
type BootContext_pid_Params_List = capnp.StructList[BootContext_pid_Params]

// NewBootContext_pid_Params creates a new list of BootContext_pid_Params.
func NewBootContext_pid_Params_List(s *capnp.Segment, sz int32) (BootContext_pid_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_pid_Params](l), err
}

// BootContext_pid_Params_Future is a wrapper for a BootContext_pid_Params promised by a client call.
type BootContext_pid_Params_Future struct{ *capnp.Future }

func (f BootContext_pid_Params_Future) Struct() (BootContext_pid_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_pid_Params(p.Struct()), err
}

type BootContext_pid_Results capnp.Struct

// BootContext_pid_Results_TypeID is the unique identifier for the type BootContext_pid_Results.
const BootContext_pid_Results_TypeID = 0xe84ba4855da630b6

func NewBootContext_pid_Results(s *capnp.Segment) (BootContext_pid_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_pid_Results(st), err
}

func NewRootBootContext_pid_Results(s *capnp.Segment) (BootContext_pid_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_pid_Results(st), err
}

func ReadRootBootContext_pid_Results(msg *capnp.Message) (BootContext_pid_Results, error) {
	root, err := msg.Root()
	return BootContext_pid_Results(root.Struct()), err
}

func (s BootContext_pid_Results) String() string {
	str, _ := text.Marshal(0xe84ba4855da630b6, capnp.Struct(s))
	return str
}

func (s BootContext_pid_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_pid_Results) DecodeFromPtr(p capnp.Ptr) BootContext_pid_Results {
	return BootContext_pid_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_pid_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_pid_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_pid_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_pid_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_pid_Results) Pid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s BootContext_pid_Results) SetPid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// BootContext_pid_Results_List is a list of BootContext_pid_Results.
type BootContext_pid_Results_List = capnp.StructList[BootContext_pid_Results]

// NewBootContext_pid_Results creates a new list of BootContext_pid_Results.
func NewBootContext_pid_Results_List(s *capnp.Segment, sz int32) (BootContext_pid_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_pid_Results](l), err
}

// BootContext_pid_Results_Future is a wrapper for a BootContext_pid_Results promised by a client call.
type BootContext_pid_Results_Future struct{ *capnp.Future }

func (f BootContext_pid_Results_Future) Struct() (BootContext_pid_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_pid_Results(p.Struct()), err
}

type BootContext_cid_Params capnp.Struct

// BootContext_cid_Params_TypeID is the unique identifier for the type BootContext_cid_Params.
const BootContext_cid_Params_TypeID = 0x8dbc523bcfdca829

func NewBootContext_cid_Params(s *capnp.Segment) (BootContext_cid_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_cid_Params(st), err
}

func NewRootBootContext_cid_Params(s *capnp.Segment) (BootContext_cid_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_cid_Params(st), err
}

func ReadRootBootContext_cid_Params(msg *capnp.Message) (BootContext_cid_Params, error) {
	root, err := msg.Root()
	return BootContext_cid_Params(root.Struct()), err
}

func (s BootContext_cid_Params) String() string {
	str, _ := text.Marshal(0x8dbc523bcfdca829, capnp.Struct(s))
	return str
}

func (s BootContext_cid_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_cid_Params) DecodeFromPtr(p capnp.Ptr) BootContext_cid_Params {
	return BootContext_cid_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_cid_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_cid_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_cid_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_cid_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_cid_Params_List is a list of BootContext_cid_Params.
type BootContext_cid_Params_List = capnp.StructList[BootContext_cid_Params]

// NewBootContext_cid_Params creates a new list of BootContext_cid_Params.
func NewBootContext_cid_Params_List(s *capnp.Segment, sz int32) (BootContext_cid_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_cid_Params](l), err
}

// BootContext_cid_Params_Future is a wrapper for a BootContext_cid_Params promised by a client call.
type BootContext_cid_Params_Future struct{ *capnp.Future }

func (f BootContext_cid_Params_Future) Struct() (BootContext_cid_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_cid_Params(p.Struct()), err
}

type BootContext_cid_Results capnp.Struct

// BootContext_cid_Results_TypeID is the unique identifier for the type BootContext_cid_Results.
const BootContext_cid_Results_TypeID = 0xda227d43770b4d13

func NewBootContext_cid_Results(s *capnp.Segment) (BootContext_cid_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_cid_Results(st), err
}

func NewRootBootContext_cid_Results(s *capnp.Segment) (BootContext_cid_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_cid_Results(st), err
}

func ReadRootBootContext_cid_Results(msg *capnp.Message) (BootContext_cid_Results, error) {
	root, err := msg.Root()
	return BootContext_cid_Results(root.Struct()), err
}

func (s BootContext_cid_Results) String() string {
	str, _ := text.Marshal(0xda227d43770b4d13, capnp.Struct(s))
	return str
}

func (s BootContext_cid_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_cid_Results) DecodeFromPtr(p capnp.Ptr) BootContext_cid_Results {
	return BootContext_cid_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_cid_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_cid_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_cid_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_cid_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_cid_Results) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BootContext_cid_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_cid_Results) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BootContext_cid_Results_List is a list of BootContext_cid_Results.
type BootContext_cid_Results_List = capnp.StructList[BootContext_cid_Results]

// NewBootContext_cid_Results creates a new list of BootContext_cid_Results.
func NewBootContext_cid_Results_List(s *capnp.Segment, sz int32) (BootContext_cid_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_cid_Results](l), err
}

// BootContext_cid_Results_Future is a wrapper for a BootContext_cid_Results promised by a client call.
type BootContext_cid_Results_Future struct{ *capnp.Future }

func (f BootContext_cid_Results_Future) Struct() (BootContext_cid_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_cid_Results(p.Struct()), err
}

type BootContext_args_Params capnp.Struct

// BootContext_args_Params_TypeID is the unique identifier for the type BootContext_args_Params.
const BootContext_args_Params_TypeID = 0xdd266b5e92d80bb6

func NewBootContext_args_Params(s *capnp.Segment) (BootContext_args_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_args_Params(st), err
}

func NewRootBootContext_args_Params(s *capnp.Segment) (BootContext_args_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_args_Params(st), err
}

func ReadRootBootContext_args_Params(msg *capnp.Message) (BootContext_args_Params, error) {
	root, err := msg.Root()
	return BootContext_args_Params(root.Struct()), err
}

func (s BootContext_args_Params) String() string {
	str, _ := text.Marshal(0xdd266b5e92d80bb6, capnp.Struct(s))
	return str
}

func (s BootContext_args_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_args_Params) DecodeFromPtr(p capnp.Ptr) BootContext_args_Params {
	return BootContext_args_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_args_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_args_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_args_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_args_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_args_Params_List is a list of BootContext_args_Params.
type BootContext_args_Params_List = capnp.StructList[BootContext_args_Params]

// NewBootContext_args_Params creates a new list of BootContext_args_Params.
func NewBootContext_args_Params_List(s *capnp.Segment, sz int32) (BootContext_args_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_args_Params](l), err
}

// BootContext_args_Params_Future is a wrapper for a BootContext_args_Params promised by a client call.
type BootContext_args_Params_Future struct{ *capnp.Future }

func (f BootContext_args_Params_Future) Struct() (BootContext_args_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_args_Params(p.Struct()), err
}

type BootContext_args_Results capnp.Struct

// BootContext_args_Results_TypeID is the unique identifier for the type BootContext_args_Results.
const BootContext_args_Results_TypeID = 0xda9aeb6068ce2f08

func NewBootContext_args_Results(s *capnp.Segment) (BootContext_args_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_args_Results(st), err
}

func NewRootBootContext_args_Results(s *capnp.Segment) (BootContext_args_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_args_Results(st), err
}

func ReadRootBootContext_args_Results(msg *capnp.Message) (BootContext_args_Results, error) {
	root, err := msg.Root()
	return BootContext_args_Results(root.Struct()), err
}

func (s BootContext_args_Results) String() string {
	str, _ := text.Marshal(0xda9aeb6068ce2f08, capnp.Struct(s))
	return str
}

func (s BootContext_args_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_args_Results) DecodeFromPtr(p capnp.Ptr) BootContext_args_Results {
	return BootContext_args_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_args_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_args_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_args_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_args_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_args_Results) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s BootContext_args_Results) HasArgs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_args_Results) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s BootContext_args_Results) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// BootContext_args_Results_List is a list of BootContext_args_Results.
type BootContext_args_Results_List = capnp.StructList[BootContext_args_Results]

// NewBootContext_args_Results creates a new list of BootContext_args_Results.
func NewBootContext_args_Results_List(s *capnp.Segment, sz int32) (BootContext_args_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_args_Results](l), err
}

// BootContext_args_Results_Future is a wrapper for a BootContext_args_Results promised by a client call.
type BootContext_args_Results_Future struct{ *capnp.Future }

func (f BootContext_args_Results_Future) Struct() (BootContext_args_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_args_Results(p.Struct()), err
}

type BootContext_caps_Params capnp.Struct

// BootContext_caps_Params_TypeID is the unique identifier for the type BootContext_caps_Params.
const BootContext_caps_Params_TypeID = 0xb4c6412facf739e9

func NewBootContext_caps_Params(s *capnp.Segment) (BootContext_caps_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_caps_Params(st), err
}

func NewRootBootContext_caps_Params(s *capnp.Segment) (BootContext_caps_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_caps_Params(st), err
}

func ReadRootBootContext_caps_Params(msg *capnp.Message) (BootContext_caps_Params, error) {
	root, err := msg.Root()
	return BootContext_caps_Params(root.Struct()), err
}

func (s BootContext_caps_Params) String() string {
	str, _ := text.Marshal(0xb4c6412facf739e9, capnp.Struct(s))
	return str
}

func (s BootContext_caps_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_caps_Params) DecodeFromPtr(p capnp.Ptr) BootContext_caps_Params {
	return BootContext_caps_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_caps_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_caps_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_caps_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_caps_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_caps_Params_List is a list of BootContext_caps_Params.
type BootContext_caps_Params_List = capnp.StructList[BootContext_caps_Params]

// NewBootContext_caps_Params creates a new list of BootContext_caps_Params.
func NewBootContext_caps_Params_List(s *capnp.Segment, sz int32) (BootContext_caps_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_caps_Params](l), err
}

// BootContext_caps_Params_Future is a wrapper for a BootContext_caps_Params promised by a client call.
type BootContext_caps_Params_Future struct{ *capnp.Future }

func (f BootContext_caps_Params_Future) Struct() (BootContext_caps_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_caps_Params(p.Struct()), err
}

type BootContext_caps_Results capnp.Struct

// BootContext_caps_Results_TypeID is the unique identifier for the type BootContext_caps_Results.
const BootContext_caps_Results_TypeID = 0xccc01fd29eb6c672

func NewBootContext_caps_Results(s *capnp.Segment) (BootContext_caps_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_caps_Results(st), err
}

func NewRootBootContext_caps_Results(s *capnp.Segment) (BootContext_caps_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_caps_Results(st), err
}

func ReadRootBootContext_caps_Results(msg *capnp.Message) (BootContext_caps_Results, error) {
	root, err := msg.Root()
	return BootContext_caps_Results(root.Struct()), err
}

func (s BootContext_caps_Results) String() string {
	str, _ := text.Marshal(0xccc01fd29eb6c672, capnp.Struct(s))
	return str
}

func (s BootContext_caps_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_caps_Results) DecodeFromPtr(p capnp.Ptr) BootContext_caps_Results {
	return BootContext_caps_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_caps_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_caps_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_caps_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_caps_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_caps_Results) Caps() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s BootContext_caps_Results) HasCaps() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_caps_Results) SetCaps(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCaps sets the caps field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s BootContext_caps_Results) NewCaps(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// BootContext_caps_Results_List is a list of BootContext_caps_Results.
type BootContext_caps_Results_List = capnp.StructList[BootContext_caps_Results]

// NewBootContext_caps_Results creates a new list of BootContext_caps_Results.
func NewBootContext_caps_Results_List(s *capnp.Segment, sz int32) (BootContext_caps_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_caps_Results](l), err
}

// BootContext_caps_Results_Future is a wrapper for a BootContext_caps_Results promised by a client call.
type BootContext_caps_Results_Future struct{ *capnp.Future }

func (f BootContext_caps_Results_Future) Struct() (BootContext_caps_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_caps_Results(p.Struct()), err
}

type BootContext_setPid_Params capnp.Struct

// BootContext_setPid_Params_TypeID is the unique identifier for the type BootContext_setPid_Params.
const BootContext_setPid_Params_TypeID = 0x9a476b9f1a755580

func NewBootContext_setPid_Params(s *capnp.Segment) (BootContext_setPid_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_setPid_Params(st), err
}

func NewRootBootContext_setPid_Params(s *capnp.Segment) (BootContext_setPid_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_setPid_Params(st), err
}

func ReadRootBootContext_setPid_Params(msg *capnp.Message) (BootContext_setPid_Params, error) {
	root, err := msg.Root()
	return BootContext_setPid_Params(root.Struct()), err
}

func (s BootContext_setPid_Params) String() string {
	str, _ := text.Marshal(0x9a476b9f1a755580, capnp.Struct(s))
	return str
}

func (s BootContext_setPid_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_setPid_Params) DecodeFromPtr(p capnp.Ptr) BootContext_setPid_Params {
	return BootContext_setPid_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_setPid_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_setPid_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_setPid_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_setPid_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_setPid_Params) Pid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s BootContext_setPid_Params) SetPid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// BootContext_setPid_Params_List is a list of BootContext_setPid_Params.
type BootContext_setPid_Params_List = capnp.StructList[BootContext_setPid_Params]

// NewBootContext_setPid_Params creates a new list of BootContext_setPid_Params.
func NewBootContext_setPid_Params_List(s *capnp.Segment, sz int32) (BootContext_setPid_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_setPid_Params](l), err
}

// BootContext_setPid_Params_Future is a wrapper for a BootContext_setPid_Params promised by a client call.
type BootContext_setPid_Params_Future struct{ *capnp.Future }

func (f BootContext_setPid_Params_Future) Struct() (BootContext_setPid_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_setPid_Params(p.Struct()), err
}

type BootContext_setPid_Results capnp.Struct

// BootContext_setPid_Results_TypeID is the unique identifier for the type BootContext_setPid_Results.
const BootContext_setPid_Results_TypeID = 0xf96299218f4522e8

func NewBootContext_setPid_Results(s *capnp.Segment) (BootContext_setPid_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setPid_Results(st), err
}

func NewRootBootContext_setPid_Results(s *capnp.Segment) (BootContext_setPid_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setPid_Results(st), err
}

func ReadRootBootContext_setPid_Results(msg *capnp.Message) (BootContext_setPid_Results, error) {
	root, err := msg.Root()
	return BootContext_setPid_Results(root.Struct()), err
}

func (s BootContext_setPid_Results) String() string {
	str, _ := text.Marshal(0xf96299218f4522e8, capnp.Struct(s))
	return str
}

func (s BootContext_setPid_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_setPid_Results) DecodeFromPtr(p capnp.Ptr) BootContext_setPid_Results {
	return BootContext_setPid_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_setPid_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_setPid_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_setPid_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_setPid_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_setPid_Results_List is a list of BootContext_setPid_Results.
type BootContext_setPid_Results_List = capnp.StructList[BootContext_setPid_Results]

// NewBootContext_setPid_Results creates a new list of BootContext_setPid_Results.
func NewBootContext_setPid_Results_List(s *capnp.Segment, sz int32) (BootContext_setPid_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_setPid_Results](l), err
}

// BootContext_setPid_Results_Future is a wrapper for a BootContext_setPid_Results promised by a client call.
type BootContext_setPid_Results_Future struct{ *capnp.Future }

func (f BootContext_setPid_Results_Future) Struct() (BootContext_setPid_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_setPid_Results(p.Struct()), err
}

type BootContext_setCid_Params capnp.Struct

// BootContext_setCid_Params_TypeID is the unique identifier for the type BootContext_setCid_Params.
const BootContext_setCid_Params_TypeID = 0x97a28cda532de0ff

func NewBootContext_setCid_Params(s *capnp.Segment) (BootContext_setCid_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_setCid_Params(st), err
}

func NewRootBootContext_setCid_Params(s *capnp.Segment) (BootContext_setCid_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_setCid_Params(st), err
}

func ReadRootBootContext_setCid_Params(msg *capnp.Message) (BootContext_setCid_Params, error) {
	root, err := msg.Root()
	return BootContext_setCid_Params(root.Struct()), err
}

func (s BootContext_setCid_Params) String() string {
	str, _ := text.Marshal(0x97a28cda532de0ff, capnp.Struct(s))
	return str
}

func (s BootContext_setCid_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_setCid_Params) DecodeFromPtr(p capnp.Ptr) BootContext_setCid_Params {
	return BootContext_setCid_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_setCid_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_setCid_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_setCid_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_setCid_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_setCid_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BootContext_setCid_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_setCid_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BootContext_setCid_Params_List is a list of BootContext_setCid_Params.
type BootContext_setCid_Params_List = capnp.StructList[BootContext_setCid_Params]

// NewBootContext_setCid_Params creates a new list of BootContext_setCid_Params.
func NewBootContext_setCid_Params_List(s *capnp.Segment, sz int32) (BootContext_setCid_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_setCid_Params](l), err
}

// BootContext_setCid_Params_Future is a wrapper for a BootContext_setCid_Params promised by a client call.
type BootContext_setCid_Params_Future struct{ *capnp.Future }

func (f BootContext_setCid_Params_Future) Struct() (BootContext_setCid_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_setCid_Params(p.Struct()), err
}

type BootContext_setCid_Results capnp.Struct

// BootContext_setCid_Results_TypeID is the unique identifier for the type BootContext_setCid_Results.
const BootContext_setCid_Results_TypeID = 0xaab0eb92d588b81e

func NewBootContext_setCid_Results(s *capnp.Segment) (BootContext_setCid_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setCid_Results(st), err
}

func NewRootBootContext_setCid_Results(s *capnp.Segment) (BootContext_setCid_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setCid_Results(st), err
}

func ReadRootBootContext_setCid_Results(msg *capnp.Message) (BootContext_setCid_Results, error) {
	root, err := msg.Root()
	return BootContext_setCid_Results(root.Struct()), err
}

func (s BootContext_setCid_Results) String() string {
	str, _ := text.Marshal(0xaab0eb92d588b81e, capnp.Struct(s))
	return str
}

func (s BootContext_setCid_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_setCid_Results) DecodeFromPtr(p capnp.Ptr) BootContext_setCid_Results {
	return BootContext_setCid_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_setCid_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_setCid_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_setCid_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_setCid_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_setCid_Results_List is a list of BootContext_setCid_Results.
type BootContext_setCid_Results_List = capnp.StructList[BootContext_setCid_Results]

// NewBootContext_setCid_Results creates a new list of BootContext_setCid_Results.
func NewBootContext_setCid_Results_List(s *capnp.Segment, sz int32) (BootContext_setCid_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_setCid_Results](l), err
}

// BootContext_setCid_Results_Future is a wrapper for a BootContext_setCid_Results promised by a client call.
type BootContext_setCid_Results_Future struct{ *capnp.Future }

func (f BootContext_setCid_Results_Future) Struct() (BootContext_setCid_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_setCid_Results(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda\xacV]l\x14U\x14>gfwg\xda\xd2" +
	"nn\x07\xf9i\x80Ji5T)-\xc4\x87\xd6`" +
	"\x17jS[!\xeeT\x9b\x18L\x09\xdb\xdd\x09\xbb\xa1" +
	"\xa5\x9b\xeelZ\x12\x89\xf2@\xc0Db@\x08\x82\x80" +
	"\x84\x88T\x03\x02\x15\xabE0\xa2\x02/\xfe\xa5H4" +
	"(\x11Q\x0cH\x82\xff\x10\x12e\xcd\xb9\xb3w:\xdb" +
	"\x9df+\xf1\xa5\xe9\xec=\xf7|\xe7\xfb\xee\xf9\xab\xbe" +
	")\x07<5\x85\xef\x14\x80\xa4o\xf0\xfaR\xb3\xfb\xbf" +
	"\xfd\xfc\xc1\xd6\xe3\x1b\x81\x95 \x80G\x01\x98\x7f\xd2[" +
	"\x89\xe0I\xbd\xffPU\xa5\xbfxp\x13\xb0i\x08\xe0" +
	"E:z\xdd[\x87\x80\xda\x11o=`*uq\xce" +
	"\xe3\xe7\x9f\xdf\xbb\xcd\xbaj\x19\x9c\xf3.\"\x83\x0b\xdc" +
	"\xe0\xd9\xb6d\xc9++\x9bv\x80^\x82\xc2\xf9?\x96" +
	"\x81\xd7G\x06\xbbW\xffQ\xb4tK\xc9^`\x93m" +
	"\x0f\x15\xbeV2\xa8\xe1\x06g\xf6\x1co\x1b(\\\xbe" +
	"\xdf\x11\x9d\xee\xe3\xd1\xcdxw\xc3\xb9\xcd\xd7\x0e\xbf\xe1" +
	"8\xa9\xf5\xb5\xd0\xc9pr\xed\xbec\xcb\xaa\x0e\x01+" +
	"\x92S\xe1\xde{{k.\xeb;\x00P\xab\xf0\x1d\xd3" +
	"\xe6\xf8\x14\x00m\xb6o\xbd\xb6\x86\xfeK\xfd)\x9bO" +
	"\x9d\xfa\xed\xf4\x80\x93\xa4\xe1\xe3!v\xf1\x08\xae\xd6\xde" +
	"<0w\xe1\xe9\xa3\x0e\x9cM\xbey\x84\xd3\xd1|\xb4" +
	"\xe9\xbb\x8f\x87\x86@\x9fL\xec\xbc\x12\x9d\xad\xa6\x18P" +
	"[\xe7;\x04\x98z\xf9\x8b\xe1\xfd\x87'=\xf6\x9e\x93" +
	"\xdet\xa5\x8c\x0c*\x14r\xdev{gs\xff\xe4\xa5" +
	"\x1f:\xd1\x1b\x15.\xf1\x12np}\xdb\x97\x89\x81h" +
	"\xcd)`\x93\x04z\x97RB\xe8=\xa7\x07w\x0f\x97" +
	"~\xf0\x89S\xfc6\xebj;\xbfz\xa0\xa9\xba|\xcf" +
	"\xd1\xca\xaf@\x9fd\x8b\xbf\x91\xee\xa2\xb6\x95\x1bhK" +
	"\x0az\x1b\xd6\x94\x9dwz\x18R\xe6\x91\xc1In0" +
	"\xdfW\xd1\x7f\xf6\xd7Y\xe7\xb3\x84\xfc^\x19\xd0\xae*" +
	"$\xe4ee\xbd\xf6\x80JB\xaas?\x8b.\xbf\xb6" +
	"#\xc3\xdbt\x95\xc7S\xa1\x92\xb7\xc1\x82\xaf7/[" +
	"y\xcf\x05\x87\x90m*\x17\xd2\xc4\xbc\x1b\xf2\x8f\x8b\x7f" +
	"\xca\xc2Y\xa0^\xd2\x9a\xc9\xbb\xd6\xa8\x9e\xd1Np\x9c" +
	"\xc1\xea\xd7\xda\xd7\xbd\xfa\xe8\x15gN\xedSy\xd4\x07" +
	"9NS\xfb\xdc\xc3S\xdf\xdc\x7f\xdd!\xd9\xa7j1" +
	"\xe1\x14\xbdt\xf1\xf6\xac\xfb:~\xc9\xc2y[\x1d\xd6" +
	"N\x92\xf7\xf9'\xd4\xf5\xa8\x1d\xcc#\xa0\xe2\x177o" +
	"\xfdyA\xc1\xef\x19\xcf\xbb5\x8f\x0b\xb8+\x8f\x9e7" +
	":t\xf7\xdfg\xd7\xcc\xf8\xcb\xf9z\xb5\xf9<w\x16" +
	"\xe6S(O\xf7_K\xee,\xder\xc3i\x10\xca\xe7" +
	"\x9a\xc4\xb8\x81\x7f\xd9\x8d\x8f\x86\xef_~\x0b\xf4i6" +
	"\x99\xe7,\x0f\x9b\xb8\xc1\x95\xb2\xc6\x17fn\xef\xb8\xe5" +
	"\x10\xedH>\xcf\xf2\x1f\xde\xfaF\xbd\xd4\x12\xbb\xe5\xa0" +
	"\xb9+\xbf\x18\xa1:\x15\xef\xe9\x0e\x1b\x89D\x95\x1c\x0e" +
	"\xc5W\xc5\xeb\x16uw\x9b\x0d\xdd\xabL\xa3\xcf\xac\x0a" +
	"\xc7\"\xe5\xc1\x90\xbf'\xd4\x95\xc82[m\x1a\xe1\xee" +
	"\x88\xd1\x10\x0aG\x8d\xaax\xd2,\xaf\x0f\x86\xc8P\xf7" +
	"\xc8\x1e\x00\x0f\x02\xb0\xc2\x16\x00}\x82\x8c\xfa\x14\x09S" +
	"\x1d\xe9\x0b\x00\x80\x85 a!\xa0\xed\xd3\x93\x0d\x9d0" +
	"\xcc\x06\x8eN>\xc1\xe9\xb4\x0c@We\xd4'J\xa8" +
	"\x84c\x91q:\x0b\xe6v\x16\x8fEP\x05\x09\xd5l" +
	"g\x8d}F8iv\xf7T\x19}F\x98S\x8e\x94" +
	"\xb7\x1a\x89d\xa7\x89\x19\x84\x17\x8d\xb8{&\xed\x02\xd9" +
	"Ha\x00\"s8wQ<\xee\xa2\xf8\xd8\xeaX!" +
	"$\x00l[\x14\xf1\xd6[\x01\x07\x11uU\xf6:\xf2" +
	"\x13E\x97a5\x95 \xb1\x0a\x05\xd1nM(\x1a," +
	"\x9b\xba\x14$\xc6\x14?\xf1\x0d`J\xd0\x06\xd9\x88\x04" +
	"0\x88\xd9jg\xa4\xc3\x0a\xc3\xb4c\xbb\x93|pK" +
	"\xc5P<Q\x1e,\x0d\xb9)\xe3\xf6:\xe9\xb7&<" +
	"\x01\xdfH\x8f\x1d\x90Q_,!\xe2D\xaa \xd6\\" +
	"\x09\xa0?,\xa3\x1e\x94\x90I8\x11%\x00\xb6\x84~" +
	"|DF\xfd\x89\xcc\x14\xf3\xc7\x1d)\xe2\xef\x08\x9b}" +
	"\xc8F\xba\x84\xfb\xe3f\xc4\xc6EQ:\xcd\xff!g" +
	"2\xf4\x8e\x86\x12n\xe5\x97\xabR\xd2\xbe\x82\xe9\xcf\x95" +
	"\xb1\xceN\xeb\xd9d3\x91\xf3-Z\xeb\xad\x07v\x02" +
	"V\xa6\x01\xcb%\xf4\x93\x11\x16\x01\x06e\xc4b\x8f\x0c" +
	"H\x1fcA\xf7\x86b\xa6\x0d=V\xc6\x18}1\xb3" +
	"!\x9d1\xa3\xebt\x8c\xe6\xd5j\x94f\x05\x99K\x15" +
	"\x14\xa1\x95\xf2\xef\x91\x0a\x12-\x14\xc5\xa8tT\x90\x98" +
	"\"(&0\x9bJg\x85\x8a\x9f\xa8\x05\xd0O\xe2f" +
	"V\x8eK\xc8\xa1\x9e\x15\xb9\x85%#!\xec\x04\x90\xdc" +
	"d\xcd\xf29\xbap\xa4\xd1Y\xa4\x84\xa3\x061\x9d\xc0" +
	"\x99\x8aU\x0e\xc5\xc8bz\x19H\xac\x91\x98\x8a!\x85" +
	"b\x15b\xb5t6GA\xc9\xdeOP\x0c*6\x93" +
	"\xce\xeeR\x94x\xd2\x0c\xa0\xb2\xc2\xa0\xbf\xd1P\"\xa7" +
	"\x12\xf1q<\x9e[\xbfvKi^\x18\x98M\xde\x86" +
	"C\x93\xa8O\xe1\xd4\xc5\x06\x89bq`G\x88\xc2>" +
	"\xa2.v_\x14\xab\x10\xdbNg\x1b\x89\xbaXWP" +
	",6l-%@RA\xd9\xde\x09Q,a,F" +
	"g\xed\x0az\xec\x9d\x17\xc5\xe8fz\x9d%\xb5\xd7^" +
	"\x98Q,\xaf\xac\xb6\x8eKM\xd4\x03<{\x03V>" +
	"\x04\xacz\x0b`\xbd5\xea\xac\x7f\x1ab\x11W\xa13" +
	"{\x12\xc9#w%\x9c\x8d\xb2e\xa4)\x8aF\xe9\xec" +
	"\x89v\xa3\xd4\xe9\xc7\xc52\xeaO\xba7\xf4\xff\xd40" +
	"=c-\x16n\x93d\x9c\xad-{,\xddA\x9b\xf4" +
	"\x8c\xd5rs\x05\x16\x0d%\x10AB\x1c\xd7v\x92=" +
	"\xcc\xdd\x9ad:\x99\xff\x0d\x00\x00\xff\xff-\xf9\xbc\x03"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9a51e53177277763,
		Nodes: []uint64{
			0x8dbc523bcfdca829,
			0x91b6120f2a2e3ebe,
			0x97a28cda532de0ff,
			0x9a476b9f1a755580,
			0xa21a945a0ef3799e,
			0xa7600db255bca0c7,
			0xaab0eb92d588b81e,
			0xaf2e5ebaa58175d2,
			0xb2c6f1c55b7403f4,
			0xb4c6412facf739e9,
			0xb9b9c4df47b44962,
			0xbb4f16b0a7d2d09b,
			0xc25a17a8499cfe55,
			0xc53168b273d497ee,
			0xccc01fd29eb6c672,
			0xd72ab4a0243047ac,
			0xda227d43770b4d13,
			0xda23f0d3a8250633,
			0xda9aeb6068ce2f08,
			0xdd266b5e92d80bb6,
			0xe64ce403f6090174,
			0xe84ba4855da630b6,
			0xeea7ae19b02f5d47,
			0xef622b23fee0980e,
			0xf20b3dea95929312,
			0xf51e7dd3fc20b968,
			0xf694129c75eba87c,
			0xf9602cd2c3f65e0f,
			0xf96299218f4522e8,
			0xf9694ae208dbb3e3,
		},
		Compressed: true,
	})
}
