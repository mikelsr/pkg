// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type BytecodeCache capnp.Client

// BytecodeCache_TypeID is the unique identifier for the type BytecodeCache.
const BytecodeCache_TypeID = 0xe64ce403f6090174

func (c BytecodeCache) Put(ctx context.Context, params func(BytecodeCache_put_Params) error) (BytecodeCache_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_put_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Get(ctx context.Context, params func(BytecodeCache_get_Params) error) (BytecodeCache_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_get_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Has(ctx context.Context, params func(BytecodeCache_has_Params) error) (BytecodeCache_has_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_has_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_has_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BytecodeCache) String() string {
	return "BytecodeCache(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BytecodeCache) AddRef() BytecodeCache {
	return BytecodeCache(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BytecodeCache) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BytecodeCache) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BytecodeCache) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BytecodeCache) DecodeFromPtr(p capnp.Ptr) BytecodeCache {
	return BytecodeCache(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BytecodeCache) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BytecodeCache) IsSame(other BytecodeCache) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BytecodeCache) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BytecodeCache) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BytecodeCache_Server is a BytecodeCache with a local implementation.
type BytecodeCache_Server interface {
	Put(context.Context, BytecodeCache_put) error

	Get(context.Context, BytecodeCache_get) error

	Has(context.Context, BytecodeCache_has) error
}

// BytecodeCache_NewServer creates a new Server from an implementation of BytecodeCache_Server.
func BytecodeCache_NewServer(s BytecodeCache_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BytecodeCache_Methods(nil, s), s, c)
}

// BytecodeCache_ServerToClient creates a new Client from an implementation of BytecodeCache_Server.
// The caller is responsible for calling Release on the returned Client.
func BytecodeCache_ServerToClient(s BytecodeCache_Server) BytecodeCache {
	return BytecodeCache(capnp.NewClient(BytecodeCache_NewServer(s)))
}

// BytecodeCache_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BytecodeCache_Methods(methods []server.Method, s BytecodeCache_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, BytecodeCache_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, BytecodeCache_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Has(ctx, BytecodeCache_has{call})
		},
	})

	return methods
}

// BytecodeCache_put holds the state for a server call to BytecodeCache.put.
// See server.Call for documentation.
type BytecodeCache_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_put) Args() BytecodeCache_put_Params {
	return BytecodeCache_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_put) AllocResults() (BytecodeCache_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(r), err
}

// BytecodeCache_get holds the state for a server call to BytecodeCache.get.
// See server.Call for documentation.
type BytecodeCache_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_get) Args() BytecodeCache_get_Params {
	return BytecodeCache_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_get) AllocResults() (BytecodeCache_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(r), err
}

// BytecodeCache_has holds the state for a server call to BytecodeCache.has.
// See server.Call for documentation.
type BytecodeCache_has struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_has) Args() BytecodeCache_has_Params {
	return BytecodeCache_has_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_has) AllocResults() (BytecodeCache_has_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(r), err
}

// BytecodeCache_List is a list of BytecodeCache.
type BytecodeCache_List = capnp.CapList[BytecodeCache]

// NewBytecodeCache creates a new list of BytecodeCache.
func NewBytecodeCache_List(s *capnp.Segment, sz int32) (BytecodeCache_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BytecodeCache](l), err
}

type BytecodeCache_put_Params capnp.Struct

// BytecodeCache_put_Params_TypeID is the unique identifier for the type BytecodeCache_put_Params.
const BytecodeCache_put_Params_TypeID = 0x91b6120f2a2e3ebe

func NewBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func NewRootBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func ReadRootBytecodeCache_put_Params(msg *capnp.Message) (BytecodeCache_put_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Params(root.Struct()), err
}

func (s BytecodeCache_put_Params) String() string {
	str, _ := text.Marshal(0x91b6120f2a2e3ebe, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Params {
	return BytecodeCache_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Params_List is a list of BytecodeCache_put_Params.
type BytecodeCache_put_Params_List = capnp.StructList[BytecodeCache_put_Params]

// NewBytecodeCache_put_Params creates a new list of BytecodeCache_put_Params.
func NewBytecodeCache_put_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Params](l), err
}

// BytecodeCache_put_Params_Future is a wrapper for a BytecodeCache_put_Params promised by a client call.
type BytecodeCache_put_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Params_Future) Struct() (BytecodeCache_put_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Params(p.Struct()), err
}

type BytecodeCache_put_Results capnp.Struct

// BytecodeCache_put_Results_TypeID is the unique identifier for the type BytecodeCache_put_Results.
const BytecodeCache_put_Results_TypeID = 0xf51e7dd3fc20b968

func NewBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func NewRootBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func ReadRootBytecodeCache_put_Results(msg *capnp.Message) (BytecodeCache_put_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Results(root.Struct()), err
}

func (s BytecodeCache_put_Results) String() string {
	str, _ := text.Marshal(0xf51e7dd3fc20b968, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Results {
	return BytecodeCache_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Results) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Results) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Results_List is a list of BytecodeCache_put_Results.
type BytecodeCache_put_Results_List = capnp.StructList[BytecodeCache_put_Results]

// NewBytecodeCache_put_Results creates a new list of BytecodeCache_put_Results.
func NewBytecodeCache_put_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Results](l), err
}

// BytecodeCache_put_Results_Future is a wrapper for a BytecodeCache_put_Results promised by a client call.
type BytecodeCache_put_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Results_Future) Struct() (BytecodeCache_put_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Results(p.Struct()), err
}

type BytecodeCache_get_Params capnp.Struct

// BytecodeCache_get_Params_TypeID is the unique identifier for the type BytecodeCache_get_Params.
const BytecodeCache_get_Params_TypeID = 0xf694129c75eba87c

func NewBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func NewRootBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func ReadRootBytecodeCache_get_Params(msg *capnp.Message) (BytecodeCache_get_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Params(root.Struct()), err
}

func (s BytecodeCache_get_Params) String() string {
	str, _ := text.Marshal(0xf694129c75eba87c, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Params {
	return BytecodeCache_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Params_List is a list of BytecodeCache_get_Params.
type BytecodeCache_get_Params_List = capnp.StructList[BytecodeCache_get_Params]

// NewBytecodeCache_get_Params creates a new list of BytecodeCache_get_Params.
func NewBytecodeCache_get_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Params](l), err
}

// BytecodeCache_get_Params_Future is a wrapper for a BytecodeCache_get_Params promised by a client call.
type BytecodeCache_get_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Params_Future) Struct() (BytecodeCache_get_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Params(p.Struct()), err
}

type BytecodeCache_get_Results capnp.Struct

// BytecodeCache_get_Results_TypeID is the unique identifier for the type BytecodeCache_get_Results.
const BytecodeCache_get_Results_TypeID = 0xb2c6f1c55b7403f4

func NewBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func NewRootBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func ReadRootBytecodeCache_get_Results(msg *capnp.Message) (BytecodeCache_get_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Results(root.Struct()), err
}

func (s BytecodeCache_get_Results) String() string {
	str, _ := text.Marshal(0xb2c6f1c55b7403f4, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Results {
	return BytecodeCache_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Results) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Results) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Results) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Results_List is a list of BytecodeCache_get_Results.
type BytecodeCache_get_Results_List = capnp.StructList[BytecodeCache_get_Results]

// NewBytecodeCache_get_Results creates a new list of BytecodeCache_get_Results.
func NewBytecodeCache_get_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Results](l), err
}

// BytecodeCache_get_Results_Future is a wrapper for a BytecodeCache_get_Results promised by a client call.
type BytecodeCache_get_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Results_Future) Struct() (BytecodeCache_get_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Results(p.Struct()), err
}

type BytecodeCache_has_Params capnp.Struct

// BytecodeCache_has_Params_TypeID is the unique identifier for the type BytecodeCache_has_Params.
const BytecodeCache_has_Params_TypeID = 0xc25a17a8499cfe55

func NewBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func NewRootBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func ReadRootBytecodeCache_has_Params(msg *capnp.Message) (BytecodeCache_has_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Params(root.Struct()), err
}

func (s BytecodeCache_has_Params) String() string {
	str, _ := text.Marshal(0xc25a17a8499cfe55, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Params {
	return BytecodeCache_has_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_has_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_has_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_has_Params_List is a list of BytecodeCache_has_Params.
type BytecodeCache_has_Params_List = capnp.StructList[BytecodeCache_has_Params]

// NewBytecodeCache_has_Params creates a new list of BytecodeCache_has_Params.
func NewBytecodeCache_has_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_has_Params](l), err
}

// BytecodeCache_has_Params_Future is a wrapper for a BytecodeCache_has_Params promised by a client call.
type BytecodeCache_has_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Params_Future) Struct() (BytecodeCache_has_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Params(p.Struct()), err
}

type BytecodeCache_has_Results capnp.Struct

// BytecodeCache_has_Results_TypeID is the unique identifier for the type BytecodeCache_has_Results.
const BytecodeCache_has_Results_TypeID = 0xf9602cd2c3f65e0f

func NewBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func NewRootBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func ReadRootBytecodeCache_has_Results(msg *capnp.Message) (BytecodeCache_has_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Results(root.Struct()), err
}

func (s BytecodeCache_has_Results) String() string {
	str, _ := text.Marshal(0xf9602cd2c3f65e0f, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Results {
	return BytecodeCache_has_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Results) Has() bool {
	return capnp.Struct(s).Bit(0)
}

func (s BytecodeCache_has_Results) SetHas(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// BytecodeCache_has_Results_List is a list of BytecodeCache_has_Results.
type BytecodeCache_has_Results_List = capnp.StructList[BytecodeCache_has_Results]

// NewBytecodeCache_has_Results creates a new list of BytecodeCache_has_Results.
func NewBytecodeCache_has_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BytecodeCache_has_Results](l), err
}

// BytecodeCache_has_Results_Future is a wrapper for a BytecodeCache_has_Results promised by a client call.
type BytecodeCache_has_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Results_Future) Struct() (BytecodeCache_has_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Results(p.Struct()), err
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release

}

func (c Process) Kill(ctx context.Context, params func(Process_kill_Params) error) (Process_kill_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_kill_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_kill_Results_Future{Future: ans.Future()}, release

}

func (c Process) Link(ctx context.Context, params func(Process_link_Params) error) (Process_link_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "link",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_link_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_link_Results_Future{Future: ans.Future()}, release

}

func (c Process) Unlink(ctx context.Context, params func(Process_unlink_Params) error) (Process_unlink_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      3,
			InterfaceName: "process.capnp:Process",
			MethodName:    "unlink",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_unlink_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_unlink_Results_Future{Future: ans.Future()}, release

}

func (c Process) LinkLocal(ctx context.Context, params func(Process_linkLocal_Params) error) (Process_linkLocal_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      4,
			InterfaceName: "process.capnp:Process",
			MethodName:    "linkLocal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_linkLocal_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_linkLocal_Results_Future{Future: ans.Future()}, release

}

func (c Process) UnlinkLocal(ctx context.Context, params func(Process_unlinkLocal_Params) error) (Process_unlinkLocal_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      5,
			InterfaceName: "process.capnp:Process",
			MethodName:    "unlinkLocal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_unlinkLocal_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_unlinkLocal_Results_Future{Future: ans.Future()}, release

}

func (c Process) Monitor(ctx context.Context, params func(Process_monitor_Params) error) (Process_monitor_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      6,
			InterfaceName: "process.capnp:Process",
			MethodName:    "monitor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_monitor_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_monitor_Results_Future{Future: ans.Future()}, release

}

func (c Process) Pause(ctx context.Context, params func(Process_pause_Params) error) (Process_pause_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      7,
			InterfaceName: "process.capnp:Process",
			MethodName:    "pause",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_pause_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_pause_Results_Future{Future: ans.Future()}, release

}

func (c Process) Resume(ctx context.Context, params func(Process_resume_Params) error) (Process_resume_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      8,
			InterfaceName: "process.capnp:Process",
			MethodName:    "resume",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_resume_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_resume_Results_Future{Future: ans.Future()}, release

}

func (c Process) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return "Process(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Wait(context.Context, Process_wait) error

	Kill(context.Context, Process_kill) error

	Link(context.Context, Process_link) error

	Unlink(context.Context, Process_unlink) error

	LinkLocal(context.Context, Process_linkLocal) error

	UnlinkLocal(context.Context, Process_unlinkLocal) error

	Monitor(context.Context, Process_monitor) error

	Pause(context.Context, Process_pause) error

	Resume(context.Context, Process_resume) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Kill(ctx, Process_kill{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "link",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Link(ctx, Process_link{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      3,
			InterfaceName: "process.capnp:Process",
			MethodName:    "unlink",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlink(ctx, Process_unlink{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      4,
			InterfaceName: "process.capnp:Process",
			MethodName:    "linkLocal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.LinkLocal(ctx, Process_linkLocal{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      5,
			InterfaceName: "process.capnp:Process",
			MethodName:    "unlinkLocal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.UnlinkLocal(ctx, Process_unlinkLocal{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      6,
			InterfaceName: "process.capnp:Process",
			MethodName:    "monitor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Monitor(ctx, Process_monitor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      7,
			InterfaceName: "process.capnp:Process",
			MethodName:    "pause",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pause(ctx, Process_pause{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      8,
			InterfaceName: "process.capnp:Process",
			MethodName:    "resume",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resume(ctx, Process_resume{call})
		},
	})

	return methods
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(r), err
}

// Process_kill holds the state for a server call to Process.kill.
// See server.Call for documentation.
type Process_kill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_kill) Args() Process_kill_Params {
	return Process_kill_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_kill) AllocResults() (Process_kill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(r), err
}

// Process_link holds the state for a server call to Process.link.
// See server.Call for documentation.
type Process_link struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_link) Args() Process_link_Params {
	return Process_link_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_link) AllocResults() (Process_link_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_link_Results(r), err
}

// Process_unlink holds the state for a server call to Process.unlink.
// See server.Call for documentation.
type Process_unlink struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_unlink) Args() Process_unlink_Params {
	return Process_unlink_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_unlink) AllocResults() (Process_unlink_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlink_Results(r), err
}

// Process_linkLocal holds the state for a server call to Process.linkLocal.
// See server.Call for documentation.
type Process_linkLocal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_linkLocal) Args() Process_linkLocal_Params {
	return Process_linkLocal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_linkLocal) AllocResults() (Process_linkLocal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_linkLocal_Results(r), err
}

// Process_unlinkLocal holds the state for a server call to Process.unlinkLocal.
// See server.Call for documentation.
type Process_unlinkLocal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_unlinkLocal) Args() Process_unlinkLocal_Params {
	return Process_unlinkLocal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_unlinkLocal) AllocResults() (Process_unlinkLocal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlinkLocal_Results(r), err
}

// Process_monitor holds the state for a server call to Process.monitor.
// See server.Call for documentation.
type Process_monitor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_monitor) Args() Process_monitor_Params {
	return Process_monitor_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_monitor) AllocResults() (Process_monitor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_monitor_Results(r), err
}

// Process_pause holds the state for a server call to Process.pause.
// See server.Call for documentation.
type Process_pause struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_pause) Args() Process_pause_Params {
	return Process_pause_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_pause) AllocResults() (Process_pause_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Results(r), err
}

// Process_resume holds the state for a server call to Process.resume.
// See server.Call for documentation.
type Process_resume struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_resume) Args() Process_resume_Params {
	return Process_resume_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_resume) AllocResults() (Process_resume_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_wait_Results) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}

type Process_kill_Params capnp.Struct

// Process_kill_Params_TypeID is the unique identifier for the type Process_kill_Params.
const Process_kill_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func NewRootProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func ReadRootProcess_kill_Params(msg *capnp.Message) (Process_kill_Params, error) {
	root, err := msg.Root()
	return Process_kill_Params(root.Struct()), err
}

func (s Process_kill_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_kill_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Params) DecodeFromPtr(p capnp.Ptr) Process_kill_Params {
	return Process_kill_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Params_List is a list of Process_kill_Params.
type Process_kill_Params_List = capnp.StructList[Process_kill_Params]

// NewProcess_kill_Params creates a new list of Process_kill_Params.
func NewProcess_kill_Params_List(s *capnp.Segment, sz int32) (Process_kill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Params](l), err
}

// Process_kill_Params_Future is a wrapper for a Process_kill_Params promised by a client call.
type Process_kill_Params_Future struct{ *capnp.Future }

func (f Process_kill_Params_Future) Struct() (Process_kill_Params, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Params(p.Struct()), err
}

type Process_kill_Results capnp.Struct

// Process_kill_Results_TypeID is the unique identifier for the type Process_kill_Results.
const Process_kill_Results_TypeID = 0xc53168b273d497ee

func NewProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func NewRootProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func ReadRootProcess_kill_Results(msg *capnp.Message) (Process_kill_Results, error) {
	root, err := msg.Root()
	return Process_kill_Results(root.Struct()), err
}

func (s Process_kill_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_kill_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Results) DecodeFromPtr(p capnp.Ptr) Process_kill_Results {
	return Process_kill_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Results_List is a list of Process_kill_Results.
type Process_kill_Results_List = capnp.StructList[Process_kill_Results]

// NewProcess_kill_Results creates a new list of Process_kill_Results.
func NewProcess_kill_Results_List(s *capnp.Segment, sz int32) (Process_kill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Results](l), err
}

// Process_kill_Results_Future is a wrapper for a Process_kill_Results promised by a client call.
type Process_kill_Results_Future struct{ *capnp.Future }

func (f Process_kill_Results_Future) Struct() (Process_kill_Results, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Results(p.Struct()), err
}

type Process_link_Params capnp.Struct

// Process_link_Params_TypeID is the unique identifier for the type Process_link_Params.
const Process_link_Params_TypeID = 0xd22f75df06c187e8

func NewProcess_link_Params(s *capnp.Segment) (Process_link_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Process_link_Params(st), err
}

func NewRootProcess_link_Params(s *capnp.Segment) (Process_link_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Process_link_Params(st), err
}

func ReadRootProcess_link_Params(msg *capnp.Message) (Process_link_Params, error) {
	root, err := msg.Root()
	return Process_link_Params(root.Struct()), err
}

func (s Process_link_Params) String() string {
	str, _ := text.Marshal(0xd22f75df06c187e8, capnp.Struct(s))
	return str
}

func (s Process_link_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_link_Params) DecodeFromPtr(p capnp.Ptr) Process_link_Params {
	return Process_link_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_link_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_link_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_link_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_link_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_link_Params) Other() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Process_link_Params) HasOther() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Process_link_Params) SetOther(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Process_link_Params) Roundtrip() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Process_link_Params) SetRoundtrip(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Process_link_Params_List is a list of Process_link_Params.
type Process_link_Params_List = capnp.StructList[Process_link_Params]

// NewProcess_link_Params creates a new list of Process_link_Params.
func NewProcess_link_Params_List(s *capnp.Segment, sz int32) (Process_link_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Process_link_Params](l), err
}

// Process_link_Params_Future is a wrapper for a Process_link_Params promised by a client call.
type Process_link_Params_Future struct{ *capnp.Future }

func (f Process_link_Params_Future) Struct() (Process_link_Params, error) {
	p, err := f.Future.Ptr()
	return Process_link_Params(p.Struct()), err
}
func (p Process_link_Params_Future) Other() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Process_link_Results capnp.Struct

// Process_link_Results_TypeID is the unique identifier for the type Process_link_Results.
const Process_link_Results_TypeID = 0x9d6074459fa0602b

func NewProcess_link_Results(s *capnp.Segment) (Process_link_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_link_Results(st), err
}

func NewRootProcess_link_Results(s *capnp.Segment) (Process_link_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_link_Results(st), err
}

func ReadRootProcess_link_Results(msg *capnp.Message) (Process_link_Results, error) {
	root, err := msg.Root()
	return Process_link_Results(root.Struct()), err
}

func (s Process_link_Results) String() string {
	str, _ := text.Marshal(0x9d6074459fa0602b, capnp.Struct(s))
	return str
}

func (s Process_link_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_link_Results) DecodeFromPtr(p capnp.Ptr) Process_link_Results {
	return Process_link_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_link_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_link_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_link_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_link_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_link_Results_List is a list of Process_link_Results.
type Process_link_Results_List = capnp.StructList[Process_link_Results]

// NewProcess_link_Results creates a new list of Process_link_Results.
func NewProcess_link_Results_List(s *capnp.Segment, sz int32) (Process_link_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_link_Results](l), err
}

// Process_link_Results_Future is a wrapper for a Process_link_Results promised by a client call.
type Process_link_Results_Future struct{ *capnp.Future }

func (f Process_link_Results_Future) Struct() (Process_link_Results, error) {
	p, err := f.Future.Ptr()
	return Process_link_Results(p.Struct()), err
}

type Process_unlink_Params capnp.Struct

// Process_unlink_Params_TypeID is the unique identifier for the type Process_unlink_Params.
const Process_unlink_Params_TypeID = 0x86e3410d1abd406b

func NewProcess_unlink_Params(s *capnp.Segment) (Process_unlink_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Process_unlink_Params(st), err
}

func NewRootProcess_unlink_Params(s *capnp.Segment) (Process_unlink_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Process_unlink_Params(st), err
}

func ReadRootProcess_unlink_Params(msg *capnp.Message) (Process_unlink_Params, error) {
	root, err := msg.Root()
	return Process_unlink_Params(root.Struct()), err
}

func (s Process_unlink_Params) String() string {
	str, _ := text.Marshal(0x86e3410d1abd406b, capnp.Struct(s))
	return str
}

func (s Process_unlink_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_unlink_Params) DecodeFromPtr(p capnp.Ptr) Process_unlink_Params {
	return Process_unlink_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_unlink_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_unlink_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_unlink_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_unlink_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_unlink_Params) Other() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Process_unlink_Params) HasOther() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Process_unlink_Params) SetOther(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Process_unlink_Params) Roundtrip() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Process_unlink_Params) SetRoundtrip(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Process_unlink_Params_List is a list of Process_unlink_Params.
type Process_unlink_Params_List = capnp.StructList[Process_unlink_Params]

// NewProcess_unlink_Params creates a new list of Process_unlink_Params.
func NewProcess_unlink_Params_List(s *capnp.Segment, sz int32) (Process_unlink_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Process_unlink_Params](l), err
}

// Process_unlink_Params_Future is a wrapper for a Process_unlink_Params promised by a client call.
type Process_unlink_Params_Future struct{ *capnp.Future }

func (f Process_unlink_Params_Future) Struct() (Process_unlink_Params, error) {
	p, err := f.Future.Ptr()
	return Process_unlink_Params(p.Struct()), err
}
func (p Process_unlink_Params_Future) Other() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Process_unlink_Results capnp.Struct

// Process_unlink_Results_TypeID is the unique identifier for the type Process_unlink_Results.
const Process_unlink_Results_TypeID = 0xd93c9aa0627bc93c

func NewProcess_unlink_Results(s *capnp.Segment) (Process_unlink_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlink_Results(st), err
}

func NewRootProcess_unlink_Results(s *capnp.Segment) (Process_unlink_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlink_Results(st), err
}

func ReadRootProcess_unlink_Results(msg *capnp.Message) (Process_unlink_Results, error) {
	root, err := msg.Root()
	return Process_unlink_Results(root.Struct()), err
}

func (s Process_unlink_Results) String() string {
	str, _ := text.Marshal(0xd93c9aa0627bc93c, capnp.Struct(s))
	return str
}

func (s Process_unlink_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_unlink_Results) DecodeFromPtr(p capnp.Ptr) Process_unlink_Results {
	return Process_unlink_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_unlink_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_unlink_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_unlink_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_unlink_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_unlink_Results_List is a list of Process_unlink_Results.
type Process_unlink_Results_List = capnp.StructList[Process_unlink_Results]

// NewProcess_unlink_Results creates a new list of Process_unlink_Results.
func NewProcess_unlink_Results_List(s *capnp.Segment, sz int32) (Process_unlink_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_unlink_Results](l), err
}

// Process_unlink_Results_Future is a wrapper for a Process_unlink_Results promised by a client call.
type Process_unlink_Results_Future struct{ *capnp.Future }

func (f Process_unlink_Results_Future) Struct() (Process_unlink_Results, error) {
	p, err := f.Future.Ptr()
	return Process_unlink_Results(p.Struct()), err
}

type Process_linkLocal_Params capnp.Struct

// Process_linkLocal_Params_TypeID is the unique identifier for the type Process_linkLocal_Params.
const Process_linkLocal_Params_TypeID = 0xb72541d950858a60

func NewProcess_linkLocal_Params(s *capnp.Segment) (Process_linkLocal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_linkLocal_Params(st), err
}

func NewRootProcess_linkLocal_Params(s *capnp.Segment) (Process_linkLocal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_linkLocal_Params(st), err
}

func ReadRootProcess_linkLocal_Params(msg *capnp.Message) (Process_linkLocal_Params, error) {
	root, err := msg.Root()
	return Process_linkLocal_Params(root.Struct()), err
}

func (s Process_linkLocal_Params) String() string {
	str, _ := text.Marshal(0xb72541d950858a60, capnp.Struct(s))
	return str
}

func (s Process_linkLocal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_linkLocal_Params) DecodeFromPtr(p capnp.Ptr) Process_linkLocal_Params {
	return Process_linkLocal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_linkLocal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_linkLocal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_linkLocal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_linkLocal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_linkLocal_Params) Other() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_linkLocal_Params) SetOther(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_linkLocal_Params_List is a list of Process_linkLocal_Params.
type Process_linkLocal_Params_List = capnp.StructList[Process_linkLocal_Params]

// NewProcess_linkLocal_Params creates a new list of Process_linkLocal_Params.
func NewProcess_linkLocal_Params_List(s *capnp.Segment, sz int32) (Process_linkLocal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_linkLocal_Params](l), err
}

// Process_linkLocal_Params_Future is a wrapper for a Process_linkLocal_Params promised by a client call.
type Process_linkLocal_Params_Future struct{ *capnp.Future }

func (f Process_linkLocal_Params_Future) Struct() (Process_linkLocal_Params, error) {
	p, err := f.Future.Ptr()
	return Process_linkLocal_Params(p.Struct()), err
}

type Process_linkLocal_Results capnp.Struct

// Process_linkLocal_Results_TypeID is the unique identifier for the type Process_linkLocal_Results.
const Process_linkLocal_Results_TypeID = 0xf589dc1668ea3d8f

func NewProcess_linkLocal_Results(s *capnp.Segment) (Process_linkLocal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_linkLocal_Results(st), err
}

func NewRootProcess_linkLocal_Results(s *capnp.Segment) (Process_linkLocal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_linkLocal_Results(st), err
}

func ReadRootProcess_linkLocal_Results(msg *capnp.Message) (Process_linkLocal_Results, error) {
	root, err := msg.Root()
	return Process_linkLocal_Results(root.Struct()), err
}

func (s Process_linkLocal_Results) String() string {
	str, _ := text.Marshal(0xf589dc1668ea3d8f, capnp.Struct(s))
	return str
}

func (s Process_linkLocal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_linkLocal_Results) DecodeFromPtr(p capnp.Ptr) Process_linkLocal_Results {
	return Process_linkLocal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_linkLocal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_linkLocal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_linkLocal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_linkLocal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_linkLocal_Results_List is a list of Process_linkLocal_Results.
type Process_linkLocal_Results_List = capnp.StructList[Process_linkLocal_Results]

// NewProcess_linkLocal_Results creates a new list of Process_linkLocal_Results.
func NewProcess_linkLocal_Results_List(s *capnp.Segment, sz int32) (Process_linkLocal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_linkLocal_Results](l), err
}

// Process_linkLocal_Results_Future is a wrapper for a Process_linkLocal_Results promised by a client call.
type Process_linkLocal_Results_Future struct{ *capnp.Future }

func (f Process_linkLocal_Results_Future) Struct() (Process_linkLocal_Results, error) {
	p, err := f.Future.Ptr()
	return Process_linkLocal_Results(p.Struct()), err
}

type Process_unlinkLocal_Params capnp.Struct

// Process_unlinkLocal_Params_TypeID is the unique identifier for the type Process_unlinkLocal_Params.
const Process_unlinkLocal_Params_TypeID = 0xf5c2d7ad2dde5570

func NewProcess_unlinkLocal_Params(s *capnp.Segment) (Process_unlinkLocal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_unlinkLocal_Params(st), err
}

func NewRootProcess_unlinkLocal_Params(s *capnp.Segment) (Process_unlinkLocal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_unlinkLocal_Params(st), err
}

func ReadRootProcess_unlinkLocal_Params(msg *capnp.Message) (Process_unlinkLocal_Params, error) {
	root, err := msg.Root()
	return Process_unlinkLocal_Params(root.Struct()), err
}

func (s Process_unlinkLocal_Params) String() string {
	str, _ := text.Marshal(0xf5c2d7ad2dde5570, capnp.Struct(s))
	return str
}

func (s Process_unlinkLocal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_unlinkLocal_Params) DecodeFromPtr(p capnp.Ptr) Process_unlinkLocal_Params {
	return Process_unlinkLocal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_unlinkLocal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_unlinkLocal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_unlinkLocal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_unlinkLocal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_unlinkLocal_Params) Other() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_unlinkLocal_Params) SetOther(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_unlinkLocal_Params_List is a list of Process_unlinkLocal_Params.
type Process_unlinkLocal_Params_List = capnp.StructList[Process_unlinkLocal_Params]

// NewProcess_unlinkLocal_Params creates a new list of Process_unlinkLocal_Params.
func NewProcess_unlinkLocal_Params_List(s *capnp.Segment, sz int32) (Process_unlinkLocal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_unlinkLocal_Params](l), err
}

// Process_unlinkLocal_Params_Future is a wrapper for a Process_unlinkLocal_Params promised by a client call.
type Process_unlinkLocal_Params_Future struct{ *capnp.Future }

func (f Process_unlinkLocal_Params_Future) Struct() (Process_unlinkLocal_Params, error) {
	p, err := f.Future.Ptr()
	return Process_unlinkLocal_Params(p.Struct()), err
}

type Process_unlinkLocal_Results capnp.Struct

// Process_unlinkLocal_Results_TypeID is the unique identifier for the type Process_unlinkLocal_Results.
const Process_unlinkLocal_Results_TypeID = 0xeafb60603769c851

func NewProcess_unlinkLocal_Results(s *capnp.Segment) (Process_unlinkLocal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlinkLocal_Results(st), err
}

func NewRootProcess_unlinkLocal_Results(s *capnp.Segment) (Process_unlinkLocal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlinkLocal_Results(st), err
}

func ReadRootProcess_unlinkLocal_Results(msg *capnp.Message) (Process_unlinkLocal_Results, error) {
	root, err := msg.Root()
	return Process_unlinkLocal_Results(root.Struct()), err
}

func (s Process_unlinkLocal_Results) String() string {
	str, _ := text.Marshal(0xeafb60603769c851, capnp.Struct(s))
	return str
}

func (s Process_unlinkLocal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_unlinkLocal_Results) DecodeFromPtr(p capnp.Ptr) Process_unlinkLocal_Results {
	return Process_unlinkLocal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_unlinkLocal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_unlinkLocal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_unlinkLocal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_unlinkLocal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_unlinkLocal_Results_List is a list of Process_unlinkLocal_Results.
type Process_unlinkLocal_Results_List = capnp.StructList[Process_unlinkLocal_Results]

// NewProcess_unlinkLocal_Results creates a new list of Process_unlinkLocal_Results.
func NewProcess_unlinkLocal_Results_List(s *capnp.Segment, sz int32) (Process_unlinkLocal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_unlinkLocal_Results](l), err
}

// Process_unlinkLocal_Results_Future is a wrapper for a Process_unlinkLocal_Results promised by a client call.
type Process_unlinkLocal_Results_Future struct{ *capnp.Future }

func (f Process_unlinkLocal_Results_Future) Struct() (Process_unlinkLocal_Results, error) {
	p, err := f.Future.Ptr()
	return Process_unlinkLocal_Results(p.Struct()), err
}

type Process_monitor_Params capnp.Struct

// Process_monitor_Params_TypeID is the unique identifier for the type Process_monitor_Params.
const Process_monitor_Params_TypeID = 0xc7e357fd7b4cb277

func NewProcess_monitor_Params(s *capnp.Segment) (Process_monitor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_monitor_Params(st), err
}

func NewRootProcess_monitor_Params(s *capnp.Segment) (Process_monitor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_monitor_Params(st), err
}

func ReadRootProcess_monitor_Params(msg *capnp.Message) (Process_monitor_Params, error) {
	root, err := msg.Root()
	return Process_monitor_Params(root.Struct()), err
}

func (s Process_monitor_Params) String() string {
	str, _ := text.Marshal(0xc7e357fd7b4cb277, capnp.Struct(s))
	return str
}

func (s Process_monitor_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_monitor_Params) DecodeFromPtr(p capnp.Ptr) Process_monitor_Params {
	return Process_monitor_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_monitor_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_monitor_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_monitor_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_monitor_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_monitor_Params_List is a list of Process_monitor_Params.
type Process_monitor_Params_List = capnp.StructList[Process_monitor_Params]

// NewProcess_monitor_Params creates a new list of Process_monitor_Params.
func NewProcess_monitor_Params_List(s *capnp.Segment, sz int32) (Process_monitor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_monitor_Params](l), err
}

// Process_monitor_Params_Future is a wrapper for a Process_monitor_Params promised by a client call.
type Process_monitor_Params_Future struct{ *capnp.Future }

func (f Process_monitor_Params_Future) Struct() (Process_monitor_Params, error) {
	p, err := f.Future.Ptr()
	return Process_monitor_Params(p.Struct()), err
}

type Process_monitor_Results capnp.Struct

// Process_monitor_Results_TypeID is the unique identifier for the type Process_monitor_Results.
const Process_monitor_Results_TypeID = 0xbb9ef870419ecb71

func NewProcess_monitor_Results(s *capnp.Segment) (Process_monitor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_monitor_Results(st), err
}

func NewRootProcess_monitor_Results(s *capnp.Segment) (Process_monitor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_monitor_Results(st), err
}

func ReadRootProcess_monitor_Results(msg *capnp.Message) (Process_monitor_Results, error) {
	root, err := msg.Root()
	return Process_monitor_Results(root.Struct()), err
}

func (s Process_monitor_Results) String() string {
	str, _ := text.Marshal(0xbb9ef870419ecb71, capnp.Struct(s))
	return str
}

func (s Process_monitor_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_monitor_Results) DecodeFromPtr(p capnp.Ptr) Process_monitor_Results {
	return Process_monitor_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_monitor_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_monitor_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_monitor_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_monitor_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_monitor_Results) Event() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Process_monitor_Results) HasEvent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Process_monitor_Results) EventBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Process_monitor_Results) SetEvent(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Process_monitor_Results_List is a list of Process_monitor_Results.
type Process_monitor_Results_List = capnp.StructList[Process_monitor_Results]

// NewProcess_monitor_Results creates a new list of Process_monitor_Results.
func NewProcess_monitor_Results_List(s *capnp.Segment, sz int32) (Process_monitor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Process_monitor_Results](l), err
}

// Process_monitor_Results_Future is a wrapper for a Process_monitor_Results promised by a client call.
type Process_monitor_Results_Future struct{ *capnp.Future }

func (f Process_monitor_Results_Future) Struct() (Process_monitor_Results, error) {
	p, err := f.Future.Ptr()
	return Process_monitor_Results(p.Struct()), err
}

type Process_pause_Params capnp.Struct

// Process_pause_Params_TypeID is the unique identifier for the type Process_pause_Params.
const Process_pause_Params_TypeID = 0xe49628d0fca1d961

func NewProcess_pause_Params(s *capnp.Segment) (Process_pause_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Params(st), err
}

func NewRootProcess_pause_Params(s *capnp.Segment) (Process_pause_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Params(st), err
}

func ReadRootProcess_pause_Params(msg *capnp.Message) (Process_pause_Params, error) {
	root, err := msg.Root()
	return Process_pause_Params(root.Struct()), err
}

func (s Process_pause_Params) String() string {
	str, _ := text.Marshal(0xe49628d0fca1d961, capnp.Struct(s))
	return str
}

func (s Process_pause_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_pause_Params) DecodeFromPtr(p capnp.Ptr) Process_pause_Params {
	return Process_pause_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_pause_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_pause_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_pause_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_pause_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_pause_Params_List is a list of Process_pause_Params.
type Process_pause_Params_List = capnp.StructList[Process_pause_Params]

// NewProcess_pause_Params creates a new list of Process_pause_Params.
func NewProcess_pause_Params_List(s *capnp.Segment, sz int32) (Process_pause_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_pause_Params](l), err
}

// Process_pause_Params_Future is a wrapper for a Process_pause_Params promised by a client call.
type Process_pause_Params_Future struct{ *capnp.Future }

func (f Process_pause_Params_Future) Struct() (Process_pause_Params, error) {
	p, err := f.Future.Ptr()
	return Process_pause_Params(p.Struct()), err
}

type Process_pause_Results capnp.Struct

// Process_pause_Results_TypeID is the unique identifier for the type Process_pause_Results.
const Process_pause_Results_TypeID = 0xc09f176286f9e884

func NewProcess_pause_Results(s *capnp.Segment) (Process_pause_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Results(st), err
}

func NewRootProcess_pause_Results(s *capnp.Segment) (Process_pause_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Results(st), err
}

func ReadRootProcess_pause_Results(msg *capnp.Message) (Process_pause_Results, error) {
	root, err := msg.Root()
	return Process_pause_Results(root.Struct()), err
}

func (s Process_pause_Results) String() string {
	str, _ := text.Marshal(0xc09f176286f9e884, capnp.Struct(s))
	return str
}

func (s Process_pause_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_pause_Results) DecodeFromPtr(p capnp.Ptr) Process_pause_Results {
	return Process_pause_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_pause_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_pause_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_pause_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_pause_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_pause_Results_List is a list of Process_pause_Results.
type Process_pause_Results_List = capnp.StructList[Process_pause_Results]

// NewProcess_pause_Results creates a new list of Process_pause_Results.
func NewProcess_pause_Results_List(s *capnp.Segment, sz int32) (Process_pause_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_pause_Results](l), err
}

// Process_pause_Results_Future is a wrapper for a Process_pause_Results promised by a client call.
type Process_pause_Results_Future struct{ *capnp.Future }

func (f Process_pause_Results_Future) Struct() (Process_pause_Results, error) {
	p, err := f.Future.Ptr()
	return Process_pause_Results(p.Struct()), err
}

type Process_resume_Params capnp.Struct

// Process_resume_Params_TypeID is the unique identifier for the type Process_resume_Params.
const Process_resume_Params_TypeID = 0xffd9ede88fe29780

func NewProcess_resume_Params(s *capnp.Segment) (Process_resume_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Params(st), err
}

func NewRootProcess_resume_Params(s *capnp.Segment) (Process_resume_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Params(st), err
}

func ReadRootProcess_resume_Params(msg *capnp.Message) (Process_resume_Params, error) {
	root, err := msg.Root()
	return Process_resume_Params(root.Struct()), err
}

func (s Process_resume_Params) String() string {
	str, _ := text.Marshal(0xffd9ede88fe29780, capnp.Struct(s))
	return str
}

func (s Process_resume_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_resume_Params) DecodeFromPtr(p capnp.Ptr) Process_resume_Params {
	return Process_resume_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_resume_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_resume_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_resume_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_resume_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_resume_Params_List is a list of Process_resume_Params.
type Process_resume_Params_List = capnp.StructList[Process_resume_Params]

// NewProcess_resume_Params creates a new list of Process_resume_Params.
func NewProcess_resume_Params_List(s *capnp.Segment, sz int32) (Process_resume_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_resume_Params](l), err
}

// Process_resume_Params_Future is a wrapper for a Process_resume_Params promised by a client call.
type Process_resume_Params_Future struct{ *capnp.Future }

func (f Process_resume_Params_Future) Struct() (Process_resume_Params, error) {
	p, err := f.Future.Ptr()
	return Process_resume_Params(p.Struct()), err
}

type Process_resume_Results capnp.Struct

// Process_resume_Results_TypeID is the unique identifier for the type Process_resume_Results.
const Process_resume_Results_TypeID = 0xa57c12075589e51f

func NewProcess_resume_Results(s *capnp.Segment) (Process_resume_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Results(st), err
}

func NewRootProcess_resume_Results(s *capnp.Segment) (Process_resume_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Results(st), err
}

func ReadRootProcess_resume_Results(msg *capnp.Message) (Process_resume_Results, error) {
	root, err := msg.Root()
	return Process_resume_Results(root.Struct()), err
}

func (s Process_resume_Results) String() string {
	str, _ := text.Marshal(0xa57c12075589e51f, capnp.Struct(s))
	return str
}

func (s Process_resume_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_resume_Results) DecodeFromPtr(p capnp.Ptr) Process_resume_Results {
	return Process_resume_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_resume_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_resume_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_resume_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_resume_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_resume_Results_List is a list of Process_resume_Results.
type Process_resume_Results_List = capnp.StructList[Process_resume_Results]

// NewProcess_resume_Results creates a new list of Process_resume_Results.
func NewProcess_resume_Results_List(s *capnp.Segment, sz int32) (Process_resume_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_resume_Results](l), err
}

// Process_resume_Results_Future is a wrapper for a Process_resume_Results promised by a client call.
type Process_resume_Results_Future struct{ *capnp.Future }

func (f Process_resume_Results_Future) Struct() (Process_resume_Results, error) {
	p, err := f.Future.Ptr()
	return Process_resume_Results(p.Struct()), err
}

type Info capnp.Struct

// Info_TypeID is the unique identifier for the type Info.
const Info_TypeID = 0xc3153fa5a13d8a26

func NewInfo(s *capnp.Segment) (Info, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Info(st), err
}

func NewRootInfo(s *capnp.Segment) (Info, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Info(st), err
}

func ReadRootInfo(msg *capnp.Message) (Info, error) {
	root, err := msg.Root()
	return Info(root.Struct()), err
}

func (s Info) String() string {
	str, _ := text.Marshal(0xc3153fa5a13d8a26, capnp.Struct(s))
	return str
}

func (s Info) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Info) DecodeFromPtr(p capnp.Ptr) Info {
	return Info(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Info) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Info) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Info) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Info) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Info) Pid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Info) SetPid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Info) Ppid() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Info) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Info) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Info) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Info) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Info) Argv() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Info) HasArgv() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Info) SetArgv(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewArgv sets the argv field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Info) NewArgv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Info) Time() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Info) SetTime(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// Info_List is a list of Info.
type Info_List = capnp.StructList[Info]

// NewInfo creates a new list of Info.
func NewInfo_List(s *capnp.Segment, sz int32) (Info_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Info](l), err
}

// Info_Future is a wrapper for a Info promised by a client call.
type Info_Future struct{ *capnp.Future }

func (f Info_Future) Struct() (Info, error) {
	p, err := f.Future.Ptr()
	return Info(p.Struct()), err
}

type Events capnp.Client

// Events_TypeID is the unique identifier for the type Events.
const Events_TypeID = 0xe9b5ea42655a6266

func (c Events) Pause(ctx context.Context, params func(Events_pause_Params) error) (Events_pause_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      0,
			InterfaceName: "process.capnp:Events",
			MethodName:    "pause",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Events_pause_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Events_pause_Results_Future{Future: ans.Future()}, release

}

func (c Events) Resume(ctx context.Context, params func(Events_resume_Params) error) (Events_resume_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      1,
			InterfaceName: "process.capnp:Events",
			MethodName:    "resume",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Events_resume_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Events_resume_Results_Future{Future: ans.Future()}, release

}

func (c Events) Stop(ctx context.Context, params func(Events_stop_Params) error) (Events_stop_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      2,
			InterfaceName: "process.capnp:Events",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Events_stop_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Events_stop_Results_Future{Future: ans.Future()}, release

}

func (c Events) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Events) String() string {
	return "Events(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Events) AddRef() Events {
	return Events(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Events) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Events) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Events) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Events) DecodeFromPtr(p capnp.Ptr) Events {
	return Events(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Events) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Events) IsSame(other Events) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Events) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Events) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Events_Server is a Events with a local implementation.
type Events_Server interface {
	Pause(context.Context, Events_pause) error

	Resume(context.Context, Events_resume) error

	Stop(context.Context, Events_stop) error
}

// Events_NewServer creates a new Server from an implementation of Events_Server.
func Events_NewServer(s Events_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Events_Methods(nil, s), s, c)
}

// Events_ServerToClient creates a new Client from an implementation of Events_Server.
// The caller is responsible for calling Release on the returned Client.
func Events_ServerToClient(s Events_Server) Events {
	return Events(capnp.NewClient(Events_NewServer(s)))
}

// Events_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Events_Methods(methods []server.Method, s Events_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      0,
			InterfaceName: "process.capnp:Events",
			MethodName:    "pause",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pause(ctx, Events_pause{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      1,
			InterfaceName: "process.capnp:Events",
			MethodName:    "resume",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resume(ctx, Events_resume{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      2,
			InterfaceName: "process.capnp:Events",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Events_stop{call})
		},
	})

	return methods
}

// Events_pause holds the state for a server call to Events.pause.
// See server.Call for documentation.
type Events_pause struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Events_pause) Args() Events_pause_Params {
	return Events_pause_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Events_pause) AllocResults() (Events_pause_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Results(r), err
}

// Events_resume holds the state for a server call to Events.resume.
// See server.Call for documentation.
type Events_resume struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Events_resume) Args() Events_resume_Params {
	return Events_resume_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Events_resume) AllocResults() (Events_resume_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Results(r), err
}

// Events_stop holds the state for a server call to Events.stop.
// See server.Call for documentation.
type Events_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Events_stop) Args() Events_stop_Params {
	return Events_stop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Events_stop) AllocResults() (Events_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_stop_Results(r), err
}

// Events_List is a list of Events.
type Events_List = capnp.CapList[Events]

// NewEvents creates a new list of Events.
func NewEvents_List(s *capnp.Segment, sz int32) (Events_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Events](l), err
}

type Events_pause_Params capnp.Struct

// Events_pause_Params_TypeID is the unique identifier for the type Events_pause_Params.
const Events_pause_Params_TypeID = 0xa62fe22feb63d82e

func NewEvents_pause_Params(s *capnp.Segment) (Events_pause_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Params(st), err
}

func NewRootEvents_pause_Params(s *capnp.Segment) (Events_pause_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Params(st), err
}

func ReadRootEvents_pause_Params(msg *capnp.Message) (Events_pause_Params, error) {
	root, err := msg.Root()
	return Events_pause_Params(root.Struct()), err
}

func (s Events_pause_Params) String() string {
	str, _ := text.Marshal(0xa62fe22feb63d82e, capnp.Struct(s))
	return str
}

func (s Events_pause_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_pause_Params) DecodeFromPtr(p capnp.Ptr) Events_pause_Params {
	return Events_pause_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_pause_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_pause_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_pause_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_pause_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_pause_Params_List is a list of Events_pause_Params.
type Events_pause_Params_List = capnp.StructList[Events_pause_Params]

// NewEvents_pause_Params creates a new list of Events_pause_Params.
func NewEvents_pause_Params_List(s *capnp.Segment, sz int32) (Events_pause_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_pause_Params](l), err
}

// Events_pause_Params_Future is a wrapper for a Events_pause_Params promised by a client call.
type Events_pause_Params_Future struct{ *capnp.Future }

func (f Events_pause_Params_Future) Struct() (Events_pause_Params, error) {
	p, err := f.Future.Ptr()
	return Events_pause_Params(p.Struct()), err
}

type Events_pause_Results capnp.Struct

// Events_pause_Results_TypeID is the unique identifier for the type Events_pause_Results.
const Events_pause_Results_TypeID = 0x82f79d7adbdcdd6f

func NewEvents_pause_Results(s *capnp.Segment) (Events_pause_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Results(st), err
}

func NewRootEvents_pause_Results(s *capnp.Segment) (Events_pause_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Results(st), err
}

func ReadRootEvents_pause_Results(msg *capnp.Message) (Events_pause_Results, error) {
	root, err := msg.Root()
	return Events_pause_Results(root.Struct()), err
}

func (s Events_pause_Results) String() string {
	str, _ := text.Marshal(0x82f79d7adbdcdd6f, capnp.Struct(s))
	return str
}

func (s Events_pause_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_pause_Results) DecodeFromPtr(p capnp.Ptr) Events_pause_Results {
	return Events_pause_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_pause_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_pause_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_pause_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_pause_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_pause_Results_List is a list of Events_pause_Results.
type Events_pause_Results_List = capnp.StructList[Events_pause_Results]

// NewEvents_pause_Results creates a new list of Events_pause_Results.
func NewEvents_pause_Results_List(s *capnp.Segment, sz int32) (Events_pause_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_pause_Results](l), err
}

// Events_pause_Results_Future is a wrapper for a Events_pause_Results promised by a client call.
type Events_pause_Results_Future struct{ *capnp.Future }

func (f Events_pause_Results_Future) Struct() (Events_pause_Results, error) {
	p, err := f.Future.Ptr()
	return Events_pause_Results(p.Struct()), err
}

type Events_resume_Params capnp.Struct

// Events_resume_Params_TypeID is the unique identifier for the type Events_resume_Params.
const Events_resume_Params_TypeID = 0xb8521a0e0dcb52d8

func NewEvents_resume_Params(s *capnp.Segment) (Events_resume_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Params(st), err
}

func NewRootEvents_resume_Params(s *capnp.Segment) (Events_resume_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Params(st), err
}

func ReadRootEvents_resume_Params(msg *capnp.Message) (Events_resume_Params, error) {
	root, err := msg.Root()
	return Events_resume_Params(root.Struct()), err
}

func (s Events_resume_Params) String() string {
	str, _ := text.Marshal(0xb8521a0e0dcb52d8, capnp.Struct(s))
	return str
}

func (s Events_resume_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_resume_Params) DecodeFromPtr(p capnp.Ptr) Events_resume_Params {
	return Events_resume_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_resume_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_resume_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_resume_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_resume_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_resume_Params_List is a list of Events_resume_Params.
type Events_resume_Params_List = capnp.StructList[Events_resume_Params]

// NewEvents_resume_Params creates a new list of Events_resume_Params.
func NewEvents_resume_Params_List(s *capnp.Segment, sz int32) (Events_resume_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_resume_Params](l), err
}

// Events_resume_Params_Future is a wrapper for a Events_resume_Params promised by a client call.
type Events_resume_Params_Future struct{ *capnp.Future }

func (f Events_resume_Params_Future) Struct() (Events_resume_Params, error) {
	p, err := f.Future.Ptr()
	return Events_resume_Params(p.Struct()), err
}

type Events_resume_Results capnp.Struct

// Events_resume_Results_TypeID is the unique identifier for the type Events_resume_Results.
const Events_resume_Results_TypeID = 0xe990db10c77bbcb7

func NewEvents_resume_Results(s *capnp.Segment) (Events_resume_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Results(st), err
}

func NewRootEvents_resume_Results(s *capnp.Segment) (Events_resume_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Results(st), err
}

func ReadRootEvents_resume_Results(msg *capnp.Message) (Events_resume_Results, error) {
	root, err := msg.Root()
	return Events_resume_Results(root.Struct()), err
}

func (s Events_resume_Results) String() string {
	str, _ := text.Marshal(0xe990db10c77bbcb7, capnp.Struct(s))
	return str
}

func (s Events_resume_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_resume_Results) DecodeFromPtr(p capnp.Ptr) Events_resume_Results {
	return Events_resume_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_resume_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_resume_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_resume_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_resume_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_resume_Results_List is a list of Events_resume_Results.
type Events_resume_Results_List = capnp.StructList[Events_resume_Results]

// NewEvents_resume_Results creates a new list of Events_resume_Results.
func NewEvents_resume_Results_List(s *capnp.Segment, sz int32) (Events_resume_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_resume_Results](l), err
}

// Events_resume_Results_Future is a wrapper for a Events_resume_Results promised by a client call.
type Events_resume_Results_Future struct{ *capnp.Future }

func (f Events_resume_Results_Future) Struct() (Events_resume_Results, error) {
	p, err := f.Future.Ptr()
	return Events_resume_Results(p.Struct()), err
}

type Events_stop_Params capnp.Struct

// Events_stop_Params_TypeID is the unique identifier for the type Events_stop_Params.
const Events_stop_Params_TypeID = 0xfa45ca5ec6290c9f

func NewEvents_stop_Params(s *capnp.Segment) (Events_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_stop_Params(st), err
}

func NewRootEvents_stop_Params(s *capnp.Segment) (Events_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_stop_Params(st), err
}

func ReadRootEvents_stop_Params(msg *capnp.Message) (Events_stop_Params, error) {
	root, err := msg.Root()
	return Events_stop_Params(root.Struct()), err
}

func (s Events_stop_Params) String() string {
	str, _ := text.Marshal(0xfa45ca5ec6290c9f, capnp.Struct(s))
	return str
}

func (s Events_stop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_stop_Params) DecodeFromPtr(p capnp.Ptr) Events_stop_Params {
	return Events_stop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_stop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_stop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_stop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_stop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_stop_Params_List is a list of Events_stop_Params.
type Events_stop_Params_List = capnp.StructList[Events_stop_Params]

// NewEvents_stop_Params creates a new list of Events_stop_Params.
func NewEvents_stop_Params_List(s *capnp.Segment, sz int32) (Events_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_stop_Params](l), err
}

// Events_stop_Params_Future is a wrapper for a Events_stop_Params promised by a client call.
type Events_stop_Params_Future struct{ *capnp.Future }

func (f Events_stop_Params_Future) Struct() (Events_stop_Params, error) {
	p, err := f.Future.Ptr()
	return Events_stop_Params(p.Struct()), err
}

type Events_stop_Results capnp.Struct

// Events_stop_Results_TypeID is the unique identifier for the type Events_stop_Results.
const Events_stop_Results_TypeID = 0xa66966629ce6e8e9

func NewEvents_stop_Results(s *capnp.Segment) (Events_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_stop_Results(st), err
}

func NewRootEvents_stop_Results(s *capnp.Segment) (Events_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_stop_Results(st), err
}

func ReadRootEvents_stop_Results(msg *capnp.Message) (Events_stop_Results, error) {
	root, err := msg.Root()
	return Events_stop_Results(root.Struct()), err
}

func (s Events_stop_Results) String() string {
	str, _ := text.Marshal(0xa66966629ce6e8e9, capnp.Struct(s))
	return str
}

func (s Events_stop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_stop_Results) DecodeFromPtr(p capnp.Ptr) Events_stop_Results {
	return Events_stop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_stop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_stop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_stop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_stop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_stop_Results_List is a list of Events_stop_Results.
type Events_stop_Results_List = capnp.StructList[Events_stop_Results]

// NewEvents_stop_Results creates a new list of Events_stop_Results.
func NewEvents_stop_Results_List(s *capnp.Segment, sz int32) (Events_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_stop_Results](l), err
}

// Events_stop_Results_Future is a wrapper for a Events_stop_Results promised by a client call.
type Events_stop_Results_Future struct{ *capnp.Future }

func (f Events_stop_Results_Future) Struct() (Events_stop_Results, error) {
	p, err := f.Future.Ptr()
	return Events_stop_Results(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda\xbcV\x7fl\x14\xd5\x16>gfvgw\xd3" +
	"\xed\xbe\xdb)\xf0\x1e\xe1\xbd>\xfa\xca{\x8f>hK" +
	"\xc9\x8b\xd2\x80]J\x1a\x02)\xc9N\x93\xc6\x80\x81t" +
	"\xba\x1d\xd8\x0d\xdb\xeevw\x96\x82@\x04\x03h\x89\x06" +
	"MD\x90P(\x89(\x185RE$Zc!P" +
	"+1Q\x90@\x055\x94\x1f)\x10\x88$\x16\xad\x82" +
	"c\xee\xcc\xde\xe9\xb4\xbbk\x091\xfe\xb3\xc9\xec\xf9q" +
	"\xbf\xf3\x9ds\xefw\xca\x0a\x05\xbf0\xc3;\xc1\x0b\x9c" +
	"\xbc\xd3\xe1\xd4\xa3\xdf\\\xbc\xf0d\xfb\x8fO\x03\x19\x87" +
	"\x00\x82\x080\xb3\xc59\x11A\xd0W\xfa\xbb&z\xe7" +
	"^\xde\x02\xf2xD\x00\x07R\xdbbg!\x02J\x8a" +
	"\xb3\x15P\xff\xf8\xb1\x92b_\xde\xfb/\x02\x99d9" +
	"t;+\xa8C\xaf\xb3\x12P\xff_}\xc7\xdej\xad" +
	"\xbe\x1d\xc8x\x96\xfc\x96\x99\xbc\xe0j[\x9d\x98\xb7n" +
	"\xbf\xcdr\xd6YL-%\xe7\x837K\xfbK_\xb3" +
	"\x01\xear\xe6Q\xcb\xf5\x81k\xbb\x1b\x96\x87\xed\x96\xfd" +
	"\xa6\xe5\x07^{\xe2\xc4\x9d\x93\x9dv \xcf;\xab(" +
	"\x90\xed\x06\x90\xfa\xad\x9b\x03}s\xa7\x1cI\xd5b\xc4" +
	"\x1e5\x91v\x1b\x0e\xe7kOys'\xd6~`\xcb" +
	"}\xc9D\xdarj\xcf\xdc\xd8O{>4\x91\x9a\xb9" +
	"{\x9d\xe54\xf4K#t\xd3\xc0\xd0\x96\x86\x09{?" +
	"\xb1\x95r\x87\xb2$\xe8u\xbf\xee^p`\xc2\x92c" +
	"vX}\xe6\xa9\x97\x8c\xd0\x7fo\x9d\xb3o\x7f\xe5\xb8" +
	"\xe3 \xe7\"\xa7\x07[\xff\xd3:\xe3\xaa\xbc\x0b\x1c\x9c" +
	"\x08 \xa1\xb8Kr\x8b4\xc6!\x16 \xa0~{\xc7" +
	"W\x89\xce\xd0\x8c\x13\xb6\x83\xa6\xb8\x0c\x8c\xad\x9d5k" +
	"\xef?~\xb9\xc7f\xf1\xba\x0c6\x07\x9e\xe9v~\x97" +
	",==\xa2\x89\x83b\x1e\xc5p_\xa4M|s~" +
	"YQ\xc7{\xc5\xe7\xec\xd4,\xa5iQR]\x14\xe4" +
	"\xec\xde\xb5\x0d\x1d\xbbf\xf7\xd9\x92\xb7\x99\xc9g:\xa7" +
	"\x1c8\xf3\xfd\xbf\xbe\x06\x92\xcb\x0f\xa3\x07\x94Z\\\x9d" +
	"\xd2\x1a\x17\xf5L\xba\xe6s\xd2U\xb7\x08\xa0+}\xfb" +
	"\xee}\xf1\xdf\x97\xaf\xd8\xf2|\xee6\xe0k\xe8\xbe\xcb" +
	"_\xa9\xb9\x96\x96\xe7\xb0\xbb_\xea\xa6\xc1R\x97\xbbG" +
	"\xfa\xbf\x87\xa69\xf2\xd1\xda\x9e\xbf\\x\xe1\xba\xadS" +
	"\x7f\xf7\x18t/oX\xa2V\xdd8|=-\x8d\xc3" +
	"\xf3\x86\xe4\xa5\xc1\x92\xdb\xd3#m4\xd2\xc8\x9f\x86\x1f" +
	"\xa9\xaf\xff\xe5\x86\x0dM\xd8SK\xd3\xcc_Z\xfa\xce" +
	"\xdf\xde~\xfd\xb6\xcdR\xe71\xc6,t\xf4\x9f\xf7\xce" +
	"\xac\xff\xc7\xa0\xbd\x9fs<\xc6\x98U{(U\xdb\xe6" +
	"\xdc\x08\x8d\xbf\xd86h\x0bU\xa9]\xd0cu\xdfN" +
	"\x7f\xeb\xdc\xb1A;\xcb\x8b<\x0bi\xe8b#t\xdd" +
	"\x81\x9b\xc9\xddy/\xdd\xb5\xe7^\xe31fe\xa3\xe1" +
	"\xe0[v\xf7\xf8\xe9i\xf5C O\xb22\xec3\x0f" +
	"?h8\\~\xf7\x82\xab\x7fax\xc8vx\xaf\x89" +
	"{o\xce\xd4\x93\xcb>\xab\xfe\xd9F\xd9!\x8f\x87Z" +
	"6\xec\xe8\xdf6p\xabO\xb7\xc5\xbcB\xc9,\xd3c" +
	"\xf1hPM$J\xf8\xa0\x12k\x8eUT\xafR\x9b" +
	"\xb5DILI&\xd4\xa2Z5\x91\x8c\xf0Zb\xb4" +
	"S \xf5\x99l\x8e\x84\x9bW\x16\x05\x94\xb8\xa84%" +
	"d\x17/\x00\x08\x08@\xa6\x96\x03\xc8E<\xcae\x1c" +
	"\"\xe6\xd3:\xc8\xf4Z\x00y\x1a\x8f\xf2\xa3\x1c\x16D" +
	"\xb5\x90\x1aG2<Y\x80H\x00\xf5x4\xd9\xdc\xa8" +
	"\xc5\xc3\x801D\xe0\x90^\x87Q\x87W\xad\xd1\xd4`" +
	"\xb4Q\x9d\xa7\x04CjI,\xa9\x15U\x06\x948=" +
	"_\xb0\xce\xf7.\x04\x90sx\x94\xff\xca\xa1\xde\x90\x0a" +
	"\x00\x00\xf4\x02\x87\xde\xf4\x9c\xac \xa3\x9c\xb1\xaa\x8e\xab" +
	"\x89d\x93A\x8e/\x19Iw\x1b\xc1\xa0\x81\x0c\xb3\xf9" +
	"$\xb4h\xcc<N\xb3\xf9\x08\x99\xea\\\xa1j)\xcf" +
	"\x04\xfcA\x85\xd6D\x83J$\x13y\xb4y.\x1e\xe5" +
	"|\xabQ.\xe0\xd0\x95\x9e-UF\x8a\x10\x9a\x88o" +
	"\xcaJ[S\xb49\xacE\xe3E\xb5j\x81QF\xb6" +
	"\x13U\x9a\x14s\x80\xc3\x9c\xec\xf8\x87\xe7S\xcc\xd0\x82" +
	"\x91\xd4\x85\x94D\xa6*\x0b\x87\xcf\x14\x83\xe1\xc64\xc6" +
	"\xd0\xcc\xb5\xa0\x99_\x1e\x0d \xca\xf9V\xe8z\x1a\xba" +
	"\x9aGy\x13\x87\x84\x8d\xf7\xc6b\x00y\x1d\x8f\xf2\xb3" +
	"\x1c\"\x97\x8f\x1c\x00\xd9L\x1d7\xf0(?\xc7!\xe1" +
	"1\x1fy\x00\xd2F\x1d7\xf1(wpH\x04\xccG" +
	"\x01\x80\xb4\xd3?w\xf2(\xbf\xca\xa1\x18\x0b72\xc6" +
	"}1\xdb\x87\x1d\xa6O\x89\xafX\x85\xb9\x80\x01\x1e\x0d" +
	"\xb2r\x01}Z\xb8IE\x07p\xe8\xc8\xce\xdc\xcap" +
	"$2\xe6\x88\xb3^\x05\x14\x1f\xa5\xedw\xafKj\xc4" +
	"\xff\xa4\xdb\xcf\x8enU\xc2\x9aUF\xb6\x0b\xa1\xae\x0e" +
	"k\xf3R\x17\"\xcb\x08\x8fz\xca\xd2.52\xb7\x02" +
	"\xe3\x9b\x0eB\x11\xef\x00\xb0^ad\xba*\x11,\x06" +
	"Nr\xa0\x88hi\x0b2-'C\xc5\xc0\x91[\"" +
	"r\x96T#\xdb\x9a\xc8%j;+\"o\xedb\xc8" +
	"\xc4\x98\xf4V\x00G\xbaD\x14\xac\xdd\x06\x99\xfa\x90C" +
	"\xb5\xc0\x91\x83\":,\xd9A&w\xa4\xbd\x018\xb2" +
	"]D\xa7\xb54 \xdbpH[\x15pd\xbd\x88\xa2" +
	"\xa5\xd5\xc8\x96\x1b\xd2R\x0e\x1cQEtY\x9a\x81l" +
	"\x87#\x8b)\x96E\xa2\x8f\x92\xefG\x1f\x1d%?\xfa" +
	"(q~\xac4\x19\xf4\xa3\xce\xde\x16\xc0\x88\x1fu\xf3" +
	"\xef\x9a(\x88A%\xe2\xc7\xa7R\xa3\xe5\xc7\x02\xe3\x0e" +
	"\xfb\xb1\xd2|>\xfc\x18\xc01\xae\xfb\xe8\x07\x86\x1b}" +
	"\xdb\xc5`H\xa5\x1d\xca1:\xc4\xb6VdrN\xe4" +
	"B\xe0H5\xed\x0fSad\x1b%\x99Em\xd3i" +
	"\x7f\xd86\x87L\x89\xc9dj\x1b'\x8a\xb1\xa4\xe6G" +
	"q\x85J\x7fCJ\"#\xe4\x91ob\xda\x0b\x85\xcc" +
	"\xcbG\xdd\x86\xc1\xb2m\x18\xd9\x9eN\xe4r\x06\x96\xed" +
	"\xac\xc8V\"2\xab\x82\x81e\x92\x8fli&\x93\x8b" +
	"\x0d\xb0i\xf4\xfa\xa8\xda\x8c\x84,d\xba\x03\xa6,\xa4" +
	"\xa9R\xa6gd\xb4\xba\x09\xd9\x14:\x93r\x8d\xf5\xfe" +
	"\xba\xb3)\x16K\xc6\x1c\xb3\x17a>\xfa\x00\x0f%n" +
	"\xe9\xfa\xfb\x10\"\"d\x13\xa4\xb1\x18\x09)\x89\x07z" +
	"\x02\x1f`\xc1`,\x8c\xb1\xcf\xa4\xb6\xb8\xdf\x02\x00\x00" +
	"\xff\xff\x16\x95\x1e\x96"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9a51e53177277763,
		Nodes: []uint64{
			0x82f79d7adbdcdd6f,
			0x86e3410d1abd406b,
			0x91b6120f2a2e3ebe,
			0x9d6074459fa0602b,
			0xa57c12075589e51f,
			0xa62fe22feb63d82e,
			0xa66966629ce6e8e9,
			0xb2c6f1c55b7403f4,
			0xb72541d950858a60,
			0xb8521a0e0dcb52d8,
			0xbb9ef870419ecb71,
			0xc09f176286f9e884,
			0xc25a17a8499cfe55,
			0xc3153fa5a13d8a26,
			0xc53168b273d497ee,
			0xc7e357fd7b4cb277,
			0xd22f75df06c187e8,
			0xd72ab4a0243047ac,
			0xd93c9aa0627bc93c,
			0xda23f0d3a8250633,
			0xe49628d0fca1d961,
			0xe64ce403f6090174,
			0xe990db10c77bbcb7,
			0xe9b5ea42655a6266,
			0xeafb60603769c851,
			0xeea7ae19b02f5d47,
			0xf51e7dd3fc20b968,
			0xf589dc1668ea3d8f,
			0xf5c2d7ad2dde5570,
			0xf694129c75eba87c,
			0xf9602cd2c3f65e0f,
			0xf9694ae208dbb3e3,
			0xfa45ca5ec6290c9f,
			0xffd9ede88fe29780,
		},
		Compressed: true,
	})
}
