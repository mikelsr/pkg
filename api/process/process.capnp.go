// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type BytecodeCache capnp.Client

// BytecodeCache_TypeID is the unique identifier for the type BytecodeCache.
const BytecodeCache_TypeID = 0xe64ce403f6090174

func (c BytecodeCache) Put(ctx context.Context, params func(BytecodeCache_put_Params) error) (BytecodeCache_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_put_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Get(ctx context.Context, params func(BytecodeCache_get_Params) error) (BytecodeCache_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_get_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Has(ctx context.Context, params func(BytecodeCache_has_Params) error) (BytecodeCache_has_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_has_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_has_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BytecodeCache) String() string {
	return "BytecodeCache(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BytecodeCache) AddRef() BytecodeCache {
	return BytecodeCache(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BytecodeCache) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BytecodeCache) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BytecodeCache) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BytecodeCache) DecodeFromPtr(p capnp.Ptr) BytecodeCache {
	return BytecodeCache(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BytecodeCache) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BytecodeCache) IsSame(other BytecodeCache) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BytecodeCache) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BytecodeCache) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BytecodeCache_Server is a BytecodeCache with a local implementation.
type BytecodeCache_Server interface {
	Put(context.Context, BytecodeCache_put) error

	Get(context.Context, BytecodeCache_get) error

	Has(context.Context, BytecodeCache_has) error
}

// BytecodeCache_NewServer creates a new Server from an implementation of BytecodeCache_Server.
func BytecodeCache_NewServer(s BytecodeCache_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BytecodeCache_Methods(nil, s), s, c)
}

// BytecodeCache_ServerToClient creates a new Client from an implementation of BytecodeCache_Server.
// The caller is responsible for calling Release on the returned Client.
func BytecodeCache_ServerToClient(s BytecodeCache_Server) BytecodeCache {
	return BytecodeCache(capnp.NewClient(BytecodeCache_NewServer(s)))
}

// BytecodeCache_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BytecodeCache_Methods(methods []server.Method, s BytecodeCache_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, BytecodeCache_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, BytecodeCache_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Has(ctx, BytecodeCache_has{call})
		},
	})

	return methods
}

// BytecodeCache_put holds the state for a server call to BytecodeCache.put.
// See server.Call for documentation.
type BytecodeCache_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_put) Args() BytecodeCache_put_Params {
	return BytecodeCache_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_put) AllocResults() (BytecodeCache_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(r), err
}

// BytecodeCache_get holds the state for a server call to BytecodeCache.get.
// See server.Call for documentation.
type BytecodeCache_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_get) Args() BytecodeCache_get_Params {
	return BytecodeCache_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_get) AllocResults() (BytecodeCache_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(r), err
}

// BytecodeCache_has holds the state for a server call to BytecodeCache.has.
// See server.Call for documentation.
type BytecodeCache_has struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_has) Args() BytecodeCache_has_Params {
	return BytecodeCache_has_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_has) AllocResults() (BytecodeCache_has_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(r), err
}

// BytecodeCache_List is a list of BytecodeCache.
type BytecodeCache_List = capnp.CapList[BytecodeCache]

// NewBytecodeCache creates a new list of BytecodeCache.
func NewBytecodeCache_List(s *capnp.Segment, sz int32) (BytecodeCache_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BytecodeCache](l), err
}

type BytecodeCache_put_Params capnp.Struct

// BytecodeCache_put_Params_TypeID is the unique identifier for the type BytecodeCache_put_Params.
const BytecodeCache_put_Params_TypeID = 0x91b6120f2a2e3ebe

func NewBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func NewRootBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func ReadRootBytecodeCache_put_Params(msg *capnp.Message) (BytecodeCache_put_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Params(root.Struct()), err
}

func (s BytecodeCache_put_Params) String() string {
	str, _ := text.Marshal(0x91b6120f2a2e3ebe, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Params {
	return BytecodeCache_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Params_List is a list of BytecodeCache_put_Params.
type BytecodeCache_put_Params_List = capnp.StructList[BytecodeCache_put_Params]

// NewBytecodeCache_put_Params creates a new list of BytecodeCache_put_Params.
func NewBytecodeCache_put_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Params](l), err
}

// BytecodeCache_put_Params_Future is a wrapper for a BytecodeCache_put_Params promised by a client call.
type BytecodeCache_put_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Params_Future) Struct() (BytecodeCache_put_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Params(p.Struct()), err
}

type BytecodeCache_put_Results capnp.Struct

// BytecodeCache_put_Results_TypeID is the unique identifier for the type BytecodeCache_put_Results.
const BytecodeCache_put_Results_TypeID = 0xf51e7dd3fc20b968

func NewBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func NewRootBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func ReadRootBytecodeCache_put_Results(msg *capnp.Message) (BytecodeCache_put_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Results(root.Struct()), err
}

func (s BytecodeCache_put_Results) String() string {
	str, _ := text.Marshal(0xf51e7dd3fc20b968, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Results {
	return BytecodeCache_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Results) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Results) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Results_List is a list of BytecodeCache_put_Results.
type BytecodeCache_put_Results_List = capnp.StructList[BytecodeCache_put_Results]

// NewBytecodeCache_put_Results creates a new list of BytecodeCache_put_Results.
func NewBytecodeCache_put_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Results](l), err
}

// BytecodeCache_put_Results_Future is a wrapper for a BytecodeCache_put_Results promised by a client call.
type BytecodeCache_put_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Results_Future) Struct() (BytecodeCache_put_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Results(p.Struct()), err
}

type BytecodeCache_get_Params capnp.Struct

// BytecodeCache_get_Params_TypeID is the unique identifier for the type BytecodeCache_get_Params.
const BytecodeCache_get_Params_TypeID = 0xf694129c75eba87c

func NewBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func NewRootBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func ReadRootBytecodeCache_get_Params(msg *capnp.Message) (BytecodeCache_get_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Params(root.Struct()), err
}

func (s BytecodeCache_get_Params) String() string {
	str, _ := text.Marshal(0xf694129c75eba87c, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Params {
	return BytecodeCache_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Params_List is a list of BytecodeCache_get_Params.
type BytecodeCache_get_Params_List = capnp.StructList[BytecodeCache_get_Params]

// NewBytecodeCache_get_Params creates a new list of BytecodeCache_get_Params.
func NewBytecodeCache_get_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Params](l), err
}

// BytecodeCache_get_Params_Future is a wrapper for a BytecodeCache_get_Params promised by a client call.
type BytecodeCache_get_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Params_Future) Struct() (BytecodeCache_get_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Params(p.Struct()), err
}

type BytecodeCache_get_Results capnp.Struct

// BytecodeCache_get_Results_TypeID is the unique identifier for the type BytecodeCache_get_Results.
const BytecodeCache_get_Results_TypeID = 0xb2c6f1c55b7403f4

func NewBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func NewRootBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func ReadRootBytecodeCache_get_Results(msg *capnp.Message) (BytecodeCache_get_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Results(root.Struct()), err
}

func (s BytecodeCache_get_Results) String() string {
	str, _ := text.Marshal(0xb2c6f1c55b7403f4, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Results {
	return BytecodeCache_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Results) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Results) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Results) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Results_List is a list of BytecodeCache_get_Results.
type BytecodeCache_get_Results_List = capnp.StructList[BytecodeCache_get_Results]

// NewBytecodeCache_get_Results creates a new list of BytecodeCache_get_Results.
func NewBytecodeCache_get_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Results](l), err
}

// BytecodeCache_get_Results_Future is a wrapper for a BytecodeCache_get_Results promised by a client call.
type BytecodeCache_get_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Results_Future) Struct() (BytecodeCache_get_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Results(p.Struct()), err
}

type BytecodeCache_has_Params capnp.Struct

// BytecodeCache_has_Params_TypeID is the unique identifier for the type BytecodeCache_has_Params.
const BytecodeCache_has_Params_TypeID = 0xc25a17a8499cfe55

func NewBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func NewRootBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func ReadRootBytecodeCache_has_Params(msg *capnp.Message) (BytecodeCache_has_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Params(root.Struct()), err
}

func (s BytecodeCache_has_Params) String() string {
	str, _ := text.Marshal(0xc25a17a8499cfe55, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Params {
	return BytecodeCache_has_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_has_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_has_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_has_Params_List is a list of BytecodeCache_has_Params.
type BytecodeCache_has_Params_List = capnp.StructList[BytecodeCache_has_Params]

// NewBytecodeCache_has_Params creates a new list of BytecodeCache_has_Params.
func NewBytecodeCache_has_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_has_Params](l), err
}

// BytecodeCache_has_Params_Future is a wrapper for a BytecodeCache_has_Params promised by a client call.
type BytecodeCache_has_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Params_Future) Struct() (BytecodeCache_has_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Params(p.Struct()), err
}

type BytecodeCache_has_Results capnp.Struct

// BytecodeCache_has_Results_TypeID is the unique identifier for the type BytecodeCache_has_Results.
const BytecodeCache_has_Results_TypeID = 0xf9602cd2c3f65e0f

func NewBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func NewRootBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func ReadRootBytecodeCache_has_Results(msg *capnp.Message) (BytecodeCache_has_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Results(root.Struct()), err
}

func (s BytecodeCache_has_Results) String() string {
	str, _ := text.Marshal(0xf9602cd2c3f65e0f, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Results {
	return BytecodeCache_has_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Results) Has() bool {
	return capnp.Struct(s).Bit(0)
}

func (s BytecodeCache_has_Results) SetHas(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// BytecodeCache_has_Results_List is a list of BytecodeCache_has_Results.
type BytecodeCache_has_Results_List = capnp.StructList[BytecodeCache_has_Results]

// NewBytecodeCache_has_Results creates a new list of BytecodeCache_has_Results.
func NewBytecodeCache_has_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BytecodeCache_has_Results](l), err
}

// BytecodeCache_has_Results_Future is a wrapper for a BytecodeCache_has_Results promised by a client call.
type BytecodeCache_has_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Results_Future) Struct() (BytecodeCache_has_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Results(p.Struct()), err
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release

}

func (c Process) Kill(ctx context.Context, params func(Process_kill_Params) error) (Process_kill_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_kill_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_kill_Results_Future{Future: ans.Future()}, release

}

func (c Process) Pause(ctx context.Context, params func(Process_pause_Params) error) (Process_pause_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "pause",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_pause_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_pause_Results_Future{Future: ans.Future()}, release

}

func (c Process) Resume(ctx context.Context, params func(Process_resume_Params) error) (Process_resume_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      3,
			InterfaceName: "process.capnp:Process",
			MethodName:    "resume",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_resume_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_resume_Results_Future{Future: ans.Future()}, release

}

func (c Process) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return "Process(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Wait(context.Context, Process_wait) error

	Kill(context.Context, Process_kill) error

	Pause(context.Context, Process_pause) error

	Resume(context.Context, Process_resume) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Kill(ctx, Process_kill{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "pause",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pause(ctx, Process_pause{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      3,
			InterfaceName: "process.capnp:Process",
			MethodName:    "resume",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resume(ctx, Process_resume{call})
		},
	})

	return methods
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(r), err
}

// Process_kill holds the state for a server call to Process.kill.
// See server.Call for documentation.
type Process_kill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_kill) Args() Process_kill_Params {
	return Process_kill_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_kill) AllocResults() (Process_kill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(r), err
}

// Process_pause holds the state for a server call to Process.pause.
// See server.Call for documentation.
type Process_pause struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_pause) Args() Process_pause_Params {
	return Process_pause_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_pause) AllocResults() (Process_pause_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Results(r), err
}

// Process_resume holds the state for a server call to Process.resume.
// See server.Call for documentation.
type Process_resume struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_resume) Args() Process_resume_Params {
	return Process_resume_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_resume) AllocResults() (Process_resume_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_wait_Results) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}

type Process_kill_Params capnp.Struct

// Process_kill_Params_TypeID is the unique identifier for the type Process_kill_Params.
const Process_kill_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func NewRootProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func ReadRootProcess_kill_Params(msg *capnp.Message) (Process_kill_Params, error) {
	root, err := msg.Root()
	return Process_kill_Params(root.Struct()), err
}

func (s Process_kill_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_kill_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Params) DecodeFromPtr(p capnp.Ptr) Process_kill_Params {
	return Process_kill_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Params_List is a list of Process_kill_Params.
type Process_kill_Params_List = capnp.StructList[Process_kill_Params]

// NewProcess_kill_Params creates a new list of Process_kill_Params.
func NewProcess_kill_Params_List(s *capnp.Segment, sz int32) (Process_kill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Params](l), err
}

// Process_kill_Params_Future is a wrapper for a Process_kill_Params promised by a client call.
type Process_kill_Params_Future struct{ *capnp.Future }

func (f Process_kill_Params_Future) Struct() (Process_kill_Params, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Params(p.Struct()), err
}

type Process_kill_Results capnp.Struct

// Process_kill_Results_TypeID is the unique identifier for the type Process_kill_Results.
const Process_kill_Results_TypeID = 0xc53168b273d497ee

func NewProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func NewRootProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func ReadRootProcess_kill_Results(msg *capnp.Message) (Process_kill_Results, error) {
	root, err := msg.Root()
	return Process_kill_Results(root.Struct()), err
}

func (s Process_kill_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_kill_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Results) DecodeFromPtr(p capnp.Ptr) Process_kill_Results {
	return Process_kill_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Results_List is a list of Process_kill_Results.
type Process_kill_Results_List = capnp.StructList[Process_kill_Results]

// NewProcess_kill_Results creates a new list of Process_kill_Results.
func NewProcess_kill_Results_List(s *capnp.Segment, sz int32) (Process_kill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Results](l), err
}

// Process_kill_Results_Future is a wrapper for a Process_kill_Results promised by a client call.
type Process_kill_Results_Future struct{ *capnp.Future }

func (f Process_kill_Results_Future) Struct() (Process_kill_Results, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Results(p.Struct()), err
}

type Process_pause_Params capnp.Struct

// Process_pause_Params_TypeID is the unique identifier for the type Process_pause_Params.
const Process_pause_Params_TypeID = 0xd22f75df06c187e8

func NewProcess_pause_Params(s *capnp.Segment) (Process_pause_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Params(st), err
}

func NewRootProcess_pause_Params(s *capnp.Segment) (Process_pause_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Params(st), err
}

func ReadRootProcess_pause_Params(msg *capnp.Message) (Process_pause_Params, error) {
	root, err := msg.Root()
	return Process_pause_Params(root.Struct()), err
}

func (s Process_pause_Params) String() string {
	str, _ := text.Marshal(0xd22f75df06c187e8, capnp.Struct(s))
	return str
}

func (s Process_pause_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_pause_Params) DecodeFromPtr(p capnp.Ptr) Process_pause_Params {
	return Process_pause_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_pause_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_pause_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_pause_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_pause_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_pause_Params_List is a list of Process_pause_Params.
type Process_pause_Params_List = capnp.StructList[Process_pause_Params]

// NewProcess_pause_Params creates a new list of Process_pause_Params.
func NewProcess_pause_Params_List(s *capnp.Segment, sz int32) (Process_pause_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_pause_Params](l), err
}

// Process_pause_Params_Future is a wrapper for a Process_pause_Params promised by a client call.
type Process_pause_Params_Future struct{ *capnp.Future }

func (f Process_pause_Params_Future) Struct() (Process_pause_Params, error) {
	p, err := f.Future.Ptr()
	return Process_pause_Params(p.Struct()), err
}

type Process_pause_Results capnp.Struct

// Process_pause_Results_TypeID is the unique identifier for the type Process_pause_Results.
const Process_pause_Results_TypeID = 0x9d6074459fa0602b

func NewProcess_pause_Results(s *capnp.Segment) (Process_pause_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Results(st), err
}

func NewRootProcess_pause_Results(s *capnp.Segment) (Process_pause_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Results(st), err
}

func ReadRootProcess_pause_Results(msg *capnp.Message) (Process_pause_Results, error) {
	root, err := msg.Root()
	return Process_pause_Results(root.Struct()), err
}

func (s Process_pause_Results) String() string {
	str, _ := text.Marshal(0x9d6074459fa0602b, capnp.Struct(s))
	return str
}

func (s Process_pause_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_pause_Results) DecodeFromPtr(p capnp.Ptr) Process_pause_Results {
	return Process_pause_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_pause_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_pause_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_pause_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_pause_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_pause_Results_List is a list of Process_pause_Results.
type Process_pause_Results_List = capnp.StructList[Process_pause_Results]

// NewProcess_pause_Results creates a new list of Process_pause_Results.
func NewProcess_pause_Results_List(s *capnp.Segment, sz int32) (Process_pause_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_pause_Results](l), err
}

// Process_pause_Results_Future is a wrapper for a Process_pause_Results promised by a client call.
type Process_pause_Results_Future struct{ *capnp.Future }

func (f Process_pause_Results_Future) Struct() (Process_pause_Results, error) {
	p, err := f.Future.Ptr()
	return Process_pause_Results(p.Struct()), err
}

type Process_resume_Params capnp.Struct

// Process_resume_Params_TypeID is the unique identifier for the type Process_resume_Params.
const Process_resume_Params_TypeID = 0x86e3410d1abd406b

func NewProcess_resume_Params(s *capnp.Segment) (Process_resume_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Params(st), err
}

func NewRootProcess_resume_Params(s *capnp.Segment) (Process_resume_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Params(st), err
}

func ReadRootProcess_resume_Params(msg *capnp.Message) (Process_resume_Params, error) {
	root, err := msg.Root()
	return Process_resume_Params(root.Struct()), err
}

func (s Process_resume_Params) String() string {
	str, _ := text.Marshal(0x86e3410d1abd406b, capnp.Struct(s))
	return str
}

func (s Process_resume_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_resume_Params) DecodeFromPtr(p capnp.Ptr) Process_resume_Params {
	return Process_resume_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_resume_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_resume_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_resume_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_resume_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_resume_Params_List is a list of Process_resume_Params.
type Process_resume_Params_List = capnp.StructList[Process_resume_Params]

// NewProcess_resume_Params creates a new list of Process_resume_Params.
func NewProcess_resume_Params_List(s *capnp.Segment, sz int32) (Process_resume_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_resume_Params](l), err
}

// Process_resume_Params_Future is a wrapper for a Process_resume_Params promised by a client call.
type Process_resume_Params_Future struct{ *capnp.Future }

func (f Process_resume_Params_Future) Struct() (Process_resume_Params, error) {
	p, err := f.Future.Ptr()
	return Process_resume_Params(p.Struct()), err
}

type Process_resume_Results capnp.Struct

// Process_resume_Results_TypeID is the unique identifier for the type Process_resume_Results.
const Process_resume_Results_TypeID = 0xd93c9aa0627bc93c

func NewProcess_resume_Results(s *capnp.Segment) (Process_resume_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Results(st), err
}

func NewRootProcess_resume_Results(s *capnp.Segment) (Process_resume_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Results(st), err
}

func ReadRootProcess_resume_Results(msg *capnp.Message) (Process_resume_Results, error) {
	root, err := msg.Root()
	return Process_resume_Results(root.Struct()), err
}

func (s Process_resume_Results) String() string {
	str, _ := text.Marshal(0xd93c9aa0627bc93c, capnp.Struct(s))
	return str
}

func (s Process_resume_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_resume_Results) DecodeFromPtr(p capnp.Ptr) Process_resume_Results {
	return Process_resume_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_resume_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_resume_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_resume_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_resume_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_resume_Results_List is a list of Process_resume_Results.
type Process_resume_Results_List = capnp.StructList[Process_resume_Results]

// NewProcess_resume_Results creates a new list of Process_resume_Results.
func NewProcess_resume_Results_List(s *capnp.Segment, sz int32) (Process_resume_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_resume_Results](l), err
}

// Process_resume_Results_Future is a wrapper for a Process_resume_Results promised by a client call.
type Process_resume_Results_Future struct{ *capnp.Future }

func (f Process_resume_Results_Future) Struct() (Process_resume_Results, error) {
	p, err := f.Future.Ptr()
	return Process_resume_Results(p.Struct()), err
}

type Info capnp.Struct

// Info_TypeID is the unique identifier for the type Info.
const Info_TypeID = 0xc3153fa5a13d8a26

func NewInfo(s *capnp.Segment) (Info, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Info(st), err
}

func NewRootInfo(s *capnp.Segment) (Info, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Info(st), err
}

func ReadRootInfo(msg *capnp.Message) (Info, error) {
	root, err := msg.Root()
	return Info(root.Struct()), err
}

func (s Info) String() string {
	str, _ := text.Marshal(0xc3153fa5a13d8a26, capnp.Struct(s))
	return str
}

func (s Info) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Info) DecodeFromPtr(p capnp.Ptr) Info {
	return Info(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Info) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Info) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Info) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Info) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Info) Pid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Info) SetPid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Info) Ppid() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Info) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Info) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Info) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Info) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Info) Argv() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Info) HasArgv() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Info) SetArgv(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewArgv sets the argv field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Info) NewArgv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Info) Time() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Info) SetTime(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// Info_List is a list of Info.
type Info_List = capnp.StructList[Info]

// NewInfo creates a new list of Info.
func NewInfo_List(s *capnp.Segment, sz int32) (Info_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Info](l), err
}

// Info_Future is a wrapper for a Info promised by a client call.
type Info_Future struct{ *capnp.Future }

func (f Info_Future) Struct() (Info, error) {
	p, err := f.Future.Ptr()
	return Info(p.Struct()), err
}

type Events capnp.Client

// Events_TypeID is the unique identifier for the type Events.
const Events_TypeID = 0xe9b5ea42655a6266

func (c Events) Pause(ctx context.Context, params func(Events_pause_Params) error) (Events_pause_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      0,
			InterfaceName: "process.capnp:Events",
			MethodName:    "pause",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Events_pause_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Events_pause_Results_Future{Future: ans.Future()}, release

}

func (c Events) Resume(ctx context.Context, params func(Events_resume_Params) error) (Events_resume_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      1,
			InterfaceName: "process.capnp:Events",
			MethodName:    "resume",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Events_resume_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Events_resume_Results_Future{Future: ans.Future()}, release

}

func (c Events) Stop(ctx context.Context, params func(Events_stop_Params) error) (Events_stop_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      2,
			InterfaceName: "process.capnp:Events",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Events_stop_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Events_stop_Results_Future{Future: ans.Future()}, release

}

func (c Events) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Events) String() string {
	return "Events(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Events) AddRef() Events {
	return Events(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Events) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Events) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Events) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Events) DecodeFromPtr(p capnp.Ptr) Events {
	return Events(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Events) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Events) IsSame(other Events) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Events) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Events) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Events_Server is a Events with a local implementation.
type Events_Server interface {
	Pause(context.Context, Events_pause) error

	Resume(context.Context, Events_resume) error

	Stop(context.Context, Events_stop) error
}

// Events_NewServer creates a new Server from an implementation of Events_Server.
func Events_NewServer(s Events_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Events_Methods(nil, s), s, c)
}

// Events_ServerToClient creates a new Client from an implementation of Events_Server.
// The caller is responsible for calling Release on the returned Client.
func Events_ServerToClient(s Events_Server) Events {
	return Events(capnp.NewClient(Events_NewServer(s)))
}

// Events_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Events_Methods(methods []server.Method, s Events_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      0,
			InterfaceName: "process.capnp:Events",
			MethodName:    "pause",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pause(ctx, Events_pause{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      1,
			InterfaceName: "process.capnp:Events",
			MethodName:    "resume",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resume(ctx, Events_resume{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      2,
			InterfaceName: "process.capnp:Events",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Events_stop{call})
		},
	})

	return methods
}

// Events_pause holds the state for a server call to Events.pause.
// See server.Call for documentation.
type Events_pause struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Events_pause) Args() Events_pause_Params {
	return Events_pause_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Events_pause) AllocResults() (Events_pause_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Results(r), err
}

// Events_resume holds the state for a server call to Events.resume.
// See server.Call for documentation.
type Events_resume struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Events_resume) Args() Events_resume_Params {
	return Events_resume_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Events_resume) AllocResults() (Events_resume_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Results(r), err
}

// Events_stop holds the state for a server call to Events.stop.
// See server.Call for documentation.
type Events_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Events_stop) Args() Events_stop_Params {
	return Events_stop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Events_stop) AllocResults() (Events_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_stop_Results(r), err
}

// Events_List is a list of Events.
type Events_List = capnp.CapList[Events]

// NewEvents creates a new list of Events.
func NewEvents_List(s *capnp.Segment, sz int32) (Events_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Events](l), err
}

type Events_pause_Params capnp.Struct

// Events_pause_Params_TypeID is the unique identifier for the type Events_pause_Params.
const Events_pause_Params_TypeID = 0xa62fe22feb63d82e

func NewEvents_pause_Params(s *capnp.Segment) (Events_pause_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Params(st), err
}

func NewRootEvents_pause_Params(s *capnp.Segment) (Events_pause_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Params(st), err
}

func ReadRootEvents_pause_Params(msg *capnp.Message) (Events_pause_Params, error) {
	root, err := msg.Root()
	return Events_pause_Params(root.Struct()), err
}

func (s Events_pause_Params) String() string {
	str, _ := text.Marshal(0xa62fe22feb63d82e, capnp.Struct(s))
	return str
}

func (s Events_pause_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_pause_Params) DecodeFromPtr(p capnp.Ptr) Events_pause_Params {
	return Events_pause_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_pause_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_pause_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_pause_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_pause_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_pause_Params_List is a list of Events_pause_Params.
type Events_pause_Params_List = capnp.StructList[Events_pause_Params]

// NewEvents_pause_Params creates a new list of Events_pause_Params.
func NewEvents_pause_Params_List(s *capnp.Segment, sz int32) (Events_pause_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_pause_Params](l), err
}

// Events_pause_Params_Future is a wrapper for a Events_pause_Params promised by a client call.
type Events_pause_Params_Future struct{ *capnp.Future }

func (f Events_pause_Params_Future) Struct() (Events_pause_Params, error) {
	p, err := f.Future.Ptr()
	return Events_pause_Params(p.Struct()), err
}

type Events_pause_Results capnp.Struct

// Events_pause_Results_TypeID is the unique identifier for the type Events_pause_Results.
const Events_pause_Results_TypeID = 0x82f79d7adbdcdd6f

func NewEvents_pause_Results(s *capnp.Segment) (Events_pause_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Results(st), err
}

func NewRootEvents_pause_Results(s *capnp.Segment) (Events_pause_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Results(st), err
}

func ReadRootEvents_pause_Results(msg *capnp.Message) (Events_pause_Results, error) {
	root, err := msg.Root()
	return Events_pause_Results(root.Struct()), err
}

func (s Events_pause_Results) String() string {
	str, _ := text.Marshal(0x82f79d7adbdcdd6f, capnp.Struct(s))
	return str
}

func (s Events_pause_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_pause_Results) DecodeFromPtr(p capnp.Ptr) Events_pause_Results {
	return Events_pause_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_pause_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_pause_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_pause_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_pause_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_pause_Results_List is a list of Events_pause_Results.
type Events_pause_Results_List = capnp.StructList[Events_pause_Results]

// NewEvents_pause_Results creates a new list of Events_pause_Results.
func NewEvents_pause_Results_List(s *capnp.Segment, sz int32) (Events_pause_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_pause_Results](l), err
}

// Events_pause_Results_Future is a wrapper for a Events_pause_Results promised by a client call.
type Events_pause_Results_Future struct{ *capnp.Future }

func (f Events_pause_Results_Future) Struct() (Events_pause_Results, error) {
	p, err := f.Future.Ptr()
	return Events_pause_Results(p.Struct()), err
}

type Events_resume_Params capnp.Struct

// Events_resume_Params_TypeID is the unique identifier for the type Events_resume_Params.
const Events_resume_Params_TypeID = 0xb8521a0e0dcb52d8

func NewEvents_resume_Params(s *capnp.Segment) (Events_resume_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Params(st), err
}

func NewRootEvents_resume_Params(s *capnp.Segment) (Events_resume_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Params(st), err
}

func ReadRootEvents_resume_Params(msg *capnp.Message) (Events_resume_Params, error) {
	root, err := msg.Root()
	return Events_resume_Params(root.Struct()), err
}

func (s Events_resume_Params) String() string {
	str, _ := text.Marshal(0xb8521a0e0dcb52d8, capnp.Struct(s))
	return str
}

func (s Events_resume_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_resume_Params) DecodeFromPtr(p capnp.Ptr) Events_resume_Params {
	return Events_resume_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_resume_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_resume_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_resume_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_resume_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_resume_Params_List is a list of Events_resume_Params.
type Events_resume_Params_List = capnp.StructList[Events_resume_Params]

// NewEvents_resume_Params creates a new list of Events_resume_Params.
func NewEvents_resume_Params_List(s *capnp.Segment, sz int32) (Events_resume_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_resume_Params](l), err
}

// Events_resume_Params_Future is a wrapper for a Events_resume_Params promised by a client call.
type Events_resume_Params_Future struct{ *capnp.Future }

func (f Events_resume_Params_Future) Struct() (Events_resume_Params, error) {
	p, err := f.Future.Ptr()
	return Events_resume_Params(p.Struct()), err
}

type Events_resume_Results capnp.Struct

// Events_resume_Results_TypeID is the unique identifier for the type Events_resume_Results.
const Events_resume_Results_TypeID = 0xe990db10c77bbcb7

func NewEvents_resume_Results(s *capnp.Segment) (Events_resume_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Results(st), err
}

func NewRootEvents_resume_Results(s *capnp.Segment) (Events_resume_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Results(st), err
}

func ReadRootEvents_resume_Results(msg *capnp.Message) (Events_resume_Results, error) {
	root, err := msg.Root()
	return Events_resume_Results(root.Struct()), err
}

func (s Events_resume_Results) String() string {
	str, _ := text.Marshal(0xe990db10c77bbcb7, capnp.Struct(s))
	return str
}

func (s Events_resume_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_resume_Results) DecodeFromPtr(p capnp.Ptr) Events_resume_Results {
	return Events_resume_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_resume_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_resume_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_resume_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_resume_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_resume_Results_List is a list of Events_resume_Results.
type Events_resume_Results_List = capnp.StructList[Events_resume_Results]

// NewEvents_resume_Results creates a new list of Events_resume_Results.
func NewEvents_resume_Results_List(s *capnp.Segment, sz int32) (Events_resume_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_resume_Results](l), err
}

// Events_resume_Results_Future is a wrapper for a Events_resume_Results promised by a client call.
type Events_resume_Results_Future struct{ *capnp.Future }

func (f Events_resume_Results_Future) Struct() (Events_resume_Results, error) {
	p, err := f.Future.Ptr()
	return Events_resume_Results(p.Struct()), err
}

type Events_stop_Params capnp.Struct

// Events_stop_Params_TypeID is the unique identifier for the type Events_stop_Params.
const Events_stop_Params_TypeID = 0xfa45ca5ec6290c9f

func NewEvents_stop_Params(s *capnp.Segment) (Events_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_stop_Params(st), err
}

func NewRootEvents_stop_Params(s *capnp.Segment) (Events_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_stop_Params(st), err
}

func ReadRootEvents_stop_Params(msg *capnp.Message) (Events_stop_Params, error) {
	root, err := msg.Root()
	return Events_stop_Params(root.Struct()), err
}

func (s Events_stop_Params) String() string {
	str, _ := text.Marshal(0xfa45ca5ec6290c9f, capnp.Struct(s))
	return str
}

func (s Events_stop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_stop_Params) DecodeFromPtr(p capnp.Ptr) Events_stop_Params {
	return Events_stop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_stop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_stop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_stop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_stop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_stop_Params_List is a list of Events_stop_Params.
type Events_stop_Params_List = capnp.StructList[Events_stop_Params]

// NewEvents_stop_Params creates a new list of Events_stop_Params.
func NewEvents_stop_Params_List(s *capnp.Segment, sz int32) (Events_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_stop_Params](l), err
}

// Events_stop_Params_Future is a wrapper for a Events_stop_Params promised by a client call.
type Events_stop_Params_Future struct{ *capnp.Future }

func (f Events_stop_Params_Future) Struct() (Events_stop_Params, error) {
	p, err := f.Future.Ptr()
	return Events_stop_Params(p.Struct()), err
}

type Events_stop_Results capnp.Struct

// Events_stop_Results_TypeID is the unique identifier for the type Events_stop_Results.
const Events_stop_Results_TypeID = 0xa66966629ce6e8e9

func NewEvents_stop_Results(s *capnp.Segment) (Events_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_stop_Results(st), err
}

func NewRootEvents_stop_Results(s *capnp.Segment) (Events_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_stop_Results(st), err
}

func ReadRootEvents_stop_Results(msg *capnp.Message) (Events_stop_Results, error) {
	root, err := msg.Root()
	return Events_stop_Results(root.Struct()), err
}

func (s Events_stop_Results) String() string {
	str, _ := text.Marshal(0xa66966629ce6e8e9, capnp.Struct(s))
	return str
}

func (s Events_stop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_stop_Results) DecodeFromPtr(p capnp.Ptr) Events_stop_Results {
	return Events_stop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_stop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_stop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_stop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_stop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_stop_Results_List is a list of Events_stop_Results.
type Events_stop_Results_List = capnp.StructList[Events_stop_Results]

// NewEvents_stop_Results creates a new list of Events_stop_Results.
func NewEvents_stop_Results_List(s *capnp.Segment, sz int32) (Events_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_stop_Results](l), err
}

// Events_stop_Results_Future is a wrapper for a Events_stop_Results promised by a client call.
type Events_stop_Results_Future struct{ *capnp.Future }

func (f Events_stop_Results_Future) Struct() (Events_stop_Results, error) {
	p, err := f.Future.Ptr()
	return Events_stop_Results(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda\xa4Uoh\x1cU\x10\x9fyow_\"\xb9" +
	"\\_\xf7R5TccTrj\xfe\xb4\xf8!\xa1" +
	"5\xd7\x94PR\x14n\x03\xfd`\xc5\x92\xcde\x93;" +
	"\x9a?gv\xaf\xa9\xb6\x05+\xad\x1aQ0\xa0\xa8!" +
	"\xa1)\x18\x1bE\xc5F\xab\x06\xac\xa0\xa5\x0dU\xfc\xd2" +
	"\x0a\xb6\xa6\"\xa6Z\x1a\x0b\xc5\x82F*\xe2\xc9\xdb\xbb" +
	"w\xb7\xc9\xddq\xa2_B\xf6\xe673\xbf\x99y\xf3" +
	"\x9b\x86\x8b$\xa44\xfa\x8e\x96\x021\xe2\xaa\x96\x1c\xfc" +
	"\xfe\xe2\xfc\x93\x13\x7f<\x0d\xbc\x02\x01\x14\x06\xb0aV" +
	"\xa9DP\x92\xbbB'*}\x9b/=\x03|\x8d\xb4" +
	"\x1cQ\xaa\x85\xe5\xb3\x07\xeb\x82\xfe\xd5\x1f\x8d\x02_\x8b" +
	"\x00*\x0a\xd3\x88\xd2\x8c\x80\xfa\xa8\xd2\x02\x98\xbc\xb7s" +
	"\xf2p\x9b\xd39\xe1q=\x9er\xad;\x1f\xb9Z\xbf" +
	"P\xff\xa6'\xdd\x84\xb2ZX\x16\xaf\\\x1e\xef\xea\x89" +
	"y-\x87R\x96\xdf\xa8\xf3\xe8\xa9\xeb\xa7g\xbc\xe9\xfa" +
	"\x95V\x91.\xe1\xa6;\xdf\xf1\x95\xaf\xbc\xb2\xe3\x13\x8f" +
	"\xeb\xeb\xa9\x1a\xb6\xff=\xde>}\xf3\x8e/\xbc\xae\x07" +
	"RLG\\\xd7\xbb\x9f\xdftd\xaa\xa5\xe2$\x18\xe5" +
	"H\x92\x91\xe1{\x86\x1b\x7f6\xc6@%\x0c@\x7fK" +
	"\x19\xd3\x8f\xb9\xe1\xdeU\xaa\x100y\xed\xd5o\xec\x99" +
	"h\xe3)O]_\xabn\xa2+\xcf~\xae\xfd\x90\xa8" +
	"?\xeb\xad8eygkC\xcd\xe4\x87\xc1o\xc1X" +
	"\x83\x99\x92\x85\x09\xf5)UP\xd8xfo\xd7\xe4\xd8" +
	"\xc6\x0b\x1e\xd73jP\xb8n\xd0\xee\x9a>\xf7\xeb\x9d" +
	"\xdf\x01/\xa7Yn\x80\xfa1uF\x9fUSI\x18" +
	"\xea\xdb5\x06\x90t\xb0t\x89\xfe\xf4\xd0\xe5\x1c\xf4&" +
	"mAo\x17\x10\xbdM\x9b\xd3O\xb8\xe0\x8f?\xdd;" +
	"\xb7j\xfe\xa5EO\xcb\xa64wB=];\xac\xd6" +
	"_\x8e/\xe6\x84yQ{[\x7f\xc5\x0d3\xaa\xcd\xe9" +
	"\xa5L\x84\xd9\xfaX\xfd\xfb\xb7\xbew\xf4\x9a\x87\xfbu" +
	"\xcd\x1dZt\xf6\x8e\xbf\xce\xed\xbf\xfdwo\xe7/h" +
	"\xee\xd0~\xd4D\xd9\xfb\xa6\xaf&\xc6W\xbf\xbc\xe4\x05" +
	" sGS\xca\x04\xc0\xbfs\xe9\xe4\xd9\xfb:o\x80" +
	"\xb16\xd3\xb8Z\xe6Fht\x01\x97>\x98/Y\xd8" +
	"\x16\xbb\xe1In07\xf9\xe1\xb2\xda\xd3;\xbfl\xfb" +
	"\xd3S]\x13\xbb\x09\xa1!\x19\x1f\x1a\x8cX\xb6]G" +
	"#f| \xde\xdc\xb6\xdb\x1ap\xec\xba\xb8\x99\xb0\xad" +
	"\x9a\x0e\xcbN\xf4Q\xc7^\x09\x0a\xa7?\x87,;\xd1" +
	"o\xd5\x84\xcd!f\xf6\xe7\xa0Z\x9fp\xac\xc8`\xb7" +
	"\xb5\xc5\x8cD\xad\xbax\xc2\xa9i\x09\x9bCf\xbfm" +
	"(T\x01P\x10\x80\xfb\xb6\x01\x18e\x14\x8d[\x08&" +
	"\xbb\xd2\x0e\x00\x80> \xe8\x03,\x949\xcb\x8f\xf5\xe5" +
	"\xf2[V\x84\x9b\x13\x0balg0\x9e\xaa\xd3\xf1`" +
	"\x94|\x15\xf4ZN\x1ai\xc3\xff(!\x9d8\xdb;" +
	"\x93\x16\xeb]\xd4\xb4\xf3\xf5\xae\x1a\xc0(\xa1h\x04\x08" +
	"\xb2H\xac;'!\xa6b\xb5\x0f\xd0\x9e\xc10\xa2\x11" +
	"\xc8\xb8\xee\x17\xae{(\x1a\x07\x09r\xc4\x80xN\xfc" +
	"@\x10\xc0\xd8G\xd1x\x8e \x92\x00\x12\x00~H\x00" +
	"\x9f\xa2h\xbc@\x90S\x0c \x05\xe0#\x02x\x90\xa2" +
	"1I\x90+\x18@\x05\x80O\x88\x1f_\xa3h\xbcA" +
	"\x90\xc5c\xddX\x02\x04K\x00\xfdq\xcf\x87\x97\xa6\xdf" +
	"\x1c\xea\xdd\x8d\xe5\x80a\x8aX\x06D\xfc\xebwb\xfd" +
	"\x16\xaa@P-<\xfb]\xb1\xbe\xbe\xa2O3;\xfb" +
	"<\xdd\x95\xa0a3\xe6d\"\x15\x1a\xa9\xb5'\xe6l" +
	"I\x8f4]F\x91}\xe8\xb0l\x7f\xc2\xfb,Q\xc2" +
	"\xaa\xdco1\x8bUT\x05\xc8,,JM\xe4\x8f\x07" +
	"\x81p\x8b!f\x94\x04\xa5\xc6\xf2G\x84\xeda\x86$" +
	"#\xae(\xef\x0a\xdf\xbc\x1e\x08\x7f\x80!\xcd\\)\x94" +
	"2\xcak\x9b\x81\xf0\xdb\x98_\x94\x1bB\xbf\xe8_\x08" +
	"\xab\xdc\x0e\x85\xb0%E:\x84a\xcc\xd6EV\xbeB" +
	"\x16\x89Z\x82v\x99K[\x9e;\x94\x9a\xc6\x8dj " +
	"\xbcM\xd0\x96*\x86\xf2H\xf1&a\xbb_\xd0\x96\xc7" +
	"\x07\xa5\x92\xf1u\xc2V\xc1X<\xe1\x84\x90\xf5Z\xe2" +
	"o\xd4\xb4\x97\xb3\xc9\xbb89\xbb\x8f\x12\xe5\x17\xb0," +
	"Yy`Q\x1evn\xac\x97d\xe5\x9dD\xa9\xfe\xbc" +
	"\xa9Y\x92\x95\x92\x89\xf2\x0e\xf3uA\x97lN\xe7\xfc" +
	"BD\xf2R^\xf6dW\x0a\x91RH&\xf3\x89L" +
	"\xb1]\xa7\x85\x14\xeb?\xe8\x86RH\x83\x8a\x11\x8b\x9a" +
	"6\"\x10\xc4\xc2+\xe2\xae\xdc\xbf\x90\xe4\x14k\x80\x7f" +
	"\x02\x00\x00\xff\xfff\x15\xbe\xd2"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9a51e53177277763,
		Nodes: []uint64{
			0x82f79d7adbdcdd6f,
			0x86e3410d1abd406b,
			0x91b6120f2a2e3ebe,
			0x9d6074459fa0602b,
			0xa62fe22feb63d82e,
			0xa66966629ce6e8e9,
			0xb2c6f1c55b7403f4,
			0xb8521a0e0dcb52d8,
			0xc25a17a8499cfe55,
			0xc3153fa5a13d8a26,
			0xc53168b273d497ee,
			0xd22f75df06c187e8,
			0xd72ab4a0243047ac,
			0xd93c9aa0627bc93c,
			0xda23f0d3a8250633,
			0xe64ce403f6090174,
			0xe990db10c77bbcb7,
			0xe9b5ea42655a6266,
			0xeea7ae19b02f5d47,
			0xf51e7dd3fc20b968,
			0xf694129c75eba87c,
			0xf9602cd2c3f65e0f,
			0xf9694ae208dbb3e3,
			0xfa45ca5ec6290c9f,
		},
		Compressed: true,
	})
}
