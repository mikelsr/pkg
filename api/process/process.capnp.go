// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type BytecodeCache capnp.Client

// BytecodeCache_TypeID is the unique identifier for the type BytecodeCache.
const BytecodeCache_TypeID = 0xe64ce403f6090174

func (c BytecodeCache) Put(ctx context.Context, params func(BytecodeCache_put_Params) error) (BytecodeCache_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_put_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Get(ctx context.Context, params func(BytecodeCache_get_Params) error) (BytecodeCache_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_get_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Has(ctx context.Context, params func(BytecodeCache_has_Params) error) (BytecodeCache_has_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_has_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_has_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BytecodeCache) String() string {
	return "BytecodeCache(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BytecodeCache) AddRef() BytecodeCache {
	return BytecodeCache(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BytecodeCache) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BytecodeCache) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BytecodeCache) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BytecodeCache) DecodeFromPtr(p capnp.Ptr) BytecodeCache {
	return BytecodeCache(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BytecodeCache) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BytecodeCache) IsSame(other BytecodeCache) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BytecodeCache) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BytecodeCache) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BytecodeCache_Server is a BytecodeCache with a local implementation.
type BytecodeCache_Server interface {
	Put(context.Context, BytecodeCache_put) error

	Get(context.Context, BytecodeCache_get) error

	Has(context.Context, BytecodeCache_has) error
}

// BytecodeCache_NewServer creates a new Server from an implementation of BytecodeCache_Server.
func BytecodeCache_NewServer(s BytecodeCache_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BytecodeCache_Methods(nil, s), s, c)
}

// BytecodeCache_ServerToClient creates a new Client from an implementation of BytecodeCache_Server.
// The caller is responsible for calling Release on the returned Client.
func BytecodeCache_ServerToClient(s BytecodeCache_Server) BytecodeCache {
	return BytecodeCache(capnp.NewClient(BytecodeCache_NewServer(s)))
}

// BytecodeCache_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BytecodeCache_Methods(methods []server.Method, s BytecodeCache_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, BytecodeCache_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, BytecodeCache_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Has(ctx, BytecodeCache_has{call})
		},
	})

	return methods
}

// BytecodeCache_put holds the state for a server call to BytecodeCache.put.
// See server.Call for documentation.
type BytecodeCache_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_put) Args() BytecodeCache_put_Params {
	return BytecodeCache_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_put) AllocResults() (BytecodeCache_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(r), err
}

// BytecodeCache_get holds the state for a server call to BytecodeCache.get.
// See server.Call for documentation.
type BytecodeCache_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_get) Args() BytecodeCache_get_Params {
	return BytecodeCache_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_get) AllocResults() (BytecodeCache_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(r), err
}

// BytecodeCache_has holds the state for a server call to BytecodeCache.has.
// See server.Call for documentation.
type BytecodeCache_has struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_has) Args() BytecodeCache_has_Params {
	return BytecodeCache_has_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_has) AllocResults() (BytecodeCache_has_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(r), err
}

// BytecodeCache_List is a list of BytecodeCache.
type BytecodeCache_List = capnp.CapList[BytecodeCache]

// NewBytecodeCache creates a new list of BytecodeCache.
func NewBytecodeCache_List(s *capnp.Segment, sz int32) (BytecodeCache_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BytecodeCache](l), err
}

type BytecodeCache_put_Params capnp.Struct

// BytecodeCache_put_Params_TypeID is the unique identifier for the type BytecodeCache_put_Params.
const BytecodeCache_put_Params_TypeID = 0x91b6120f2a2e3ebe

func NewBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func NewRootBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func ReadRootBytecodeCache_put_Params(msg *capnp.Message) (BytecodeCache_put_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Params(root.Struct()), err
}

func (s BytecodeCache_put_Params) String() string {
	str, _ := text.Marshal(0x91b6120f2a2e3ebe, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Params {
	return BytecodeCache_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Params_List is a list of BytecodeCache_put_Params.
type BytecodeCache_put_Params_List = capnp.StructList[BytecodeCache_put_Params]

// NewBytecodeCache_put_Params creates a new list of BytecodeCache_put_Params.
func NewBytecodeCache_put_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Params](l), err
}

// BytecodeCache_put_Params_Future is a wrapper for a BytecodeCache_put_Params promised by a client call.
type BytecodeCache_put_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Params_Future) Struct() (BytecodeCache_put_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Params(p.Struct()), err
}

type BytecodeCache_put_Results capnp.Struct

// BytecodeCache_put_Results_TypeID is the unique identifier for the type BytecodeCache_put_Results.
const BytecodeCache_put_Results_TypeID = 0xf51e7dd3fc20b968

func NewBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func NewRootBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func ReadRootBytecodeCache_put_Results(msg *capnp.Message) (BytecodeCache_put_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Results(root.Struct()), err
}

func (s BytecodeCache_put_Results) String() string {
	str, _ := text.Marshal(0xf51e7dd3fc20b968, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Results {
	return BytecodeCache_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Results) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Results) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Results_List is a list of BytecodeCache_put_Results.
type BytecodeCache_put_Results_List = capnp.StructList[BytecodeCache_put_Results]

// NewBytecodeCache_put_Results creates a new list of BytecodeCache_put_Results.
func NewBytecodeCache_put_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Results](l), err
}

// BytecodeCache_put_Results_Future is a wrapper for a BytecodeCache_put_Results promised by a client call.
type BytecodeCache_put_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Results_Future) Struct() (BytecodeCache_put_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Results(p.Struct()), err
}

type BytecodeCache_get_Params capnp.Struct

// BytecodeCache_get_Params_TypeID is the unique identifier for the type BytecodeCache_get_Params.
const BytecodeCache_get_Params_TypeID = 0xf694129c75eba87c

func NewBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func NewRootBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func ReadRootBytecodeCache_get_Params(msg *capnp.Message) (BytecodeCache_get_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Params(root.Struct()), err
}

func (s BytecodeCache_get_Params) String() string {
	str, _ := text.Marshal(0xf694129c75eba87c, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Params {
	return BytecodeCache_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Params_List is a list of BytecodeCache_get_Params.
type BytecodeCache_get_Params_List = capnp.StructList[BytecodeCache_get_Params]

// NewBytecodeCache_get_Params creates a new list of BytecodeCache_get_Params.
func NewBytecodeCache_get_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Params](l), err
}

// BytecodeCache_get_Params_Future is a wrapper for a BytecodeCache_get_Params promised by a client call.
type BytecodeCache_get_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Params_Future) Struct() (BytecodeCache_get_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Params(p.Struct()), err
}

type BytecodeCache_get_Results capnp.Struct

// BytecodeCache_get_Results_TypeID is the unique identifier for the type BytecodeCache_get_Results.
const BytecodeCache_get_Results_TypeID = 0xb2c6f1c55b7403f4

func NewBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func NewRootBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func ReadRootBytecodeCache_get_Results(msg *capnp.Message) (BytecodeCache_get_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Results(root.Struct()), err
}

func (s BytecodeCache_get_Results) String() string {
	str, _ := text.Marshal(0xb2c6f1c55b7403f4, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Results {
	return BytecodeCache_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Results) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Results) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Results) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Results_List is a list of BytecodeCache_get_Results.
type BytecodeCache_get_Results_List = capnp.StructList[BytecodeCache_get_Results]

// NewBytecodeCache_get_Results creates a new list of BytecodeCache_get_Results.
func NewBytecodeCache_get_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Results](l), err
}

// BytecodeCache_get_Results_Future is a wrapper for a BytecodeCache_get_Results promised by a client call.
type BytecodeCache_get_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Results_Future) Struct() (BytecodeCache_get_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Results(p.Struct()), err
}

type BytecodeCache_has_Params capnp.Struct

// BytecodeCache_has_Params_TypeID is the unique identifier for the type BytecodeCache_has_Params.
const BytecodeCache_has_Params_TypeID = 0xc25a17a8499cfe55

func NewBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func NewRootBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func ReadRootBytecodeCache_has_Params(msg *capnp.Message) (BytecodeCache_has_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Params(root.Struct()), err
}

func (s BytecodeCache_has_Params) String() string {
	str, _ := text.Marshal(0xc25a17a8499cfe55, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Params {
	return BytecodeCache_has_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_has_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_has_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_has_Params_List is a list of BytecodeCache_has_Params.
type BytecodeCache_has_Params_List = capnp.StructList[BytecodeCache_has_Params]

// NewBytecodeCache_has_Params creates a new list of BytecodeCache_has_Params.
func NewBytecodeCache_has_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_has_Params](l), err
}

// BytecodeCache_has_Params_Future is a wrapper for a BytecodeCache_has_Params promised by a client call.
type BytecodeCache_has_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Params_Future) Struct() (BytecodeCache_has_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Params(p.Struct()), err
}

type BytecodeCache_has_Results capnp.Struct

// BytecodeCache_has_Results_TypeID is the unique identifier for the type BytecodeCache_has_Results.
const BytecodeCache_has_Results_TypeID = 0xf9602cd2c3f65e0f

func NewBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func NewRootBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func ReadRootBytecodeCache_has_Results(msg *capnp.Message) (BytecodeCache_has_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Results(root.Struct()), err
}

func (s BytecodeCache_has_Results) String() string {
	str, _ := text.Marshal(0xf9602cd2c3f65e0f, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Results {
	return BytecodeCache_has_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Results) Has() bool {
	return capnp.Struct(s).Bit(0)
}

func (s BytecodeCache_has_Results) SetHas(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// BytecodeCache_has_Results_List is a list of BytecodeCache_has_Results.
type BytecodeCache_has_Results_List = capnp.StructList[BytecodeCache_has_Results]

// NewBytecodeCache_has_Results creates a new list of BytecodeCache_has_Results.
func NewBytecodeCache_has_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BytecodeCache_has_Results](l), err
}

// BytecodeCache_has_Results_Future is a wrapper for a BytecodeCache_has_Results promised by a client call.
type BytecodeCache_has_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Results_Future) Struct() (BytecodeCache_has_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Results(p.Struct()), err
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release

}

func (c Process) Kill(ctx context.Context, params func(Process_kill_Params) error) (Process_kill_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_kill_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_kill_Results_Future{Future: ans.Future()}, release

}

func (c Process) Link(ctx context.Context, params func(Process_link_Params) error) (Process_link_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "link",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_link_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_link_Results_Future{Future: ans.Future()}, release

}

func (c Process) Unlink(ctx context.Context, params func(Process_unlink_Params) error) (Process_unlink_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      3,
			InterfaceName: "process.capnp:Process",
			MethodName:    "unlink",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_unlink_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_unlink_Results_Future{Future: ans.Future()}, release

}

func (c Process) LinkLocal(ctx context.Context, params func(Process_linkLocal_Params) error) (Process_linkLocal_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      4,
			InterfaceName: "process.capnp:Process",
			MethodName:    "linkLocal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_linkLocal_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_linkLocal_Results_Future{Future: ans.Future()}, release

}

func (c Process) UnlinkLocal(ctx context.Context, params func(Process_unlinkLocal_Params) error) (Process_unlinkLocal_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      5,
			InterfaceName: "process.capnp:Process",
			MethodName:    "unlinkLocal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_unlinkLocal_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_unlinkLocal_Results_Future{Future: ans.Future()}, release

}

func (c Process) Monitor(ctx context.Context, params func(Process_monitor_Params) error) (Process_monitor_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      6,
			InterfaceName: "process.capnp:Process",
			MethodName:    "monitor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_monitor_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_monitor_Results_Future{Future: ans.Future()}, release

}

func (c Process) Pause(ctx context.Context, params func(Process_pause_Params) error) (Process_pause_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      7,
			InterfaceName: "process.capnp:Process",
			MethodName:    "pause",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_pause_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_pause_Results_Future{Future: ans.Future()}, release

}

func (c Process) Resume(ctx context.Context, params func(Process_resume_Params) error) (Process_resume_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      8,
			InterfaceName: "process.capnp:Process",
			MethodName:    "resume",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_resume_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_resume_Results_Future{Future: ans.Future()}, release

}

func (c Process) Id(ctx context.Context, params func(Process_id_Params) error) (Process_id_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      9,
			InterfaceName: "process.capnp:Process",
			MethodName:    "id",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_id_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_id_Results_Future{Future: ans.Future()}, release

}

func (c Process) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return "Process(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Wait(context.Context, Process_wait) error

	Kill(context.Context, Process_kill) error

	Link(context.Context, Process_link) error

	Unlink(context.Context, Process_unlink) error

	LinkLocal(context.Context, Process_linkLocal) error

	UnlinkLocal(context.Context, Process_unlinkLocal) error

	Monitor(context.Context, Process_monitor) error

	Pause(context.Context, Process_pause) error

	Resume(context.Context, Process_resume) error

	Id(context.Context, Process_id) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 10)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Kill(ctx, Process_kill{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "link",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Link(ctx, Process_link{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      3,
			InterfaceName: "process.capnp:Process",
			MethodName:    "unlink",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlink(ctx, Process_unlink{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      4,
			InterfaceName: "process.capnp:Process",
			MethodName:    "linkLocal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.LinkLocal(ctx, Process_linkLocal{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      5,
			InterfaceName: "process.capnp:Process",
			MethodName:    "unlinkLocal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.UnlinkLocal(ctx, Process_unlinkLocal{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      6,
			InterfaceName: "process.capnp:Process",
			MethodName:    "monitor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Monitor(ctx, Process_monitor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      7,
			InterfaceName: "process.capnp:Process",
			MethodName:    "pause",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pause(ctx, Process_pause{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      8,
			InterfaceName: "process.capnp:Process",
			MethodName:    "resume",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resume(ctx, Process_resume{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      9,
			InterfaceName: "process.capnp:Process",
			MethodName:    "id",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Id(ctx, Process_id{call})
		},
	})

	return methods
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(r), err
}

// Process_kill holds the state for a server call to Process.kill.
// See server.Call for documentation.
type Process_kill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_kill) Args() Process_kill_Params {
	return Process_kill_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_kill) AllocResults() (Process_kill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(r), err
}

// Process_link holds the state for a server call to Process.link.
// See server.Call for documentation.
type Process_link struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_link) Args() Process_link_Params {
	return Process_link_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_link) AllocResults() (Process_link_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_link_Results(r), err
}

// Process_unlink holds the state for a server call to Process.unlink.
// See server.Call for documentation.
type Process_unlink struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_unlink) Args() Process_unlink_Params {
	return Process_unlink_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_unlink) AllocResults() (Process_unlink_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlink_Results(r), err
}

// Process_linkLocal holds the state for a server call to Process.linkLocal.
// See server.Call for documentation.
type Process_linkLocal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_linkLocal) Args() Process_linkLocal_Params {
	return Process_linkLocal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_linkLocal) AllocResults() (Process_linkLocal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_linkLocal_Results(r), err
}

// Process_unlinkLocal holds the state for a server call to Process.unlinkLocal.
// See server.Call for documentation.
type Process_unlinkLocal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_unlinkLocal) Args() Process_unlinkLocal_Params {
	return Process_unlinkLocal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_unlinkLocal) AllocResults() (Process_unlinkLocal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlinkLocal_Results(r), err
}

// Process_monitor holds the state for a server call to Process.monitor.
// See server.Call for documentation.
type Process_monitor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_monitor) Args() Process_monitor_Params {
	return Process_monitor_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_monitor) AllocResults() (Process_monitor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_monitor_Results(r), err
}

// Process_pause holds the state for a server call to Process.pause.
// See server.Call for documentation.
type Process_pause struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_pause) Args() Process_pause_Params {
	return Process_pause_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_pause) AllocResults() (Process_pause_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Results(r), err
}

// Process_resume holds the state for a server call to Process.resume.
// See server.Call for documentation.
type Process_resume struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_resume) Args() Process_resume_Params {
	return Process_resume_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_resume) AllocResults() (Process_resume_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Results(r), err
}

// Process_id holds the state for a server call to Process.id.
// See server.Call for documentation.
type Process_id struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_id) Args() Process_id_Params {
	return Process_id_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_id) AllocResults() (Process_id_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_id_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_wait_Results) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}

type Process_kill_Params capnp.Struct

// Process_kill_Params_TypeID is the unique identifier for the type Process_kill_Params.
const Process_kill_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func NewRootProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func ReadRootProcess_kill_Params(msg *capnp.Message) (Process_kill_Params, error) {
	root, err := msg.Root()
	return Process_kill_Params(root.Struct()), err
}

func (s Process_kill_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_kill_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Params) DecodeFromPtr(p capnp.Ptr) Process_kill_Params {
	return Process_kill_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Params_List is a list of Process_kill_Params.
type Process_kill_Params_List = capnp.StructList[Process_kill_Params]

// NewProcess_kill_Params creates a new list of Process_kill_Params.
func NewProcess_kill_Params_List(s *capnp.Segment, sz int32) (Process_kill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Params](l), err
}

// Process_kill_Params_Future is a wrapper for a Process_kill_Params promised by a client call.
type Process_kill_Params_Future struct{ *capnp.Future }

func (f Process_kill_Params_Future) Struct() (Process_kill_Params, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Params(p.Struct()), err
}

type Process_kill_Results capnp.Struct

// Process_kill_Results_TypeID is the unique identifier for the type Process_kill_Results.
const Process_kill_Results_TypeID = 0xc53168b273d497ee

func NewProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func NewRootProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func ReadRootProcess_kill_Results(msg *capnp.Message) (Process_kill_Results, error) {
	root, err := msg.Root()
	return Process_kill_Results(root.Struct()), err
}

func (s Process_kill_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_kill_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Results) DecodeFromPtr(p capnp.Ptr) Process_kill_Results {
	return Process_kill_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Results_List is a list of Process_kill_Results.
type Process_kill_Results_List = capnp.StructList[Process_kill_Results]

// NewProcess_kill_Results creates a new list of Process_kill_Results.
func NewProcess_kill_Results_List(s *capnp.Segment, sz int32) (Process_kill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Results](l), err
}

// Process_kill_Results_Future is a wrapper for a Process_kill_Results promised by a client call.
type Process_kill_Results_Future struct{ *capnp.Future }

func (f Process_kill_Results_Future) Struct() (Process_kill_Results, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Results(p.Struct()), err
}

type Process_link_Params capnp.Struct

// Process_link_Params_TypeID is the unique identifier for the type Process_link_Params.
const Process_link_Params_TypeID = 0xd22f75df06c187e8

func NewProcess_link_Params(s *capnp.Segment) (Process_link_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Process_link_Params(st), err
}

func NewRootProcess_link_Params(s *capnp.Segment) (Process_link_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Process_link_Params(st), err
}

func ReadRootProcess_link_Params(msg *capnp.Message) (Process_link_Params, error) {
	root, err := msg.Root()
	return Process_link_Params(root.Struct()), err
}

func (s Process_link_Params) String() string {
	str, _ := text.Marshal(0xd22f75df06c187e8, capnp.Struct(s))
	return str
}

func (s Process_link_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_link_Params) DecodeFromPtr(p capnp.Ptr) Process_link_Params {
	return Process_link_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_link_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_link_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_link_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_link_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_link_Params) Other() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Process_link_Params) HasOther() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Process_link_Params) SetOther(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Process_link_Params) Roundtrip() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Process_link_Params) SetRoundtrip(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Process_link_Params_List is a list of Process_link_Params.
type Process_link_Params_List = capnp.StructList[Process_link_Params]

// NewProcess_link_Params creates a new list of Process_link_Params.
func NewProcess_link_Params_List(s *capnp.Segment, sz int32) (Process_link_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Process_link_Params](l), err
}

// Process_link_Params_Future is a wrapper for a Process_link_Params promised by a client call.
type Process_link_Params_Future struct{ *capnp.Future }

func (f Process_link_Params_Future) Struct() (Process_link_Params, error) {
	p, err := f.Future.Ptr()
	return Process_link_Params(p.Struct()), err
}
func (p Process_link_Params_Future) Other() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Process_link_Results capnp.Struct

// Process_link_Results_TypeID is the unique identifier for the type Process_link_Results.
const Process_link_Results_TypeID = 0x9d6074459fa0602b

func NewProcess_link_Results(s *capnp.Segment) (Process_link_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_link_Results(st), err
}

func NewRootProcess_link_Results(s *capnp.Segment) (Process_link_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_link_Results(st), err
}

func ReadRootProcess_link_Results(msg *capnp.Message) (Process_link_Results, error) {
	root, err := msg.Root()
	return Process_link_Results(root.Struct()), err
}

func (s Process_link_Results) String() string {
	str, _ := text.Marshal(0x9d6074459fa0602b, capnp.Struct(s))
	return str
}

func (s Process_link_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_link_Results) DecodeFromPtr(p capnp.Ptr) Process_link_Results {
	return Process_link_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_link_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_link_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_link_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_link_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_link_Results_List is a list of Process_link_Results.
type Process_link_Results_List = capnp.StructList[Process_link_Results]

// NewProcess_link_Results creates a new list of Process_link_Results.
func NewProcess_link_Results_List(s *capnp.Segment, sz int32) (Process_link_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_link_Results](l), err
}

// Process_link_Results_Future is a wrapper for a Process_link_Results promised by a client call.
type Process_link_Results_Future struct{ *capnp.Future }

func (f Process_link_Results_Future) Struct() (Process_link_Results, error) {
	p, err := f.Future.Ptr()
	return Process_link_Results(p.Struct()), err
}

type Process_unlink_Params capnp.Struct

// Process_unlink_Params_TypeID is the unique identifier for the type Process_unlink_Params.
const Process_unlink_Params_TypeID = 0x86e3410d1abd406b

func NewProcess_unlink_Params(s *capnp.Segment) (Process_unlink_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Process_unlink_Params(st), err
}

func NewRootProcess_unlink_Params(s *capnp.Segment) (Process_unlink_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Process_unlink_Params(st), err
}

func ReadRootProcess_unlink_Params(msg *capnp.Message) (Process_unlink_Params, error) {
	root, err := msg.Root()
	return Process_unlink_Params(root.Struct()), err
}

func (s Process_unlink_Params) String() string {
	str, _ := text.Marshal(0x86e3410d1abd406b, capnp.Struct(s))
	return str
}

func (s Process_unlink_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_unlink_Params) DecodeFromPtr(p capnp.Ptr) Process_unlink_Params {
	return Process_unlink_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_unlink_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_unlink_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_unlink_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_unlink_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_unlink_Params) Other() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Process_unlink_Params) HasOther() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Process_unlink_Params) SetOther(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Process_unlink_Params) Roundtrip() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Process_unlink_Params) SetRoundtrip(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Process_unlink_Params_List is a list of Process_unlink_Params.
type Process_unlink_Params_List = capnp.StructList[Process_unlink_Params]

// NewProcess_unlink_Params creates a new list of Process_unlink_Params.
func NewProcess_unlink_Params_List(s *capnp.Segment, sz int32) (Process_unlink_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Process_unlink_Params](l), err
}

// Process_unlink_Params_Future is a wrapper for a Process_unlink_Params promised by a client call.
type Process_unlink_Params_Future struct{ *capnp.Future }

func (f Process_unlink_Params_Future) Struct() (Process_unlink_Params, error) {
	p, err := f.Future.Ptr()
	return Process_unlink_Params(p.Struct()), err
}
func (p Process_unlink_Params_Future) Other() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Process_unlink_Results capnp.Struct

// Process_unlink_Results_TypeID is the unique identifier for the type Process_unlink_Results.
const Process_unlink_Results_TypeID = 0xd93c9aa0627bc93c

func NewProcess_unlink_Results(s *capnp.Segment) (Process_unlink_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlink_Results(st), err
}

func NewRootProcess_unlink_Results(s *capnp.Segment) (Process_unlink_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlink_Results(st), err
}

func ReadRootProcess_unlink_Results(msg *capnp.Message) (Process_unlink_Results, error) {
	root, err := msg.Root()
	return Process_unlink_Results(root.Struct()), err
}

func (s Process_unlink_Results) String() string {
	str, _ := text.Marshal(0xd93c9aa0627bc93c, capnp.Struct(s))
	return str
}

func (s Process_unlink_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_unlink_Results) DecodeFromPtr(p capnp.Ptr) Process_unlink_Results {
	return Process_unlink_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_unlink_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_unlink_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_unlink_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_unlink_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_unlink_Results_List is a list of Process_unlink_Results.
type Process_unlink_Results_List = capnp.StructList[Process_unlink_Results]

// NewProcess_unlink_Results creates a new list of Process_unlink_Results.
func NewProcess_unlink_Results_List(s *capnp.Segment, sz int32) (Process_unlink_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_unlink_Results](l), err
}

// Process_unlink_Results_Future is a wrapper for a Process_unlink_Results promised by a client call.
type Process_unlink_Results_Future struct{ *capnp.Future }

func (f Process_unlink_Results_Future) Struct() (Process_unlink_Results, error) {
	p, err := f.Future.Ptr()
	return Process_unlink_Results(p.Struct()), err
}

type Process_linkLocal_Params capnp.Struct

// Process_linkLocal_Params_TypeID is the unique identifier for the type Process_linkLocal_Params.
const Process_linkLocal_Params_TypeID = 0xb72541d950858a60

func NewProcess_linkLocal_Params(s *capnp.Segment) (Process_linkLocal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_linkLocal_Params(st), err
}

func NewRootProcess_linkLocal_Params(s *capnp.Segment) (Process_linkLocal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_linkLocal_Params(st), err
}

func ReadRootProcess_linkLocal_Params(msg *capnp.Message) (Process_linkLocal_Params, error) {
	root, err := msg.Root()
	return Process_linkLocal_Params(root.Struct()), err
}

func (s Process_linkLocal_Params) String() string {
	str, _ := text.Marshal(0xb72541d950858a60, capnp.Struct(s))
	return str
}

func (s Process_linkLocal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_linkLocal_Params) DecodeFromPtr(p capnp.Ptr) Process_linkLocal_Params {
	return Process_linkLocal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_linkLocal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_linkLocal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_linkLocal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_linkLocal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_linkLocal_Params) Other() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_linkLocal_Params) SetOther(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_linkLocal_Params_List is a list of Process_linkLocal_Params.
type Process_linkLocal_Params_List = capnp.StructList[Process_linkLocal_Params]

// NewProcess_linkLocal_Params creates a new list of Process_linkLocal_Params.
func NewProcess_linkLocal_Params_List(s *capnp.Segment, sz int32) (Process_linkLocal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_linkLocal_Params](l), err
}

// Process_linkLocal_Params_Future is a wrapper for a Process_linkLocal_Params promised by a client call.
type Process_linkLocal_Params_Future struct{ *capnp.Future }

func (f Process_linkLocal_Params_Future) Struct() (Process_linkLocal_Params, error) {
	p, err := f.Future.Ptr()
	return Process_linkLocal_Params(p.Struct()), err
}

type Process_linkLocal_Results capnp.Struct

// Process_linkLocal_Results_TypeID is the unique identifier for the type Process_linkLocal_Results.
const Process_linkLocal_Results_TypeID = 0xf589dc1668ea3d8f

func NewProcess_linkLocal_Results(s *capnp.Segment) (Process_linkLocal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_linkLocal_Results(st), err
}

func NewRootProcess_linkLocal_Results(s *capnp.Segment) (Process_linkLocal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_linkLocal_Results(st), err
}

func ReadRootProcess_linkLocal_Results(msg *capnp.Message) (Process_linkLocal_Results, error) {
	root, err := msg.Root()
	return Process_linkLocal_Results(root.Struct()), err
}

func (s Process_linkLocal_Results) String() string {
	str, _ := text.Marshal(0xf589dc1668ea3d8f, capnp.Struct(s))
	return str
}

func (s Process_linkLocal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_linkLocal_Results) DecodeFromPtr(p capnp.Ptr) Process_linkLocal_Results {
	return Process_linkLocal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_linkLocal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_linkLocal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_linkLocal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_linkLocal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_linkLocal_Results_List is a list of Process_linkLocal_Results.
type Process_linkLocal_Results_List = capnp.StructList[Process_linkLocal_Results]

// NewProcess_linkLocal_Results creates a new list of Process_linkLocal_Results.
func NewProcess_linkLocal_Results_List(s *capnp.Segment, sz int32) (Process_linkLocal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_linkLocal_Results](l), err
}

// Process_linkLocal_Results_Future is a wrapper for a Process_linkLocal_Results promised by a client call.
type Process_linkLocal_Results_Future struct{ *capnp.Future }

func (f Process_linkLocal_Results_Future) Struct() (Process_linkLocal_Results, error) {
	p, err := f.Future.Ptr()
	return Process_linkLocal_Results(p.Struct()), err
}

type Process_unlinkLocal_Params capnp.Struct

// Process_unlinkLocal_Params_TypeID is the unique identifier for the type Process_unlinkLocal_Params.
const Process_unlinkLocal_Params_TypeID = 0xf5c2d7ad2dde5570

func NewProcess_unlinkLocal_Params(s *capnp.Segment) (Process_unlinkLocal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_unlinkLocal_Params(st), err
}

func NewRootProcess_unlinkLocal_Params(s *capnp.Segment) (Process_unlinkLocal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_unlinkLocal_Params(st), err
}

func ReadRootProcess_unlinkLocal_Params(msg *capnp.Message) (Process_unlinkLocal_Params, error) {
	root, err := msg.Root()
	return Process_unlinkLocal_Params(root.Struct()), err
}

func (s Process_unlinkLocal_Params) String() string {
	str, _ := text.Marshal(0xf5c2d7ad2dde5570, capnp.Struct(s))
	return str
}

func (s Process_unlinkLocal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_unlinkLocal_Params) DecodeFromPtr(p capnp.Ptr) Process_unlinkLocal_Params {
	return Process_unlinkLocal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_unlinkLocal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_unlinkLocal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_unlinkLocal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_unlinkLocal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_unlinkLocal_Params) Other() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_unlinkLocal_Params) SetOther(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_unlinkLocal_Params_List is a list of Process_unlinkLocal_Params.
type Process_unlinkLocal_Params_List = capnp.StructList[Process_unlinkLocal_Params]

// NewProcess_unlinkLocal_Params creates a new list of Process_unlinkLocal_Params.
func NewProcess_unlinkLocal_Params_List(s *capnp.Segment, sz int32) (Process_unlinkLocal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_unlinkLocal_Params](l), err
}

// Process_unlinkLocal_Params_Future is a wrapper for a Process_unlinkLocal_Params promised by a client call.
type Process_unlinkLocal_Params_Future struct{ *capnp.Future }

func (f Process_unlinkLocal_Params_Future) Struct() (Process_unlinkLocal_Params, error) {
	p, err := f.Future.Ptr()
	return Process_unlinkLocal_Params(p.Struct()), err
}

type Process_unlinkLocal_Results capnp.Struct

// Process_unlinkLocal_Results_TypeID is the unique identifier for the type Process_unlinkLocal_Results.
const Process_unlinkLocal_Results_TypeID = 0xeafb60603769c851

func NewProcess_unlinkLocal_Results(s *capnp.Segment) (Process_unlinkLocal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlinkLocal_Results(st), err
}

func NewRootProcess_unlinkLocal_Results(s *capnp.Segment) (Process_unlinkLocal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlinkLocal_Results(st), err
}

func ReadRootProcess_unlinkLocal_Results(msg *capnp.Message) (Process_unlinkLocal_Results, error) {
	root, err := msg.Root()
	return Process_unlinkLocal_Results(root.Struct()), err
}

func (s Process_unlinkLocal_Results) String() string {
	str, _ := text.Marshal(0xeafb60603769c851, capnp.Struct(s))
	return str
}

func (s Process_unlinkLocal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_unlinkLocal_Results) DecodeFromPtr(p capnp.Ptr) Process_unlinkLocal_Results {
	return Process_unlinkLocal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_unlinkLocal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_unlinkLocal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_unlinkLocal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_unlinkLocal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_unlinkLocal_Results_List is a list of Process_unlinkLocal_Results.
type Process_unlinkLocal_Results_List = capnp.StructList[Process_unlinkLocal_Results]

// NewProcess_unlinkLocal_Results creates a new list of Process_unlinkLocal_Results.
func NewProcess_unlinkLocal_Results_List(s *capnp.Segment, sz int32) (Process_unlinkLocal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_unlinkLocal_Results](l), err
}

// Process_unlinkLocal_Results_Future is a wrapper for a Process_unlinkLocal_Results promised by a client call.
type Process_unlinkLocal_Results_Future struct{ *capnp.Future }

func (f Process_unlinkLocal_Results_Future) Struct() (Process_unlinkLocal_Results, error) {
	p, err := f.Future.Ptr()
	return Process_unlinkLocal_Results(p.Struct()), err
}

type Process_monitor_Params capnp.Struct

// Process_monitor_Params_TypeID is the unique identifier for the type Process_monitor_Params.
const Process_monitor_Params_TypeID = 0xc7e357fd7b4cb277

func NewProcess_monitor_Params(s *capnp.Segment) (Process_monitor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_monitor_Params(st), err
}

func NewRootProcess_monitor_Params(s *capnp.Segment) (Process_monitor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_monitor_Params(st), err
}

func ReadRootProcess_monitor_Params(msg *capnp.Message) (Process_monitor_Params, error) {
	root, err := msg.Root()
	return Process_monitor_Params(root.Struct()), err
}

func (s Process_monitor_Params) String() string {
	str, _ := text.Marshal(0xc7e357fd7b4cb277, capnp.Struct(s))
	return str
}

func (s Process_monitor_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_monitor_Params) DecodeFromPtr(p capnp.Ptr) Process_monitor_Params {
	return Process_monitor_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_monitor_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_monitor_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_monitor_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_monitor_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_monitor_Params_List is a list of Process_monitor_Params.
type Process_monitor_Params_List = capnp.StructList[Process_monitor_Params]

// NewProcess_monitor_Params creates a new list of Process_monitor_Params.
func NewProcess_monitor_Params_List(s *capnp.Segment, sz int32) (Process_monitor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_monitor_Params](l), err
}

// Process_monitor_Params_Future is a wrapper for a Process_monitor_Params promised by a client call.
type Process_monitor_Params_Future struct{ *capnp.Future }

func (f Process_monitor_Params_Future) Struct() (Process_monitor_Params, error) {
	p, err := f.Future.Ptr()
	return Process_monitor_Params(p.Struct()), err
}

type Process_monitor_Results capnp.Struct

// Process_monitor_Results_TypeID is the unique identifier for the type Process_monitor_Results.
const Process_monitor_Results_TypeID = 0xbb9ef870419ecb71

func NewProcess_monitor_Results(s *capnp.Segment) (Process_monitor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_monitor_Results(st), err
}

func NewRootProcess_monitor_Results(s *capnp.Segment) (Process_monitor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_monitor_Results(st), err
}

func ReadRootProcess_monitor_Results(msg *capnp.Message) (Process_monitor_Results, error) {
	root, err := msg.Root()
	return Process_monitor_Results(root.Struct()), err
}

func (s Process_monitor_Results) String() string {
	str, _ := text.Marshal(0xbb9ef870419ecb71, capnp.Struct(s))
	return str
}

func (s Process_monitor_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_monitor_Results) DecodeFromPtr(p capnp.Ptr) Process_monitor_Results {
	return Process_monitor_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_monitor_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_monitor_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_monitor_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_monitor_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_monitor_Results) Event() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Process_monitor_Results) HasEvent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Process_monitor_Results) EventBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Process_monitor_Results) SetEvent(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Process_monitor_Results_List is a list of Process_monitor_Results.
type Process_monitor_Results_List = capnp.StructList[Process_monitor_Results]

// NewProcess_monitor_Results creates a new list of Process_monitor_Results.
func NewProcess_monitor_Results_List(s *capnp.Segment, sz int32) (Process_monitor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Process_monitor_Results](l), err
}

// Process_monitor_Results_Future is a wrapper for a Process_monitor_Results promised by a client call.
type Process_monitor_Results_Future struct{ *capnp.Future }

func (f Process_monitor_Results_Future) Struct() (Process_monitor_Results, error) {
	p, err := f.Future.Ptr()
	return Process_monitor_Results(p.Struct()), err
}

type Process_pause_Params capnp.Struct

// Process_pause_Params_TypeID is the unique identifier for the type Process_pause_Params.
const Process_pause_Params_TypeID = 0xe49628d0fca1d961

func NewProcess_pause_Params(s *capnp.Segment) (Process_pause_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Params(st), err
}

func NewRootProcess_pause_Params(s *capnp.Segment) (Process_pause_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Params(st), err
}

func ReadRootProcess_pause_Params(msg *capnp.Message) (Process_pause_Params, error) {
	root, err := msg.Root()
	return Process_pause_Params(root.Struct()), err
}

func (s Process_pause_Params) String() string {
	str, _ := text.Marshal(0xe49628d0fca1d961, capnp.Struct(s))
	return str
}

func (s Process_pause_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_pause_Params) DecodeFromPtr(p capnp.Ptr) Process_pause_Params {
	return Process_pause_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_pause_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_pause_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_pause_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_pause_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_pause_Params_List is a list of Process_pause_Params.
type Process_pause_Params_List = capnp.StructList[Process_pause_Params]

// NewProcess_pause_Params creates a new list of Process_pause_Params.
func NewProcess_pause_Params_List(s *capnp.Segment, sz int32) (Process_pause_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_pause_Params](l), err
}

// Process_pause_Params_Future is a wrapper for a Process_pause_Params promised by a client call.
type Process_pause_Params_Future struct{ *capnp.Future }

func (f Process_pause_Params_Future) Struct() (Process_pause_Params, error) {
	p, err := f.Future.Ptr()
	return Process_pause_Params(p.Struct()), err
}

type Process_pause_Results capnp.Struct

// Process_pause_Results_TypeID is the unique identifier for the type Process_pause_Results.
const Process_pause_Results_TypeID = 0xc09f176286f9e884

func NewProcess_pause_Results(s *capnp.Segment) (Process_pause_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Results(st), err
}

func NewRootProcess_pause_Results(s *capnp.Segment) (Process_pause_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_pause_Results(st), err
}

func ReadRootProcess_pause_Results(msg *capnp.Message) (Process_pause_Results, error) {
	root, err := msg.Root()
	return Process_pause_Results(root.Struct()), err
}

func (s Process_pause_Results) String() string {
	str, _ := text.Marshal(0xc09f176286f9e884, capnp.Struct(s))
	return str
}

func (s Process_pause_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_pause_Results) DecodeFromPtr(p capnp.Ptr) Process_pause_Results {
	return Process_pause_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_pause_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_pause_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_pause_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_pause_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_pause_Results_List is a list of Process_pause_Results.
type Process_pause_Results_List = capnp.StructList[Process_pause_Results]

// NewProcess_pause_Results creates a new list of Process_pause_Results.
func NewProcess_pause_Results_List(s *capnp.Segment, sz int32) (Process_pause_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_pause_Results](l), err
}

// Process_pause_Results_Future is a wrapper for a Process_pause_Results promised by a client call.
type Process_pause_Results_Future struct{ *capnp.Future }

func (f Process_pause_Results_Future) Struct() (Process_pause_Results, error) {
	p, err := f.Future.Ptr()
	return Process_pause_Results(p.Struct()), err
}

type Process_resume_Params capnp.Struct

// Process_resume_Params_TypeID is the unique identifier for the type Process_resume_Params.
const Process_resume_Params_TypeID = 0xffd9ede88fe29780

func NewProcess_resume_Params(s *capnp.Segment) (Process_resume_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Params(st), err
}

func NewRootProcess_resume_Params(s *capnp.Segment) (Process_resume_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Params(st), err
}

func ReadRootProcess_resume_Params(msg *capnp.Message) (Process_resume_Params, error) {
	root, err := msg.Root()
	return Process_resume_Params(root.Struct()), err
}

func (s Process_resume_Params) String() string {
	str, _ := text.Marshal(0xffd9ede88fe29780, capnp.Struct(s))
	return str
}

func (s Process_resume_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_resume_Params) DecodeFromPtr(p capnp.Ptr) Process_resume_Params {
	return Process_resume_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_resume_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_resume_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_resume_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_resume_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_resume_Params_List is a list of Process_resume_Params.
type Process_resume_Params_List = capnp.StructList[Process_resume_Params]

// NewProcess_resume_Params creates a new list of Process_resume_Params.
func NewProcess_resume_Params_List(s *capnp.Segment, sz int32) (Process_resume_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_resume_Params](l), err
}

// Process_resume_Params_Future is a wrapper for a Process_resume_Params promised by a client call.
type Process_resume_Params_Future struct{ *capnp.Future }

func (f Process_resume_Params_Future) Struct() (Process_resume_Params, error) {
	p, err := f.Future.Ptr()
	return Process_resume_Params(p.Struct()), err
}

type Process_resume_Results capnp.Struct

// Process_resume_Results_TypeID is the unique identifier for the type Process_resume_Results.
const Process_resume_Results_TypeID = 0xa57c12075589e51f

func NewProcess_resume_Results(s *capnp.Segment) (Process_resume_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Results(st), err
}

func NewRootProcess_resume_Results(s *capnp.Segment) (Process_resume_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_resume_Results(st), err
}

func ReadRootProcess_resume_Results(msg *capnp.Message) (Process_resume_Results, error) {
	root, err := msg.Root()
	return Process_resume_Results(root.Struct()), err
}

func (s Process_resume_Results) String() string {
	str, _ := text.Marshal(0xa57c12075589e51f, capnp.Struct(s))
	return str
}

func (s Process_resume_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_resume_Results) DecodeFromPtr(p capnp.Ptr) Process_resume_Results {
	return Process_resume_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_resume_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_resume_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_resume_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_resume_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_resume_Results_List is a list of Process_resume_Results.
type Process_resume_Results_List = capnp.StructList[Process_resume_Results]

// NewProcess_resume_Results creates a new list of Process_resume_Results.
func NewProcess_resume_Results_List(s *capnp.Segment, sz int32) (Process_resume_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_resume_Results](l), err
}

// Process_resume_Results_Future is a wrapper for a Process_resume_Results promised by a client call.
type Process_resume_Results_Future struct{ *capnp.Future }

func (f Process_resume_Results_Future) Struct() (Process_resume_Results, error) {
	p, err := f.Future.Ptr()
	return Process_resume_Results(p.Struct()), err
}

type Process_id_Params capnp.Struct

// Process_id_Params_TypeID is the unique identifier for the type Process_id_Params.
const Process_id_Params_TypeID = 0xf71688c8ab425227

func NewProcess_id_Params(s *capnp.Segment) (Process_id_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_id_Params(st), err
}

func NewRootProcess_id_Params(s *capnp.Segment) (Process_id_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_id_Params(st), err
}

func ReadRootProcess_id_Params(msg *capnp.Message) (Process_id_Params, error) {
	root, err := msg.Root()
	return Process_id_Params(root.Struct()), err
}

func (s Process_id_Params) String() string {
	str, _ := text.Marshal(0xf71688c8ab425227, capnp.Struct(s))
	return str
}

func (s Process_id_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_id_Params) DecodeFromPtr(p capnp.Ptr) Process_id_Params {
	return Process_id_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_id_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_id_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_id_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_id_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_id_Params_List is a list of Process_id_Params.
type Process_id_Params_List = capnp.StructList[Process_id_Params]

// NewProcess_id_Params creates a new list of Process_id_Params.
func NewProcess_id_Params_List(s *capnp.Segment, sz int32) (Process_id_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_id_Params](l), err
}

// Process_id_Params_Future is a wrapper for a Process_id_Params promised by a client call.
type Process_id_Params_Future struct{ *capnp.Future }

func (f Process_id_Params_Future) Struct() (Process_id_Params, error) {
	p, err := f.Future.Ptr()
	return Process_id_Params(p.Struct()), err
}

type Process_id_Results capnp.Struct

// Process_id_Results_TypeID is the unique identifier for the type Process_id_Results.
const Process_id_Results_TypeID = 0xd7c1a6c2a1b42df0

func NewProcess_id_Results(s *capnp.Segment) (Process_id_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_id_Results(st), err
}

func NewRootProcess_id_Results(s *capnp.Segment) (Process_id_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_id_Results(st), err
}

func ReadRootProcess_id_Results(msg *capnp.Message) (Process_id_Results, error) {
	root, err := msg.Root()
	return Process_id_Results(root.Struct()), err
}

func (s Process_id_Results) String() string {
	str, _ := text.Marshal(0xd7c1a6c2a1b42df0, capnp.Struct(s))
	return str
}

func (s Process_id_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_id_Results) DecodeFromPtr(p capnp.Ptr) Process_id_Results {
	return Process_id_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_id_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_id_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_id_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_id_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_id_Results) Id() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Process_id_Results) SetId(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Process_id_Results_List is a list of Process_id_Results.
type Process_id_Results_List = capnp.StructList[Process_id_Results]

// NewProcess_id_Results creates a new list of Process_id_Results.
func NewProcess_id_Results_List(s *capnp.Segment, sz int32) (Process_id_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_id_Results](l), err
}

// Process_id_Results_Future is a wrapper for a Process_id_Results promised by a client call.
type Process_id_Results_Future struct{ *capnp.Future }

func (f Process_id_Results_Future) Struct() (Process_id_Results, error) {
	p, err := f.Future.Ptr()
	return Process_id_Results(p.Struct()), err
}

type Info capnp.Struct

// Info_TypeID is the unique identifier for the type Info.
const Info_TypeID = 0xc3153fa5a13d8a26

func NewInfo(s *capnp.Segment) (Info, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Info(st), err
}

func NewRootInfo(s *capnp.Segment) (Info, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Info(st), err
}

func ReadRootInfo(msg *capnp.Message) (Info, error) {
	root, err := msg.Root()
	return Info(root.Struct()), err
}

func (s Info) String() string {
	str, _ := text.Marshal(0xc3153fa5a13d8a26, capnp.Struct(s))
	return str
}

func (s Info) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Info) DecodeFromPtr(p capnp.Ptr) Info {
	return Info(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Info) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Info) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Info) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Info) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Info) Pid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Info) SetPid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Info) Ppid() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Info) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Info) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Info) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Info) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Info) Argv() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Info) HasArgv() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Info) SetArgv(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewArgv sets the argv field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Info) NewArgv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Info) Time() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Info) SetTime(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// Info_List is a list of Info.
type Info_List = capnp.StructList[Info]

// NewInfo creates a new list of Info.
func NewInfo_List(s *capnp.Segment, sz int32) (Info_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Info](l), err
}

// Info_Future is a wrapper for a Info promised by a client call.
type Info_Future struct{ *capnp.Future }

func (f Info_Future) Struct() (Info, error) {
	p, err := f.Future.Ptr()
	return Info(p.Struct()), err
}

type Events capnp.Client

// Events_TypeID is the unique identifier for the type Events.
const Events_TypeID = 0xe9b5ea42655a6266

func (c Events) Pause(ctx context.Context, params func(Events_pause_Params) error) (Events_pause_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      0,
			InterfaceName: "process.capnp:Events",
			MethodName:    "pause",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Events_pause_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Events_pause_Results_Future{Future: ans.Future()}, release

}

func (c Events) Resume(ctx context.Context, params func(Events_resume_Params) error) (Events_resume_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      1,
			InterfaceName: "process.capnp:Events",
			MethodName:    "resume",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Events_resume_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Events_resume_Results_Future{Future: ans.Future()}, release

}

func (c Events) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Events) String() string {
	return "Events(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Events) AddRef() Events {
	return Events(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Events) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Events) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Events) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Events) DecodeFromPtr(p capnp.Ptr) Events {
	return Events(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Events) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Events) IsSame(other Events) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Events) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Events) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Events_Server is a Events with a local implementation.
type Events_Server interface {
	Pause(context.Context, Events_pause) error

	Resume(context.Context, Events_resume) error
}

// Events_NewServer creates a new Server from an implementation of Events_Server.
func Events_NewServer(s Events_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Events_Methods(nil, s), s, c)
}

// Events_ServerToClient creates a new Client from an implementation of Events_Server.
// The caller is responsible for calling Release on the returned Client.
func Events_ServerToClient(s Events_Server) Events {
	return Events(capnp.NewClient(Events_NewServer(s)))
}

// Events_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Events_Methods(methods []server.Method, s Events_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      0,
			InterfaceName: "process.capnp:Events",
			MethodName:    "pause",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pause(ctx, Events_pause{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9b5ea42655a6266,
			MethodID:      1,
			InterfaceName: "process.capnp:Events",
			MethodName:    "resume",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resume(ctx, Events_resume{call})
		},
	})

	return methods
}

// Events_pause holds the state for a server call to Events.pause.
// See server.Call for documentation.
type Events_pause struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Events_pause) Args() Events_pause_Params {
	return Events_pause_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Events_pause) AllocResults() (Events_pause_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Results(r), err
}

// Events_resume holds the state for a server call to Events.resume.
// See server.Call for documentation.
type Events_resume struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Events_resume) Args() Events_resume_Params {
	return Events_resume_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Events_resume) AllocResults() (Events_resume_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Results(r), err
}

// Events_List is a list of Events.
type Events_List = capnp.CapList[Events]

// NewEvents creates a new list of Events.
func NewEvents_List(s *capnp.Segment, sz int32) (Events_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Events](l), err
}

type Events_pause_Params capnp.Struct

// Events_pause_Params_TypeID is the unique identifier for the type Events_pause_Params.
const Events_pause_Params_TypeID = 0xa62fe22feb63d82e

func NewEvents_pause_Params(s *capnp.Segment) (Events_pause_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Params(st), err
}

func NewRootEvents_pause_Params(s *capnp.Segment) (Events_pause_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Params(st), err
}

func ReadRootEvents_pause_Params(msg *capnp.Message) (Events_pause_Params, error) {
	root, err := msg.Root()
	return Events_pause_Params(root.Struct()), err
}

func (s Events_pause_Params) String() string {
	str, _ := text.Marshal(0xa62fe22feb63d82e, capnp.Struct(s))
	return str
}

func (s Events_pause_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_pause_Params) DecodeFromPtr(p capnp.Ptr) Events_pause_Params {
	return Events_pause_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_pause_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_pause_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_pause_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_pause_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_pause_Params_List is a list of Events_pause_Params.
type Events_pause_Params_List = capnp.StructList[Events_pause_Params]

// NewEvents_pause_Params creates a new list of Events_pause_Params.
func NewEvents_pause_Params_List(s *capnp.Segment, sz int32) (Events_pause_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_pause_Params](l), err
}

// Events_pause_Params_Future is a wrapper for a Events_pause_Params promised by a client call.
type Events_pause_Params_Future struct{ *capnp.Future }

func (f Events_pause_Params_Future) Struct() (Events_pause_Params, error) {
	p, err := f.Future.Ptr()
	return Events_pause_Params(p.Struct()), err
}

type Events_pause_Results capnp.Struct

// Events_pause_Results_TypeID is the unique identifier for the type Events_pause_Results.
const Events_pause_Results_TypeID = 0x82f79d7adbdcdd6f

func NewEvents_pause_Results(s *capnp.Segment) (Events_pause_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Results(st), err
}

func NewRootEvents_pause_Results(s *capnp.Segment) (Events_pause_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_pause_Results(st), err
}

func ReadRootEvents_pause_Results(msg *capnp.Message) (Events_pause_Results, error) {
	root, err := msg.Root()
	return Events_pause_Results(root.Struct()), err
}

func (s Events_pause_Results) String() string {
	str, _ := text.Marshal(0x82f79d7adbdcdd6f, capnp.Struct(s))
	return str
}

func (s Events_pause_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_pause_Results) DecodeFromPtr(p capnp.Ptr) Events_pause_Results {
	return Events_pause_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_pause_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_pause_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_pause_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_pause_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_pause_Results_List is a list of Events_pause_Results.
type Events_pause_Results_List = capnp.StructList[Events_pause_Results]

// NewEvents_pause_Results creates a new list of Events_pause_Results.
func NewEvents_pause_Results_List(s *capnp.Segment, sz int32) (Events_pause_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_pause_Results](l), err
}

// Events_pause_Results_Future is a wrapper for a Events_pause_Results promised by a client call.
type Events_pause_Results_Future struct{ *capnp.Future }

func (f Events_pause_Results_Future) Struct() (Events_pause_Results, error) {
	p, err := f.Future.Ptr()
	return Events_pause_Results(p.Struct()), err
}

type Events_resume_Params capnp.Struct

// Events_resume_Params_TypeID is the unique identifier for the type Events_resume_Params.
const Events_resume_Params_TypeID = 0xb8521a0e0dcb52d8

func NewEvents_resume_Params(s *capnp.Segment) (Events_resume_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Params(st), err
}

func NewRootEvents_resume_Params(s *capnp.Segment) (Events_resume_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Params(st), err
}

func ReadRootEvents_resume_Params(msg *capnp.Message) (Events_resume_Params, error) {
	root, err := msg.Root()
	return Events_resume_Params(root.Struct()), err
}

func (s Events_resume_Params) String() string {
	str, _ := text.Marshal(0xb8521a0e0dcb52d8, capnp.Struct(s))
	return str
}

func (s Events_resume_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_resume_Params) DecodeFromPtr(p capnp.Ptr) Events_resume_Params {
	return Events_resume_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_resume_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_resume_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_resume_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_resume_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_resume_Params_List is a list of Events_resume_Params.
type Events_resume_Params_List = capnp.StructList[Events_resume_Params]

// NewEvents_resume_Params creates a new list of Events_resume_Params.
func NewEvents_resume_Params_List(s *capnp.Segment, sz int32) (Events_resume_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_resume_Params](l), err
}

// Events_resume_Params_Future is a wrapper for a Events_resume_Params promised by a client call.
type Events_resume_Params_Future struct{ *capnp.Future }

func (f Events_resume_Params_Future) Struct() (Events_resume_Params, error) {
	p, err := f.Future.Ptr()
	return Events_resume_Params(p.Struct()), err
}

type Events_resume_Results capnp.Struct

// Events_resume_Results_TypeID is the unique identifier for the type Events_resume_Results.
const Events_resume_Results_TypeID = 0xe990db10c77bbcb7

func NewEvents_resume_Results(s *capnp.Segment) (Events_resume_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Results(st), err
}

func NewRootEvents_resume_Results(s *capnp.Segment) (Events_resume_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Events_resume_Results(st), err
}

func ReadRootEvents_resume_Results(msg *capnp.Message) (Events_resume_Results, error) {
	root, err := msg.Root()
	return Events_resume_Results(root.Struct()), err
}

func (s Events_resume_Results) String() string {
	str, _ := text.Marshal(0xe990db10c77bbcb7, capnp.Struct(s))
	return str
}

func (s Events_resume_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Events_resume_Results) DecodeFromPtr(p capnp.Ptr) Events_resume_Results {
	return Events_resume_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Events_resume_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Events_resume_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Events_resume_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Events_resume_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Events_resume_Results_List is a list of Events_resume_Results.
type Events_resume_Results_List = capnp.StructList[Events_resume_Results]

// NewEvents_resume_Results creates a new list of Events_resume_Results.
func NewEvents_resume_Results_List(s *capnp.Segment, sz int32) (Events_resume_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Events_resume_Results](l), err
}

// Events_resume_Results_Future is a wrapper for a Events_resume_Results promised by a client call.
type Events_resume_Results_Future struct{ *capnp.Future }

func (f Events_resume_Results_Future) Struct() (Events_resume_Results, error) {
	p, err := f.Future.Ptr()
	return Events_resume_Results(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda\xbcV\x7fh\x14w\x16\x7fof\xb33Y\xb2" +
	"\xd9\xfbf\x92x\x09z9s\xc9\xa99\xf3K9\xee" +
	"N\xf4\xb2FD\x94\x1c\xec,\x84\xe3<Z2\xd9\x8c" +
	"\xee\xe2&\xbb\xee\xce\x1a\xad\x86\xdab\xfcE\x8b\x15\xda" +
	"j\xc5h\x02\x8d\xd5\xb6\x966\xd5Zi-\x8db5" +
	"H\xa1j\x8b\xa6j\x8bQ\x8bQ\x14\x85F\x1bj\xbb" +
	"\xe5;\xb3\xdf\xc9lv\xd7H)\xfdga\xf6\xfb\xde" +
	"\xe7}\xde\xefWSks\xdbj\x9d\x93\x9c\xc0\xc9;" +
	"\xb3\xec\xf1\xd0\x95\xcb\x97\x9e\xe9z\xf8<\x90\x02\x04\xb0" +
	"\x09\x00\xb3W\xda\x8b\x11l\xf1\x15\xeec\xc5\xce\xf9\xd7" +
	"6\x82\\\x88\x08\x90\x85\xf4\xed\x7f\xf6R\x04\x94\x14{" +
	";`\xfc\x93\x7fWU\xb8\xf2>\xd8\x0ed\xb2)\xd0" +
	"o\x9fC\x05\x06\xecu\x80\xf1\xbf5u\xef]\xa85" +
	"u\x01)d\xe0w\x0c\xf0\x92\x1b[\x1a\x85\xbcu\xbd" +
	"\x96\x97\xaf\xec\x15\xf4\xa5\xea\xa2\xefv\xf5P\xf5>\x0b" +
	"\xa1c\xf6<\xfa\xf2=\xaf\xfd\xff\xe4\xfd\xcf\xfa\xac\xe6" +
	"z\xed\xf5\xd4\xdcA\xdd\\\xd3\xd6N\xcf\xe0\xfc\xf2#" +
	"\x09\xc6\xba\xeeY\x83\xcf\xa0.p\xd1{\xc6\x99[\xec" +
	"\xfd\xd0\x82=j\xf0Yyf\xcf\xfc\xf0\x0f{>2" +
	"\xf8\x18\xd8W\xed\xb3\xa8\xea\xb0\xae\xba\xe1\xe6\xe8\xc6\xe6" +
	"I{?\xb5\x10\xce\x16J\xa9j\xe3\xcf\xbb\x17\xef\x9f" +
	"\xb4\xf4\xb8\x95\xd6}\xc3\xea\xa8\xae\xfa\xd7\xad\xf3zz" +
	"\xeb\x0aN\x80\x9c\x8b\\\xdc\xd7>\xad\xbd\xf6\x86\xbc\x0b" +
	"\xb28\x01@*\x12vIS\x05\xaa3E(A\xc0" +
	"\xf8\xdd\x1d_F\xfb\xfc\xb5'-\x86\xe6\x89:\xc7\xf6" +
	"\xbe\x86\xb5?\xfd\xf7\xda)\xcbK\xb9\xa8\xc7\xec\xe6\xa6" +
	"~\xfb\xb7\xb1\xeasI\xa9r\x8ay\x94C\x81HS" +
	"\xf5\xf6\xa2\x9a\xb2\xeeC\x15\x17\xac\xa1\x89QX\x94:" +
	"DJ\xf2^\xe5\xa1\x9e\xe3\xfb\xfa\x93\x04zD\x07\x15" +
	"8\xa0\x0b\xcc\x1dX\xdb\xdc\xbdk\xee\xa0\xc5\xfa\x80a" +
	"}\xb6\xbd|\xff\xf9{\x7f\xf9\x1aH.?\xe6\x1e\xa0" +
	"\xf4\x9e\xd8'\x1d\x15\xa9\xe4aq\x13'\xfd\xc7!\x00" +
	"\xc4\x95\xc1\x9eG_L\x7f\xf5\xba\x05\xe7\xef\x0e\xdd?" +
	"\x0d\xb3\x1f\xf0\xd7\x1b\xbeK\xc1\x99\xe2\x18\x92fPe" +
	"\xa9\xdcqJ\xea\xd2a\x8e|\xbc\xf6\xd4\x1f.\xbd4" +
	"lIe\xa7C\xcf\xc7\xb2\xe6\xa5j\xfd\xad\xc3\xc3)" +
	"0\xad\x8e7\xa5\x98\x0e\xb3\xd2\xb1I\xea\xd7a\xe4\xd3" +
	"\x81\x7f45\xfdx\xcb\xc2\xe6\x80\xc3Ka\x16=U" +
	"\xfdn\xd1;o\xdc\xb5\xbc\xbc\xe2\xd0\xeb\xd0\x7f\xf4\xcf" +
	"\x8f\xcew\xfci\xc4\x9a\xf0\x0e\x87^\x87\x9d\x0e\x1a\xaa" +
	"m\xf3n\xf9\x0b/o\x19\xb1\xa8\xf6\xd2w[<\xdc" +
	"\xf8M\xe5\xc1\x0b\xc7G\xacQ~\xd1\xb1\x84\xaa\xbe\xa6" +
	"\xab\xae\xdb\x7f;\xb6;\xef\xe5\x07V\xec\xa3\x0e\xbd\x98" +
	"\xfau\x81i\xde\xfa\xb7No.|h\xc1\xbe\xea\xe0" +
	"(\xb6\xeb\xe9\x07'\xce\xcdl\x1a\x05y\xb2\x89}\xd2" +
	"\xa0\xf5\xb9\xaez\xed\xfdK\xe2\xd0\x92\xc0\xa8\xb5\x1b\x0d" +
	"\x8f\xd6\xef\x18\xdav\xf3\xce`\xdc\xda\x8d4\x985\xf1" +
	"p$\xe4S\xa3\xd1*\xde\xa7\x84\xdb\xc2s\x16\xaeR" +
	"\xdb\xb4hUX\x89E\xd52\xaf\x1a\x8d\x05y-:" +
	"^\xc8\x93\xf8\x8c\xb5\x05\x03m+\xca<JDPZ" +
	"\xa3\xb2\xc8\xdb\x00l\x08@f\xcc\x02\x90\xcbx\x94k" +
	"8D\xcc\xa7lI\xa5\x17@\x9e\xc9\xa3\xfcO\x0eK" +
	"B\x9a_\x8d \x19\xab,@$\x80\xf1H(\xd6\xd6" +
	"\xa2E\x02\x80aD\xe0\x90\xf6\xcb8\xe3\xf5k4\xd5" +
	"\x17jQ\x17(>\xbfZ\x15\x8eieu\x1e%B" +
	"\xed\xdbL\xfb\xce%\x00r\x0e\x8f\xf2\x1f9\x8c7'" +
	"\x14\x00\x00\x9d\xc0\xa13\x15\x939\xa4\xbb3\x91\xd7\x11" +
	"5\x1ak\xd5\x83\xe3\x8a\x05S\xc5\x92\"\xa83\xc31" +
	"\x19[:\x1f\x96\xab\x9aaT\x8b\xc2o\xe4DC\xc8" +
	"\xa7\x04\xd3\x05\x86&F\xe4Q\xce7\x93 \x02\x87b" +
	"*Z\xc2\x8d\x84\xb3\x14\x88o\xcd\x18\x92\xd6P[@" +
	"\x0bE\xca\xbcj\x89\xeeF&\x8b*\x05\xc5\x1c\xe00" +
	"'3\xff\xb1\xda\x13\xd2\x8479t~%\x9a\xce\xcb" +
	"\xd21\x9b\x82/\xd0\x92\x1214\xb0\x16\xb7\xf1\xcbB" +
	"\x1eD9\xdfT\xed\xa0\xaa\xaby\x947pHX\xe9" +
	">W\x01 \xaf\xe3Q\xde\xcc!r\xf9\xc8\x01\x90N" +
	"*\xb8\x9eG\xf9\x05\x0e\x09\x8f\xf9\xc8\x03\x90-Tp" +
	"\x03\x8fr7\x87\xc4\x86\xf9h\x03 ]\xf4\xcf\x9d<" +
	"\xca\xafs(\x84\x03-,\xe2\xae\xb0\xe5\xc3J\xd3\xa5" +
	"D\x96\xaf\xc2\\@\x0f\x8fz\xb0r\x01]Z\xa0U" +
	"\xc5,\xe00+s\xe4V\x04\x82\xc1\x09\xcb\x97\xe5\xca" +
	"\xa3\xb8h\xd8\x1e\xdb\x0a\x89\xf2\xfd\x9d:\x9b\x99nW" +
	"\x02\x9a\xe9F\xa6\x86PW\x07\xb4\x05\x89\x86\xc8P\xc2" +
	"\x0c/\xd0b\xb6WR\x7f\x15\x8fU\x09\x1fh\x99(" +
	"\xb8\x89a\x97\xd2\xf6\xc8\xc4J\xf4oZN\xd3\xf9," +
	"\x00s\x1a#[\xcdR-V\x00'\x95\xa3\x80hn" +
	"\x1fd\xe7\x80T\xa4\xbf:Q@\xce\xdc\xf7\xc8\x0e," +
	"\x09\xe9+\x19\x11\x907\xef6d\x1b\x9b\x0c\xcf\x01\x8e" +
	"\\\x11\xd0f^H\xc8V\x149\xeb\x05\x8e\x0c\x08\x98" +
	"e\xee&d;\x91\x1ck\x06\x8e\x1c\x16\xd0n\x9e\x1e" +
	"\xc8\xee$r\xa0\x1e8\xd2%\xa0`.td'\x12" +
	"\xd9>\x0b8\xd2)\xa0h.\x16d\xf7\x1eYC\xb9" +
	"\xb4\x0a\x98mn2d\xa7\x07Q\x8a\x81#\x8d\x82\x8b" +
	"f\xd8\x8d.Z\xafnt\xd1\xb8\xba\xb1\xce\x08\xb0\x1b" +
	"\xe3l\x80\x01\x06\xdd\x187\xfen\x08\x81\xe0S\x82n" +
	"|6Q\xbfn,\xd1\x07\x85\x1b\xeb\x8c\x19\xe5\xa6I" +
	"t\xa3\x07'\x18,\xe3G\x197~\xae\x08>\xbfJ" +
	"\xb3\x98\xa3g\x91\x9d\xc0\xc8\x8e\x02\"\x97\x02G\x16\xd2" +
	"\x1c\xb2]\x8e\xecp%\xff\xa2o\x954\x83\xechD" +
	"\xb6\xb5\xc9T\xfaV \x08\xe1\x98\xe6Fa\xb9J\x7f" +
	"\xfdJ4-\xe5\xe4\xe9\x9b2\x0b\x91I\xb9\xa8\x18%" +
	"+\xead\xd9i\x8d\xec\xe8'\xb54S\xe5\x94,;" +
	"\x8d\x91\x1dV\xa4\x88f\xca)\xa4\xc4\xd1\xca\xc7\x96\xae" +
	"\x09\x8c\xedb\xf4\x14F\x1f;\x8d\x9eh\x01\xd2%\x9e" +
	"n\x01N4\xc6\xb33->\x06\xc6\x043;a\xec" +
	"\x8e\xe4\xb9\xf0\xc4;2u\x8d\xff\x8a]$\xa6\x0c\xab" +
	"\x04\xa7d\xf2\xa9{o\xa2\x88\xf9\x95\xe8\x13M\xda\xf1" +
	")J\x7f\xee$\x8e\xbc_\x02\x00\x00\xff\xffQ\x9e " +
	"~"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9a51e53177277763,
		Nodes: []uint64{
			0x82f79d7adbdcdd6f,
			0x86e3410d1abd406b,
			0x91b6120f2a2e3ebe,
			0x9d6074459fa0602b,
			0xa57c12075589e51f,
			0xa62fe22feb63d82e,
			0xb2c6f1c55b7403f4,
			0xb72541d950858a60,
			0xb8521a0e0dcb52d8,
			0xbb9ef870419ecb71,
			0xc09f176286f9e884,
			0xc25a17a8499cfe55,
			0xc3153fa5a13d8a26,
			0xc53168b273d497ee,
			0xc7e357fd7b4cb277,
			0xd22f75df06c187e8,
			0xd72ab4a0243047ac,
			0xd7c1a6c2a1b42df0,
			0xd93c9aa0627bc93c,
			0xda23f0d3a8250633,
			0xe49628d0fca1d961,
			0xe64ce403f6090174,
			0xe990db10c77bbcb7,
			0xe9b5ea42655a6266,
			0xeafb60603769c851,
			0xeea7ae19b02f5d47,
			0xf51e7dd3fc20b968,
			0xf589dc1668ea3d8f,
			0xf5c2d7ad2dde5570,
			0xf694129c75eba87c,
			0xf71688c8ab425227,
			0xf9602cd2c3f65e0f,
			0xf9694ae208dbb3e3,
			0xffd9ede88fe29780,
		},
		Compressed: true,
	})
}
