// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type BytecodeCache capnp.Client

// BytecodeCache_TypeID is the unique identifier for the type BytecodeCache.
const BytecodeCache_TypeID = 0xe64ce403f6090174

func (c BytecodeCache) Put(ctx context.Context, params func(BytecodeCache_put_Params) error) (BytecodeCache_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_put_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Get(ctx context.Context, params func(BytecodeCache_get_Params) error) (BytecodeCache_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_get_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Has(ctx context.Context, params func(BytecodeCache_has_Params) error) (BytecodeCache_has_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_has_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_has_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BytecodeCache) String() string {
	return "BytecodeCache(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BytecodeCache) AddRef() BytecodeCache {
	return BytecodeCache(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BytecodeCache) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BytecodeCache) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BytecodeCache) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BytecodeCache) DecodeFromPtr(p capnp.Ptr) BytecodeCache {
	return BytecodeCache(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BytecodeCache) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BytecodeCache) IsSame(other BytecodeCache) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BytecodeCache) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BytecodeCache) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BytecodeCache_Server is a BytecodeCache with a local implementation.
type BytecodeCache_Server interface {
	Put(context.Context, BytecodeCache_put) error

	Get(context.Context, BytecodeCache_get) error

	Has(context.Context, BytecodeCache_has) error
}

// BytecodeCache_NewServer creates a new Server from an implementation of BytecodeCache_Server.
func BytecodeCache_NewServer(s BytecodeCache_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BytecodeCache_Methods(nil, s), s, c)
}

// BytecodeCache_ServerToClient creates a new Client from an implementation of BytecodeCache_Server.
// The caller is responsible for calling Release on the returned Client.
func BytecodeCache_ServerToClient(s BytecodeCache_Server) BytecodeCache {
	return BytecodeCache(capnp.NewClient(BytecodeCache_NewServer(s)))
}

// BytecodeCache_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BytecodeCache_Methods(methods []server.Method, s BytecodeCache_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, BytecodeCache_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, BytecodeCache_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Has(ctx, BytecodeCache_has{call})
		},
	})

	return methods
}

// BytecodeCache_put holds the state for a server call to BytecodeCache.put.
// See server.Call for documentation.
type BytecodeCache_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_put) Args() BytecodeCache_put_Params {
	return BytecodeCache_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_put) AllocResults() (BytecodeCache_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(r), err
}

// BytecodeCache_get holds the state for a server call to BytecodeCache.get.
// See server.Call for documentation.
type BytecodeCache_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_get) Args() BytecodeCache_get_Params {
	return BytecodeCache_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_get) AllocResults() (BytecodeCache_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(r), err
}

// BytecodeCache_has holds the state for a server call to BytecodeCache.has.
// See server.Call for documentation.
type BytecodeCache_has struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_has) Args() BytecodeCache_has_Params {
	return BytecodeCache_has_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_has) AllocResults() (BytecodeCache_has_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(r), err
}

// BytecodeCache_List is a list of BytecodeCache.
type BytecodeCache_List = capnp.CapList[BytecodeCache]

// NewBytecodeCache creates a new list of BytecodeCache.
func NewBytecodeCache_List(s *capnp.Segment, sz int32) (BytecodeCache_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BytecodeCache](l), err
}

type BytecodeCache_put_Params capnp.Struct

// BytecodeCache_put_Params_TypeID is the unique identifier for the type BytecodeCache_put_Params.
const BytecodeCache_put_Params_TypeID = 0x91b6120f2a2e3ebe

func NewBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func NewRootBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func ReadRootBytecodeCache_put_Params(msg *capnp.Message) (BytecodeCache_put_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Params(root.Struct()), err
}

func (s BytecodeCache_put_Params) String() string {
	str, _ := text.Marshal(0x91b6120f2a2e3ebe, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Params {
	return BytecodeCache_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Params_List is a list of BytecodeCache_put_Params.
type BytecodeCache_put_Params_List = capnp.StructList[BytecodeCache_put_Params]

// NewBytecodeCache_put_Params creates a new list of BytecodeCache_put_Params.
func NewBytecodeCache_put_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Params](l), err
}

// BytecodeCache_put_Params_Future is a wrapper for a BytecodeCache_put_Params promised by a client call.
type BytecodeCache_put_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Params_Future) Struct() (BytecodeCache_put_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Params(p.Struct()), err
}

type BytecodeCache_put_Results capnp.Struct

// BytecodeCache_put_Results_TypeID is the unique identifier for the type BytecodeCache_put_Results.
const BytecodeCache_put_Results_TypeID = 0xf51e7dd3fc20b968

func NewBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func NewRootBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func ReadRootBytecodeCache_put_Results(msg *capnp.Message) (BytecodeCache_put_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Results(root.Struct()), err
}

func (s BytecodeCache_put_Results) String() string {
	str, _ := text.Marshal(0xf51e7dd3fc20b968, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Results {
	return BytecodeCache_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Results) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Results) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Results_List is a list of BytecodeCache_put_Results.
type BytecodeCache_put_Results_List = capnp.StructList[BytecodeCache_put_Results]

// NewBytecodeCache_put_Results creates a new list of BytecodeCache_put_Results.
func NewBytecodeCache_put_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Results](l), err
}

// BytecodeCache_put_Results_Future is a wrapper for a BytecodeCache_put_Results promised by a client call.
type BytecodeCache_put_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Results_Future) Struct() (BytecodeCache_put_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Results(p.Struct()), err
}

type BytecodeCache_get_Params capnp.Struct

// BytecodeCache_get_Params_TypeID is the unique identifier for the type BytecodeCache_get_Params.
const BytecodeCache_get_Params_TypeID = 0xf694129c75eba87c

func NewBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func NewRootBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func ReadRootBytecodeCache_get_Params(msg *capnp.Message) (BytecodeCache_get_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Params(root.Struct()), err
}

func (s BytecodeCache_get_Params) String() string {
	str, _ := text.Marshal(0xf694129c75eba87c, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Params {
	return BytecodeCache_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Params_List is a list of BytecodeCache_get_Params.
type BytecodeCache_get_Params_List = capnp.StructList[BytecodeCache_get_Params]

// NewBytecodeCache_get_Params creates a new list of BytecodeCache_get_Params.
func NewBytecodeCache_get_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Params](l), err
}

// BytecodeCache_get_Params_Future is a wrapper for a BytecodeCache_get_Params promised by a client call.
type BytecodeCache_get_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Params_Future) Struct() (BytecodeCache_get_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Params(p.Struct()), err
}

type BytecodeCache_get_Results capnp.Struct

// BytecodeCache_get_Results_TypeID is the unique identifier for the type BytecodeCache_get_Results.
const BytecodeCache_get_Results_TypeID = 0xb2c6f1c55b7403f4

func NewBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func NewRootBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func ReadRootBytecodeCache_get_Results(msg *capnp.Message) (BytecodeCache_get_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Results(root.Struct()), err
}

func (s BytecodeCache_get_Results) String() string {
	str, _ := text.Marshal(0xb2c6f1c55b7403f4, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Results {
	return BytecodeCache_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Results) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Results) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Results) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Results_List is a list of BytecodeCache_get_Results.
type BytecodeCache_get_Results_List = capnp.StructList[BytecodeCache_get_Results]

// NewBytecodeCache_get_Results creates a new list of BytecodeCache_get_Results.
func NewBytecodeCache_get_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Results](l), err
}

// BytecodeCache_get_Results_Future is a wrapper for a BytecodeCache_get_Results promised by a client call.
type BytecodeCache_get_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Results_Future) Struct() (BytecodeCache_get_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Results(p.Struct()), err
}

type BytecodeCache_has_Params capnp.Struct

// BytecodeCache_has_Params_TypeID is the unique identifier for the type BytecodeCache_has_Params.
const BytecodeCache_has_Params_TypeID = 0xc25a17a8499cfe55

func NewBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func NewRootBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func ReadRootBytecodeCache_has_Params(msg *capnp.Message) (BytecodeCache_has_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Params(root.Struct()), err
}

func (s BytecodeCache_has_Params) String() string {
	str, _ := text.Marshal(0xc25a17a8499cfe55, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Params {
	return BytecodeCache_has_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_has_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_has_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_has_Params_List is a list of BytecodeCache_has_Params.
type BytecodeCache_has_Params_List = capnp.StructList[BytecodeCache_has_Params]

// NewBytecodeCache_has_Params creates a new list of BytecodeCache_has_Params.
func NewBytecodeCache_has_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_has_Params](l), err
}

// BytecodeCache_has_Params_Future is a wrapper for a BytecodeCache_has_Params promised by a client call.
type BytecodeCache_has_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Params_Future) Struct() (BytecodeCache_has_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Params(p.Struct()), err
}

type BytecodeCache_has_Results capnp.Struct

// BytecodeCache_has_Results_TypeID is the unique identifier for the type BytecodeCache_has_Results.
const BytecodeCache_has_Results_TypeID = 0xf9602cd2c3f65e0f

func NewBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func NewRootBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func ReadRootBytecodeCache_has_Results(msg *capnp.Message) (BytecodeCache_has_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Results(root.Struct()), err
}

func (s BytecodeCache_has_Results) String() string {
	str, _ := text.Marshal(0xf9602cd2c3f65e0f, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Results {
	return BytecodeCache_has_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Results) Has() bool {
	return capnp.Struct(s).Bit(0)
}

func (s BytecodeCache_has_Results) SetHas(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// BytecodeCache_has_Results_List is a list of BytecodeCache_has_Results.
type BytecodeCache_has_Results_List = capnp.StructList[BytecodeCache_has_Results]

// NewBytecodeCache_has_Results creates a new list of BytecodeCache_has_Results.
func NewBytecodeCache_has_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BytecodeCache_has_Results](l), err
}

// BytecodeCache_has_Results_Future is a wrapper for a BytecodeCache_has_Results promised by a client call.
type BytecodeCache_has_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Results_Future) Struct() (BytecodeCache_has_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Results(p.Struct()), err
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release

}

func (c Process) Kill(ctx context.Context, params func(Process_kill_Params) error) (Process_kill_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_kill_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_kill_Results_Future{Future: ans.Future()}, release

}

func (c Process) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return "Process(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Wait(context.Context, Process_wait) error

	Kill(context.Context, Process_kill) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Kill(ctx, Process_kill{call})
		},
	})

	return methods
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(r), err
}

// Process_kill holds the state for a server call to Process.kill.
// See server.Call for documentation.
type Process_kill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_kill) Args() Process_kill_Params {
	return Process_kill_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_kill) AllocResults() (Process_kill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_wait_Results) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}

type Process_kill_Params capnp.Struct

// Process_kill_Params_TypeID is the unique identifier for the type Process_kill_Params.
const Process_kill_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func NewRootProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func ReadRootProcess_kill_Params(msg *capnp.Message) (Process_kill_Params, error) {
	root, err := msg.Root()
	return Process_kill_Params(root.Struct()), err
}

func (s Process_kill_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_kill_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Params) DecodeFromPtr(p capnp.Ptr) Process_kill_Params {
	return Process_kill_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Params_List is a list of Process_kill_Params.
type Process_kill_Params_List = capnp.StructList[Process_kill_Params]

// NewProcess_kill_Params creates a new list of Process_kill_Params.
func NewProcess_kill_Params_List(s *capnp.Segment, sz int32) (Process_kill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Params](l), err
}

// Process_kill_Params_Future is a wrapper for a Process_kill_Params promised by a client call.
type Process_kill_Params_Future struct{ *capnp.Future }

func (f Process_kill_Params_Future) Struct() (Process_kill_Params, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Params(p.Struct()), err
}

type Process_kill_Results capnp.Struct

// Process_kill_Results_TypeID is the unique identifier for the type Process_kill_Results.
const Process_kill_Results_TypeID = 0xc53168b273d497ee

func NewProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func NewRootProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func ReadRootProcess_kill_Results(msg *capnp.Message) (Process_kill_Results, error) {
	root, err := msg.Root()
	return Process_kill_Results(root.Struct()), err
}

func (s Process_kill_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_kill_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Results) DecodeFromPtr(p capnp.Ptr) Process_kill_Results {
	return Process_kill_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Results_List is a list of Process_kill_Results.
type Process_kill_Results_List = capnp.StructList[Process_kill_Results]

// NewProcess_kill_Results creates a new list of Process_kill_Results.
func NewProcess_kill_Results_List(s *capnp.Segment, sz int32) (Process_kill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Results](l), err
}

// Process_kill_Results_Future is a wrapper for a Process_kill_Results promised by a client call.
type Process_kill_Results_Future struct{ *capnp.Future }

func (f Process_kill_Results_Future) Struct() (Process_kill_Results, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Results(p.Struct()), err
}

type BootContext capnp.Client

// BootContext_TypeID is the unique identifier for the type BootContext.
const BootContext_TypeID = 0xef622b23fee0980e

func (c BootContext) Pid(ctx context.Context, params func(BootContext_pid_Params) error) (BootContext_pid_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      0,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "pid",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_pid_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_pid_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) Cid(ctx context.Context, params func(BootContext_cid_Params) error) (BootContext_cid_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      1,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "cid",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_cid_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_cid_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) Args(ctx context.Context, params func(BootContext_args_Params) error) (BootContext_args_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      2,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "args",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_args_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_args_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) Caps(ctx context.Context, params func(BootContext_caps_Params) error) (BootContext_caps_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      3,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "caps",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_caps_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_caps_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) SetPid(ctx context.Context, params func(BootContext_setPid_Params) error) (BootContext_setPid_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      4,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "setPid",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_setPid_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_setPid_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) SetCid(ctx context.Context, params func(BootContext_setCid_Params) error) (BootContext_setCid_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      5,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "setCid",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_setCid_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_setCid_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BootContext) String() string {
	return "BootContext(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BootContext) AddRef() BootContext {
	return BootContext(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BootContext) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BootContext) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BootContext) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BootContext) DecodeFromPtr(p capnp.Ptr) BootContext {
	return BootContext(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BootContext) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BootContext) IsSame(other BootContext) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BootContext) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BootContext) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BootContext_Server is a BootContext with a local implementation.
type BootContext_Server interface {
	Pid(context.Context, BootContext_pid) error

	Cid(context.Context, BootContext_cid) error

	Args(context.Context, BootContext_args) error

	Caps(context.Context, BootContext_caps) error

	SetPid(context.Context, BootContext_setPid) error

	SetCid(context.Context, BootContext_setCid) error
}

// BootContext_NewServer creates a new Server from an implementation of BootContext_Server.
func BootContext_NewServer(s BootContext_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BootContext_Methods(nil, s), s, c)
}

// BootContext_ServerToClient creates a new Client from an implementation of BootContext_Server.
// The caller is responsible for calling Release on the returned Client.
func BootContext_ServerToClient(s BootContext_Server) BootContext {
	return BootContext(capnp.NewClient(BootContext_NewServer(s)))
}

// BootContext_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BootContext_Methods(methods []server.Method, s BootContext_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      0,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "pid",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pid(ctx, BootContext_pid{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      1,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "cid",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cid(ctx, BootContext_cid{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      2,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "args",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Args(ctx, BootContext_args{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      3,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "caps",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Caps(ctx, BootContext_caps{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      4,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "setPid",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetPid(ctx, BootContext_setPid{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      5,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "setCid",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetCid(ctx, BootContext_setCid{call})
		},
	})

	return methods
}

// BootContext_pid holds the state for a server call to BootContext.pid.
// See server.Call for documentation.
type BootContext_pid struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_pid) Args() BootContext_pid_Params {
	return BootContext_pid_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_pid) AllocResults() (BootContext_pid_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_pid_Results(r), err
}

// BootContext_cid holds the state for a server call to BootContext.cid.
// See server.Call for documentation.
type BootContext_cid struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_cid) Args() BootContext_cid_Params {
	return BootContext_cid_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_cid) AllocResults() (BootContext_cid_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_cid_Results(r), err
}

// BootContext_args holds the state for a server call to BootContext.args.
// See server.Call for documentation.
type BootContext_args struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_args) Args() BootContext_args_Params {
	return BootContext_args_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_args) AllocResults() (BootContext_args_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_args_Results(r), err
}

// BootContext_caps holds the state for a server call to BootContext.caps.
// See server.Call for documentation.
type BootContext_caps struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_caps) Args() BootContext_caps_Params {
	return BootContext_caps_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_caps) AllocResults() (BootContext_caps_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_caps_Results(r), err
}

// BootContext_setPid holds the state for a server call to BootContext.setPid.
// See server.Call for documentation.
type BootContext_setPid struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_setPid) Args() BootContext_setPid_Params {
	return BootContext_setPid_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_setPid) AllocResults() (BootContext_setPid_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setPid_Results(r), err
}

// BootContext_setCid holds the state for a server call to BootContext.setCid.
// See server.Call for documentation.
type BootContext_setCid struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_setCid) Args() BootContext_setCid_Params {
	return BootContext_setCid_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_setCid) AllocResults() (BootContext_setCid_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setCid_Results(r), err
}

// BootContext_List is a list of BootContext.
type BootContext_List = capnp.CapList[BootContext]

// NewBootContext creates a new list of BootContext.
func NewBootContext_List(s *capnp.Segment, sz int32) (BootContext_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BootContext](l), err
}

type BootContext_pid_Params capnp.Struct

// BootContext_pid_Params_TypeID is the unique identifier for the type BootContext_pid_Params.
const BootContext_pid_Params_TypeID = 0xa7600db255bca0c7

func NewBootContext_pid_Params(s *capnp.Segment) (BootContext_pid_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_pid_Params(st), err
}

func NewRootBootContext_pid_Params(s *capnp.Segment) (BootContext_pid_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_pid_Params(st), err
}

func ReadRootBootContext_pid_Params(msg *capnp.Message) (BootContext_pid_Params, error) {
	root, err := msg.Root()
	return BootContext_pid_Params(root.Struct()), err
}

func (s BootContext_pid_Params) String() string {
	str, _ := text.Marshal(0xa7600db255bca0c7, capnp.Struct(s))
	return str
}

func (s BootContext_pid_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_pid_Params) DecodeFromPtr(p capnp.Ptr) BootContext_pid_Params {
	return BootContext_pid_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_pid_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_pid_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_pid_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_pid_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_pid_Params_List is a list of BootContext_pid_Params.
type BootContext_pid_Params_List = capnp.StructList[BootContext_pid_Params]

// NewBootContext_pid_Params creates a new list of BootContext_pid_Params.
func NewBootContext_pid_Params_List(s *capnp.Segment, sz int32) (BootContext_pid_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_pid_Params](l), err
}

// BootContext_pid_Params_Future is a wrapper for a BootContext_pid_Params promised by a client call.
type BootContext_pid_Params_Future struct{ *capnp.Future }

func (f BootContext_pid_Params_Future) Struct() (BootContext_pid_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_pid_Params(p.Struct()), err
}

type BootContext_pid_Results capnp.Struct

// BootContext_pid_Results_TypeID is the unique identifier for the type BootContext_pid_Results.
const BootContext_pid_Results_TypeID = 0xe84ba4855da630b6

func NewBootContext_pid_Results(s *capnp.Segment) (BootContext_pid_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_pid_Results(st), err
}

func NewRootBootContext_pid_Results(s *capnp.Segment) (BootContext_pid_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_pid_Results(st), err
}

func ReadRootBootContext_pid_Results(msg *capnp.Message) (BootContext_pid_Results, error) {
	root, err := msg.Root()
	return BootContext_pid_Results(root.Struct()), err
}

func (s BootContext_pid_Results) String() string {
	str, _ := text.Marshal(0xe84ba4855da630b6, capnp.Struct(s))
	return str
}

func (s BootContext_pid_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_pid_Results) DecodeFromPtr(p capnp.Ptr) BootContext_pid_Results {
	return BootContext_pid_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_pid_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_pid_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_pid_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_pid_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_pid_Results) Pid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s BootContext_pid_Results) SetPid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// BootContext_pid_Results_List is a list of BootContext_pid_Results.
type BootContext_pid_Results_List = capnp.StructList[BootContext_pid_Results]

// NewBootContext_pid_Results creates a new list of BootContext_pid_Results.
func NewBootContext_pid_Results_List(s *capnp.Segment, sz int32) (BootContext_pid_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_pid_Results](l), err
}

// BootContext_pid_Results_Future is a wrapper for a BootContext_pid_Results promised by a client call.
type BootContext_pid_Results_Future struct{ *capnp.Future }

func (f BootContext_pid_Results_Future) Struct() (BootContext_pid_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_pid_Results(p.Struct()), err
}

type BootContext_cid_Params capnp.Struct

// BootContext_cid_Params_TypeID is the unique identifier for the type BootContext_cid_Params.
const BootContext_cid_Params_TypeID = 0x8dbc523bcfdca829

func NewBootContext_cid_Params(s *capnp.Segment) (BootContext_cid_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_cid_Params(st), err
}

func NewRootBootContext_cid_Params(s *capnp.Segment) (BootContext_cid_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_cid_Params(st), err
}

func ReadRootBootContext_cid_Params(msg *capnp.Message) (BootContext_cid_Params, error) {
	root, err := msg.Root()
	return BootContext_cid_Params(root.Struct()), err
}

func (s BootContext_cid_Params) String() string {
	str, _ := text.Marshal(0x8dbc523bcfdca829, capnp.Struct(s))
	return str
}

func (s BootContext_cid_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_cid_Params) DecodeFromPtr(p capnp.Ptr) BootContext_cid_Params {
	return BootContext_cid_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_cid_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_cid_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_cid_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_cid_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_cid_Params_List is a list of BootContext_cid_Params.
type BootContext_cid_Params_List = capnp.StructList[BootContext_cid_Params]

// NewBootContext_cid_Params creates a new list of BootContext_cid_Params.
func NewBootContext_cid_Params_List(s *capnp.Segment, sz int32) (BootContext_cid_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_cid_Params](l), err
}

// BootContext_cid_Params_Future is a wrapper for a BootContext_cid_Params promised by a client call.
type BootContext_cid_Params_Future struct{ *capnp.Future }

func (f BootContext_cid_Params_Future) Struct() (BootContext_cid_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_cid_Params(p.Struct()), err
}

type BootContext_cid_Results capnp.Struct

// BootContext_cid_Results_TypeID is the unique identifier for the type BootContext_cid_Results.
const BootContext_cid_Results_TypeID = 0xda227d43770b4d13

func NewBootContext_cid_Results(s *capnp.Segment) (BootContext_cid_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_cid_Results(st), err
}

func NewRootBootContext_cid_Results(s *capnp.Segment) (BootContext_cid_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_cid_Results(st), err
}

func ReadRootBootContext_cid_Results(msg *capnp.Message) (BootContext_cid_Results, error) {
	root, err := msg.Root()
	return BootContext_cid_Results(root.Struct()), err
}

func (s BootContext_cid_Results) String() string {
	str, _ := text.Marshal(0xda227d43770b4d13, capnp.Struct(s))
	return str
}

func (s BootContext_cid_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_cid_Results) DecodeFromPtr(p capnp.Ptr) BootContext_cid_Results {
	return BootContext_cid_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_cid_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_cid_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_cid_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_cid_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_cid_Results) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BootContext_cid_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_cid_Results) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BootContext_cid_Results_List is a list of BootContext_cid_Results.
type BootContext_cid_Results_List = capnp.StructList[BootContext_cid_Results]

// NewBootContext_cid_Results creates a new list of BootContext_cid_Results.
func NewBootContext_cid_Results_List(s *capnp.Segment, sz int32) (BootContext_cid_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_cid_Results](l), err
}

// BootContext_cid_Results_Future is a wrapper for a BootContext_cid_Results promised by a client call.
type BootContext_cid_Results_Future struct{ *capnp.Future }

func (f BootContext_cid_Results_Future) Struct() (BootContext_cid_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_cid_Results(p.Struct()), err
}

type BootContext_args_Params capnp.Struct

// BootContext_args_Params_TypeID is the unique identifier for the type BootContext_args_Params.
const BootContext_args_Params_TypeID = 0xdd266b5e92d80bb6

func NewBootContext_args_Params(s *capnp.Segment) (BootContext_args_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_args_Params(st), err
}

func NewRootBootContext_args_Params(s *capnp.Segment) (BootContext_args_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_args_Params(st), err
}

func ReadRootBootContext_args_Params(msg *capnp.Message) (BootContext_args_Params, error) {
	root, err := msg.Root()
	return BootContext_args_Params(root.Struct()), err
}

func (s BootContext_args_Params) String() string {
	str, _ := text.Marshal(0xdd266b5e92d80bb6, capnp.Struct(s))
	return str
}

func (s BootContext_args_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_args_Params) DecodeFromPtr(p capnp.Ptr) BootContext_args_Params {
	return BootContext_args_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_args_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_args_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_args_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_args_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_args_Params_List is a list of BootContext_args_Params.
type BootContext_args_Params_List = capnp.StructList[BootContext_args_Params]

// NewBootContext_args_Params creates a new list of BootContext_args_Params.
func NewBootContext_args_Params_List(s *capnp.Segment, sz int32) (BootContext_args_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_args_Params](l), err
}

// BootContext_args_Params_Future is a wrapper for a BootContext_args_Params promised by a client call.
type BootContext_args_Params_Future struct{ *capnp.Future }

func (f BootContext_args_Params_Future) Struct() (BootContext_args_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_args_Params(p.Struct()), err
}

type BootContext_args_Results capnp.Struct

// BootContext_args_Results_TypeID is the unique identifier for the type BootContext_args_Results.
const BootContext_args_Results_TypeID = 0xda9aeb6068ce2f08

func NewBootContext_args_Results(s *capnp.Segment) (BootContext_args_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_args_Results(st), err
}

func NewRootBootContext_args_Results(s *capnp.Segment) (BootContext_args_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_args_Results(st), err
}

func ReadRootBootContext_args_Results(msg *capnp.Message) (BootContext_args_Results, error) {
	root, err := msg.Root()
	return BootContext_args_Results(root.Struct()), err
}

func (s BootContext_args_Results) String() string {
	str, _ := text.Marshal(0xda9aeb6068ce2f08, capnp.Struct(s))
	return str
}

func (s BootContext_args_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_args_Results) DecodeFromPtr(p capnp.Ptr) BootContext_args_Results {
	return BootContext_args_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_args_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_args_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_args_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_args_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_args_Results) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s BootContext_args_Results) HasArgs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_args_Results) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s BootContext_args_Results) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// BootContext_args_Results_List is a list of BootContext_args_Results.
type BootContext_args_Results_List = capnp.StructList[BootContext_args_Results]

// NewBootContext_args_Results creates a new list of BootContext_args_Results.
func NewBootContext_args_Results_List(s *capnp.Segment, sz int32) (BootContext_args_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_args_Results](l), err
}

// BootContext_args_Results_Future is a wrapper for a BootContext_args_Results promised by a client call.
type BootContext_args_Results_Future struct{ *capnp.Future }

func (f BootContext_args_Results_Future) Struct() (BootContext_args_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_args_Results(p.Struct()), err
}

type BootContext_caps_Params capnp.Struct

// BootContext_caps_Params_TypeID is the unique identifier for the type BootContext_caps_Params.
const BootContext_caps_Params_TypeID = 0xb4c6412facf739e9

func NewBootContext_caps_Params(s *capnp.Segment) (BootContext_caps_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_caps_Params(st), err
}

func NewRootBootContext_caps_Params(s *capnp.Segment) (BootContext_caps_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_caps_Params(st), err
}

func ReadRootBootContext_caps_Params(msg *capnp.Message) (BootContext_caps_Params, error) {
	root, err := msg.Root()
	return BootContext_caps_Params(root.Struct()), err
}

func (s BootContext_caps_Params) String() string {
	str, _ := text.Marshal(0xb4c6412facf739e9, capnp.Struct(s))
	return str
}

func (s BootContext_caps_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_caps_Params) DecodeFromPtr(p capnp.Ptr) BootContext_caps_Params {
	return BootContext_caps_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_caps_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_caps_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_caps_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_caps_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_caps_Params_List is a list of BootContext_caps_Params.
type BootContext_caps_Params_List = capnp.StructList[BootContext_caps_Params]

// NewBootContext_caps_Params creates a new list of BootContext_caps_Params.
func NewBootContext_caps_Params_List(s *capnp.Segment, sz int32) (BootContext_caps_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_caps_Params](l), err
}

// BootContext_caps_Params_Future is a wrapper for a BootContext_caps_Params promised by a client call.
type BootContext_caps_Params_Future struct{ *capnp.Future }

func (f BootContext_caps_Params_Future) Struct() (BootContext_caps_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_caps_Params(p.Struct()), err
}

type BootContext_caps_Results capnp.Struct

// BootContext_caps_Results_TypeID is the unique identifier for the type BootContext_caps_Results.
const BootContext_caps_Results_TypeID = 0xccc01fd29eb6c672

func NewBootContext_caps_Results(s *capnp.Segment) (BootContext_caps_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_caps_Results(st), err
}

func NewRootBootContext_caps_Results(s *capnp.Segment) (BootContext_caps_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_caps_Results(st), err
}

func ReadRootBootContext_caps_Results(msg *capnp.Message) (BootContext_caps_Results, error) {
	root, err := msg.Root()
	return BootContext_caps_Results(root.Struct()), err
}

func (s BootContext_caps_Results) String() string {
	str, _ := text.Marshal(0xccc01fd29eb6c672, capnp.Struct(s))
	return str
}

func (s BootContext_caps_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_caps_Results) DecodeFromPtr(p capnp.Ptr) BootContext_caps_Results {
	return BootContext_caps_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_caps_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_caps_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_caps_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_caps_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_caps_Results) Caps() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s BootContext_caps_Results) HasCaps() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_caps_Results) SetCaps(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCaps sets the caps field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s BootContext_caps_Results) NewCaps(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// BootContext_caps_Results_List is a list of BootContext_caps_Results.
type BootContext_caps_Results_List = capnp.StructList[BootContext_caps_Results]

// NewBootContext_caps_Results creates a new list of BootContext_caps_Results.
func NewBootContext_caps_Results_List(s *capnp.Segment, sz int32) (BootContext_caps_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_caps_Results](l), err
}

// BootContext_caps_Results_Future is a wrapper for a BootContext_caps_Results promised by a client call.
type BootContext_caps_Results_Future struct{ *capnp.Future }

func (f BootContext_caps_Results_Future) Struct() (BootContext_caps_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_caps_Results(p.Struct()), err
}

type BootContext_setPid_Params capnp.Struct

// BootContext_setPid_Params_TypeID is the unique identifier for the type BootContext_setPid_Params.
const BootContext_setPid_Params_TypeID = 0x9a476b9f1a755580

func NewBootContext_setPid_Params(s *capnp.Segment) (BootContext_setPid_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_setPid_Params(st), err
}

func NewRootBootContext_setPid_Params(s *capnp.Segment) (BootContext_setPid_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_setPid_Params(st), err
}

func ReadRootBootContext_setPid_Params(msg *capnp.Message) (BootContext_setPid_Params, error) {
	root, err := msg.Root()
	return BootContext_setPid_Params(root.Struct()), err
}

func (s BootContext_setPid_Params) String() string {
	str, _ := text.Marshal(0x9a476b9f1a755580, capnp.Struct(s))
	return str
}

func (s BootContext_setPid_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_setPid_Params) DecodeFromPtr(p capnp.Ptr) BootContext_setPid_Params {
	return BootContext_setPid_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_setPid_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_setPid_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_setPid_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_setPid_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_setPid_Params) Pid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s BootContext_setPid_Params) SetPid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// BootContext_setPid_Params_List is a list of BootContext_setPid_Params.
type BootContext_setPid_Params_List = capnp.StructList[BootContext_setPid_Params]

// NewBootContext_setPid_Params creates a new list of BootContext_setPid_Params.
func NewBootContext_setPid_Params_List(s *capnp.Segment, sz int32) (BootContext_setPid_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_setPid_Params](l), err
}

// BootContext_setPid_Params_Future is a wrapper for a BootContext_setPid_Params promised by a client call.
type BootContext_setPid_Params_Future struct{ *capnp.Future }

func (f BootContext_setPid_Params_Future) Struct() (BootContext_setPid_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_setPid_Params(p.Struct()), err
}

type BootContext_setPid_Results capnp.Struct

// BootContext_setPid_Results_TypeID is the unique identifier for the type BootContext_setPid_Results.
const BootContext_setPid_Results_TypeID = 0xf96299218f4522e8

func NewBootContext_setPid_Results(s *capnp.Segment) (BootContext_setPid_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setPid_Results(st), err
}

func NewRootBootContext_setPid_Results(s *capnp.Segment) (BootContext_setPid_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setPid_Results(st), err
}

func ReadRootBootContext_setPid_Results(msg *capnp.Message) (BootContext_setPid_Results, error) {
	root, err := msg.Root()
	return BootContext_setPid_Results(root.Struct()), err
}

func (s BootContext_setPid_Results) String() string {
	str, _ := text.Marshal(0xf96299218f4522e8, capnp.Struct(s))
	return str
}

func (s BootContext_setPid_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_setPid_Results) DecodeFromPtr(p capnp.Ptr) BootContext_setPid_Results {
	return BootContext_setPid_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_setPid_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_setPid_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_setPid_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_setPid_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_setPid_Results_List is a list of BootContext_setPid_Results.
type BootContext_setPid_Results_List = capnp.StructList[BootContext_setPid_Results]

// NewBootContext_setPid_Results creates a new list of BootContext_setPid_Results.
func NewBootContext_setPid_Results_List(s *capnp.Segment, sz int32) (BootContext_setPid_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_setPid_Results](l), err
}

// BootContext_setPid_Results_Future is a wrapper for a BootContext_setPid_Results promised by a client call.
type BootContext_setPid_Results_Future struct{ *capnp.Future }

func (f BootContext_setPid_Results_Future) Struct() (BootContext_setPid_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_setPid_Results(p.Struct()), err
}

type BootContext_setCid_Params capnp.Struct

// BootContext_setCid_Params_TypeID is the unique identifier for the type BootContext_setCid_Params.
const BootContext_setCid_Params_TypeID = 0x97a28cda532de0ff

func NewBootContext_setCid_Params(s *capnp.Segment) (BootContext_setCid_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_setCid_Params(st), err
}

func NewRootBootContext_setCid_Params(s *capnp.Segment) (BootContext_setCid_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_setCid_Params(st), err
}

func ReadRootBootContext_setCid_Params(msg *capnp.Message) (BootContext_setCid_Params, error) {
	root, err := msg.Root()
	return BootContext_setCid_Params(root.Struct()), err
}

func (s BootContext_setCid_Params) String() string {
	str, _ := text.Marshal(0x97a28cda532de0ff, capnp.Struct(s))
	return str
}

func (s BootContext_setCid_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_setCid_Params) DecodeFromPtr(p capnp.Ptr) BootContext_setCid_Params {
	return BootContext_setCid_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_setCid_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_setCid_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_setCid_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_setCid_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_setCid_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BootContext_setCid_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_setCid_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BootContext_setCid_Params_List is a list of BootContext_setCid_Params.
type BootContext_setCid_Params_List = capnp.StructList[BootContext_setCid_Params]

// NewBootContext_setCid_Params creates a new list of BootContext_setCid_Params.
func NewBootContext_setCid_Params_List(s *capnp.Segment, sz int32) (BootContext_setCid_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_setCid_Params](l), err
}

// BootContext_setCid_Params_Future is a wrapper for a BootContext_setCid_Params promised by a client call.
type BootContext_setCid_Params_Future struct{ *capnp.Future }

func (f BootContext_setCid_Params_Future) Struct() (BootContext_setCid_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_setCid_Params(p.Struct()), err
}

type BootContext_setCid_Results capnp.Struct

// BootContext_setCid_Results_TypeID is the unique identifier for the type BootContext_setCid_Results.
const BootContext_setCid_Results_TypeID = 0xaab0eb92d588b81e

func NewBootContext_setCid_Results(s *capnp.Segment) (BootContext_setCid_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setCid_Results(st), err
}

func NewRootBootContext_setCid_Results(s *capnp.Segment) (BootContext_setCid_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setCid_Results(st), err
}

func ReadRootBootContext_setCid_Results(msg *capnp.Message) (BootContext_setCid_Results, error) {
	root, err := msg.Root()
	return BootContext_setCid_Results(root.Struct()), err
}

func (s BootContext_setCid_Results) String() string {
	str, _ := text.Marshal(0xaab0eb92d588b81e, capnp.Struct(s))
	return str
}

func (s BootContext_setCid_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_setCid_Results) DecodeFromPtr(p capnp.Ptr) BootContext_setCid_Results {
	return BootContext_setCid_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_setCid_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_setCid_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_setCid_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_setCid_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_setCid_Results_List is a list of BootContext_setCid_Results.
type BootContext_setCid_Results_List = capnp.StructList[BootContext_setCid_Results]

// NewBootContext_setCid_Results creates a new list of BootContext_setCid_Results.
func NewBootContext_setCid_Results_List(s *capnp.Segment, sz int32) (BootContext_setCid_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_setCid_Results](l), err
}

// BootContext_setCid_Results_Future is a wrapper for a BootContext_setCid_Results promised by a client call.
type BootContext_setCid_Results_Future struct{ *capnp.Future }

func (f BootContext_setCid_Results_Future) Struct() (BootContext_setCid_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_setCid_Results(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda\x9cV]h\x1cU\x14>g~74\x9b\xe5" +
	"\xeehmCmL\x9a(\x896\xc9\x1a|H\x04\xb3" +
	"\xe9RB\xa2\xc2N$\x0f*)\x99l\x86\xec\x92\xd8" +
	",\x99Y\xd2\x82\x05\xf3 U\xb0H\x8bP\x13\x8aV" +
	"\xb16\x91V\xdaX\x82\x85\"\xa24}\xb1JS\x83" +
	"\x1a\x15J5R\x09T\x05\x8d,HW\xee\x9d\xbd\xd3" +
	"Ig\xb7\xbb\xf4e\xd9\xe1\x9e\xf3\x9d\xf3}\xe7\xcew" +
	"\xa65,F\xa5H0W\x01\x82n\xcbJ\xaeq\xf6" +
	"\xa7o\x9e\xec\xbbp\x08H5\x02H*@\xdb\xaa\xd4" +
	"\x84 \xe5>{\xaa\xb9)\x14^8\x0cd\x1b\x02\xc8" +
	"H\x8f.K\x1d\x08\xa8-K\x9d\x80\xb9\xdc\xb5\x9d\xcf" +
	"\xad\xbc\xf1\xfeQ'\xd5\x09\xc8J\xbbh\x00\xca4\xe0" +
	"\x95\xfeL\xf5\xbb\xa3\xdd3\xa0W#\x07\xaf\x95Y@" +
	"#\x0b\xb8t\xfcB\xff|p\xf0\xa4\xa7x\x8f\xcc\x8a" +
	"o\xff\xf4\xb5\xe5#kg>\xf2\x9cD\xe4^z\xf2" +
	"\xb7h\xbfx\xf1\xaf\xc5yo[\x0f:\xa0\x0d\x0c\xf4" +
	"\xf7\xf6\x7fO\xb5t-\x9e\xdb\x00\xfa8M\xed\xbfu" +
	"\xacg\xf6\x81\x17\xbe\xf0\xa6Fd\xc6\xa8\x9d\xa5\xde<" +
	"\xfa\xad5\x9f\x8c\\\x04\xb2\x99\xa7>/W\xd3\xd4\x89" +
	"\xc5\x85w\x96j>\xff\xca\xcb\xb5\xcbI\xeda\xa9\xa7" +
	"\xba[\xeb\x8f\x9fk\xfa\x0e\xf4\xcd.\xd7\xfd4\x17\xb5" +
	")\x16\xa0=\xbbi2v\xa0n\xc5\x8bp\x82\xf6\x85" +
	"\xdai\x16\xd0\xa64\xcc^\xfds\xc7\x0a\x90*1\x97" +
	"\x98|d2\xb2\xaa\xcf\x00\xa0vY\x9e\xd7\x96e\x15" +
	"@\xbb\"\x1f\xd4j\x15\x15 \x17h\xf9:9\xb86" +
	"\xb3\x01\xadBa\xfd\x10\x85\xa2-l\xfa\xfe\xc8\x9e\xd1" +
	"\x87\x7f\xf6\xa8\xd0\xa50\x15l\xacX\x17\x7f}\xe67" +
	"_\x9dF\xe5\xba\xf6\x04E\xd7\"\xca%m\x8e\xd5Y" +
	"h\xfdp\xe0\xd5\x0f\x9e\xbe\xe1\x1d\xe1a\x85u=\xcd" +
	"\xeat\x0f\xb4\x9c\xd9\xfa\xf1\xc9\x9b\x1e\xc9\xce+aZ" +
	"\xa7\xea\xedk\xb7v<:\xf4\x87\xaf\xce{\xca\x92v" +
	"\x9a\xa2\xb7\xcd)\x07Q\x9bVi\xa1\xe4\xf9\x87\xfe\xbb" +
	"z`\xfb?\xde\xd9L\xa9l\xac\xaf\xab\xb4\xd0\xcb\xb3" +
	"k\x99c\xe1\xb7\xd6\xbd\x01s*c|\x96\x05\x84\xf6" +
	"\xac\x7f\xb9\xf4\xd8`\x16\xf4mn\xabW\x1c\x84\x1fX" +
	"\xc0\x8d\xba\xddo\xd6N\x0fe=\x92dUv\xa7~" +
	"\xf9\xe4\xc7\xc0\xf5\xdeT\xd6CbU\x0d#\xb4\xe6\xd2" +
	"\x13\xe3\x09\xd3\xb2\x9a\xc5\x84\x91\xde\x9b\xee\xd85>n" +
	"\xc7\xc6\xf7\xda\xe6>\xbb9\x91\x1a\xae\x8f\x1b\xa1\x09\xe3" +
	"%\xcb\x17\xb6\xdf6\x13\xe3\xc3f\xccH$\xcd\xe6t" +
	"\xc6\xae\xef\x8c\x1b4P\x97D\x09@B\x00\x12\xec\x05" +
	"\xd0+E\xd4\xb7\x08\x98\x1b\xca'\x00\x00\x06A\xc0 " +
	"\xa0\x8b)\xf9K[\xa6\x1dc\xd5)&xA\xeb\x00" +
	"\xf4\x80\x88\xfa}\x02\xaa\x89\xd4p\x99`\xf1\xd2`\xe9" +
	"\xd40\x06@\xc0\x80\x07\xac\x80(\xe9\x02\xa2\x14'\xd0" +
	"gZ\x991\xdb\x02\xf0\xc5n\x10p\xc4\xb4\xdd\xd0{" +
	"Q\xb0\xd0\xf0\x8c\xb4U\x1f\xaf1JO/iX\x85" +
	"\xa6WJ\xe8<V<\xff8\x9a\x1a\x1bs8\x88\xb6" +
	"U\xb2\xb1\xbeN\x87\xad\xb7`S\xbe`\xbd\x80!\x1a" +
	"\x84U\x80q\x111,\x89\x80\xf4\xa1X\xe9I#e" +
	"\xbb\xa5\x8b\xc9g\xeeK\xd9\xb1\xbc|e\x8c9\xc1\x86" +
	"W\xe3k\xb2\x94*\xc8[\xaba\xcfqD= \xca" +
	"\x00\xee\x1b\x88\xdcGI\xa4\x09\x04\xd2\xa0\xe2m\x8bA" +
	"n\xcfd+=\x0b\xaa!J-\x8a!*n\x14\xe3" +
	"x\xd7\x96\x8d\x89\x91\xd2\xc2\xd2 .l%\x08\x85d" +
	"\xf5a\xdey\x8b\x84;o\x91\x9aH\x9a\x94i%c" +
	"\xca\xd7*r\xc7#z\x1d\x08d7e\xca=\x0e\xf9" +
	"\x92#\xed\xf4l\xa7\x8a\x82\xbb\xbc\x90\xfb\x1c\xa9\xa5g" +
	"\xf7\xabj:cGQ\x1d1\xe9o\xd2\xb0J*\x91" +
	".cxwy\xdd7\\i\xf6b\xa0\x9f\xbc[\x0e" +
	"mJ}\x0b\xa3\xce\xd7=\xf2\xadB\xceR\x0a'(" +
	"u\xfe\x1d\x82|O\x92izv\x88R\xe7\xbb\x0c\xf9" +
	"\xd6#S\xf4\x02dT\x14\xddm\x8f|C\x93\x14=" +
	"\x1bPQr\xbf?\x90;?\xd1;\x1c\xa9e\xf7\xe3" +
	"\x05\xf9\x97\x06i\xef`RS\xeaQv{\xa3\xce}" +
	"\x88:\xef[\x14;\x1d\xa7t\xfe\xc4\xe8\x1f\xaf\xd0R" +
	"1\xeb/\xe4\\e\xba\x87\xdf\x06\xef\xc1\x89\xa4b\xae" +
	"V\xaa\xb1\xa4a!\x82\x80X\xd6\xfe\xf0{y!\x1f" +
	"\xca\xdf\x97\xff\x03\x00\x00\xff\xff1\xca\xf2\xf5"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9a51e53177277763,
		Nodes: []uint64{
			0x8dbc523bcfdca829,
			0x91b6120f2a2e3ebe,
			0x97a28cda532de0ff,
			0x9a476b9f1a755580,
			0xa7600db255bca0c7,
			0xaab0eb92d588b81e,
			0xb2c6f1c55b7403f4,
			0xb4c6412facf739e9,
			0xc25a17a8499cfe55,
			0xc53168b273d497ee,
			0xccc01fd29eb6c672,
			0xd72ab4a0243047ac,
			0xda227d43770b4d13,
			0xda23f0d3a8250633,
			0xda9aeb6068ce2f08,
			0xdd266b5e92d80bb6,
			0xe64ce403f6090174,
			0xe84ba4855da630b6,
			0xeea7ae19b02f5d47,
			0xef622b23fee0980e,
			0xf51e7dd3fc20b968,
			0xf694129c75eba87c,
			0xf9602cd2c3f65e0f,
			0xf96299218f4522e8,
			0xf9694ae208dbb3e3,
		},
		Compressed: true,
	})
}
