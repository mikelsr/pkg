// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type BytecodeCache capnp.Client

// BytecodeCache_TypeID is the unique identifier for the type BytecodeCache.
const BytecodeCache_TypeID = 0xe64ce403f6090174

func (c BytecodeCache) Put(ctx context.Context, params func(BytecodeCache_put_Params) error) (BytecodeCache_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_put_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Get(ctx context.Context, params func(BytecodeCache_get_Params) error) (BytecodeCache_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_get_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Has(ctx context.Context, params func(BytecodeCache_has_Params) error) (BytecodeCache_has_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_has_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_has_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BytecodeCache) String() string {
	return "BytecodeCache(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BytecodeCache) AddRef() BytecodeCache {
	return BytecodeCache(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BytecodeCache) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BytecodeCache) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BytecodeCache) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BytecodeCache) DecodeFromPtr(p capnp.Ptr) BytecodeCache {
	return BytecodeCache(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BytecodeCache) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BytecodeCache) IsSame(other BytecodeCache) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BytecodeCache) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BytecodeCache) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BytecodeCache_Server is a BytecodeCache with a local implementation.
type BytecodeCache_Server interface {
	Put(context.Context, BytecodeCache_put) error

	Get(context.Context, BytecodeCache_get) error

	Has(context.Context, BytecodeCache_has) error
}

// BytecodeCache_NewServer creates a new Server from an implementation of BytecodeCache_Server.
func BytecodeCache_NewServer(s BytecodeCache_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BytecodeCache_Methods(nil, s), s, c)
}

// BytecodeCache_ServerToClient creates a new Client from an implementation of BytecodeCache_Server.
// The caller is responsible for calling Release on the returned Client.
func BytecodeCache_ServerToClient(s BytecodeCache_Server) BytecodeCache {
	return BytecodeCache(capnp.NewClient(BytecodeCache_NewServer(s)))
}

// BytecodeCache_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BytecodeCache_Methods(methods []server.Method, s BytecodeCache_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, BytecodeCache_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, BytecodeCache_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Has(ctx, BytecodeCache_has{call})
		},
	})

	return methods
}

// BytecodeCache_put holds the state for a server call to BytecodeCache.put.
// See server.Call for documentation.
type BytecodeCache_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_put) Args() BytecodeCache_put_Params {
	return BytecodeCache_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_put) AllocResults() (BytecodeCache_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(r), err
}

// BytecodeCache_get holds the state for a server call to BytecodeCache.get.
// See server.Call for documentation.
type BytecodeCache_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_get) Args() BytecodeCache_get_Params {
	return BytecodeCache_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_get) AllocResults() (BytecodeCache_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(r), err
}

// BytecodeCache_has holds the state for a server call to BytecodeCache.has.
// See server.Call for documentation.
type BytecodeCache_has struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_has) Args() BytecodeCache_has_Params {
	return BytecodeCache_has_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_has) AllocResults() (BytecodeCache_has_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(r), err
}

// BytecodeCache_List is a list of BytecodeCache.
type BytecodeCache_List = capnp.CapList[BytecodeCache]

// NewBytecodeCache creates a new list of BytecodeCache.
func NewBytecodeCache_List(s *capnp.Segment, sz int32) (BytecodeCache_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BytecodeCache](l), err
}

type BytecodeCache_put_Params capnp.Struct

// BytecodeCache_put_Params_TypeID is the unique identifier for the type BytecodeCache_put_Params.
const BytecodeCache_put_Params_TypeID = 0x91b6120f2a2e3ebe

func NewBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func NewRootBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func ReadRootBytecodeCache_put_Params(msg *capnp.Message) (BytecodeCache_put_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Params(root.Struct()), err
}

func (s BytecodeCache_put_Params) String() string {
	str, _ := text.Marshal(0x91b6120f2a2e3ebe, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Params {
	return BytecodeCache_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Params_List is a list of BytecodeCache_put_Params.
type BytecodeCache_put_Params_List = capnp.StructList[BytecodeCache_put_Params]

// NewBytecodeCache_put_Params creates a new list of BytecodeCache_put_Params.
func NewBytecodeCache_put_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Params](l), err
}

// BytecodeCache_put_Params_Future is a wrapper for a BytecodeCache_put_Params promised by a client call.
type BytecodeCache_put_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Params_Future) Struct() (BytecodeCache_put_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Params(p.Struct()), err
}

type BytecodeCache_put_Results capnp.Struct

// BytecodeCache_put_Results_TypeID is the unique identifier for the type BytecodeCache_put_Results.
const BytecodeCache_put_Results_TypeID = 0xf51e7dd3fc20b968

func NewBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func NewRootBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func ReadRootBytecodeCache_put_Results(msg *capnp.Message) (BytecodeCache_put_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Results(root.Struct()), err
}

func (s BytecodeCache_put_Results) String() string {
	str, _ := text.Marshal(0xf51e7dd3fc20b968, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Results {
	return BytecodeCache_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Results) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Results) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Results_List is a list of BytecodeCache_put_Results.
type BytecodeCache_put_Results_List = capnp.StructList[BytecodeCache_put_Results]

// NewBytecodeCache_put_Results creates a new list of BytecodeCache_put_Results.
func NewBytecodeCache_put_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Results](l), err
}

// BytecodeCache_put_Results_Future is a wrapper for a BytecodeCache_put_Results promised by a client call.
type BytecodeCache_put_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Results_Future) Struct() (BytecodeCache_put_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Results(p.Struct()), err
}

type BytecodeCache_get_Params capnp.Struct

// BytecodeCache_get_Params_TypeID is the unique identifier for the type BytecodeCache_get_Params.
const BytecodeCache_get_Params_TypeID = 0xf694129c75eba87c

func NewBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func NewRootBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func ReadRootBytecodeCache_get_Params(msg *capnp.Message) (BytecodeCache_get_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Params(root.Struct()), err
}

func (s BytecodeCache_get_Params) String() string {
	str, _ := text.Marshal(0xf694129c75eba87c, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Params {
	return BytecodeCache_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Params_List is a list of BytecodeCache_get_Params.
type BytecodeCache_get_Params_List = capnp.StructList[BytecodeCache_get_Params]

// NewBytecodeCache_get_Params creates a new list of BytecodeCache_get_Params.
func NewBytecodeCache_get_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Params](l), err
}

// BytecodeCache_get_Params_Future is a wrapper for a BytecodeCache_get_Params promised by a client call.
type BytecodeCache_get_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Params_Future) Struct() (BytecodeCache_get_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Params(p.Struct()), err
}

type BytecodeCache_get_Results capnp.Struct

// BytecodeCache_get_Results_TypeID is the unique identifier for the type BytecodeCache_get_Results.
const BytecodeCache_get_Results_TypeID = 0xb2c6f1c55b7403f4

func NewBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func NewRootBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func ReadRootBytecodeCache_get_Results(msg *capnp.Message) (BytecodeCache_get_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Results(root.Struct()), err
}

func (s BytecodeCache_get_Results) String() string {
	str, _ := text.Marshal(0xb2c6f1c55b7403f4, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Results {
	return BytecodeCache_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Results) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Results) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Results) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Results_List is a list of BytecodeCache_get_Results.
type BytecodeCache_get_Results_List = capnp.StructList[BytecodeCache_get_Results]

// NewBytecodeCache_get_Results creates a new list of BytecodeCache_get_Results.
func NewBytecodeCache_get_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Results](l), err
}

// BytecodeCache_get_Results_Future is a wrapper for a BytecodeCache_get_Results promised by a client call.
type BytecodeCache_get_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Results_Future) Struct() (BytecodeCache_get_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Results(p.Struct()), err
}

type BytecodeCache_has_Params capnp.Struct

// BytecodeCache_has_Params_TypeID is the unique identifier for the type BytecodeCache_has_Params.
const BytecodeCache_has_Params_TypeID = 0xc25a17a8499cfe55

func NewBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func NewRootBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func ReadRootBytecodeCache_has_Params(msg *capnp.Message) (BytecodeCache_has_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Params(root.Struct()), err
}

func (s BytecodeCache_has_Params) String() string {
	str, _ := text.Marshal(0xc25a17a8499cfe55, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Params {
	return BytecodeCache_has_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_has_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_has_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_has_Params_List is a list of BytecodeCache_has_Params.
type BytecodeCache_has_Params_List = capnp.StructList[BytecodeCache_has_Params]

// NewBytecodeCache_has_Params creates a new list of BytecodeCache_has_Params.
func NewBytecodeCache_has_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_has_Params](l), err
}

// BytecodeCache_has_Params_Future is a wrapper for a BytecodeCache_has_Params promised by a client call.
type BytecodeCache_has_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Params_Future) Struct() (BytecodeCache_has_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Params(p.Struct()), err
}

type BytecodeCache_has_Results capnp.Struct

// BytecodeCache_has_Results_TypeID is the unique identifier for the type BytecodeCache_has_Results.
const BytecodeCache_has_Results_TypeID = 0xf9602cd2c3f65e0f

func NewBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func NewRootBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func ReadRootBytecodeCache_has_Results(msg *capnp.Message) (BytecodeCache_has_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Results(root.Struct()), err
}

func (s BytecodeCache_has_Results) String() string {
	str, _ := text.Marshal(0xf9602cd2c3f65e0f, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Results {
	return BytecodeCache_has_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Results) Has() bool {
	return capnp.Struct(s).Bit(0)
}

func (s BytecodeCache_has_Results) SetHas(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// BytecodeCache_has_Results_List is a list of BytecodeCache_has_Results.
type BytecodeCache_has_Results_List = capnp.StructList[BytecodeCache_has_Results]

// NewBytecodeCache_has_Results creates a new list of BytecodeCache_has_Results.
func NewBytecodeCache_has_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BytecodeCache_has_Results](l), err
}

// BytecodeCache_has_Results_Future is a wrapper for a BytecodeCache_has_Results promised by a client call.
type BytecodeCache_has_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Results_Future) Struct() (BytecodeCache_has_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Results(p.Struct()), err
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release

}

func (c Process) Kill(ctx context.Context, params func(Process_kill_Params) error) (Process_kill_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_kill_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_kill_Results_Future{Future: ans.Future()}, release

}

func (c Process) Link(ctx context.Context, params func(Process_link_Params) error) (Process_link_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "link",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_link_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_link_Results_Future{Future: ans.Future()}, release

}

func (c Process) Unlink(ctx context.Context, params func(Process_unlink_Params) error) (Process_unlink_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      3,
			InterfaceName: "process.capnp:Process",
			MethodName:    "unlink",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_unlink_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_unlink_Results_Future{Future: ans.Future()}, release

}

func (c Process) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return "Process(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Wait(context.Context, Process_wait) error

	Kill(context.Context, Process_kill) error

	Link(context.Context, Process_link) error

	Unlink(context.Context, Process_unlink) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Kill(ctx, Process_kill{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "link",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Link(ctx, Process_link{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      3,
			InterfaceName: "process.capnp:Process",
			MethodName:    "unlink",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unlink(ctx, Process_unlink{call})
		},
	})

	return methods
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(r), err
}

// Process_kill holds the state for a server call to Process.kill.
// See server.Call for documentation.
type Process_kill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_kill) Args() Process_kill_Params {
	return Process_kill_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_kill) AllocResults() (Process_kill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(r), err
}

// Process_link holds the state for a server call to Process.link.
// See server.Call for documentation.
type Process_link struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_link) Args() Process_link_Params {
	return Process_link_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_link) AllocResults() (Process_link_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_link_Results(r), err
}

// Process_unlink holds the state for a server call to Process.unlink.
// See server.Call for documentation.
type Process_unlink struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_unlink) Args() Process_unlink_Params {
	return Process_unlink_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_unlink) AllocResults() (Process_unlink_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlink_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_wait_Results) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}

type Process_kill_Params capnp.Struct

// Process_kill_Params_TypeID is the unique identifier for the type Process_kill_Params.
const Process_kill_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func NewRootProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func ReadRootProcess_kill_Params(msg *capnp.Message) (Process_kill_Params, error) {
	root, err := msg.Root()
	return Process_kill_Params(root.Struct()), err
}

func (s Process_kill_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_kill_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Params) DecodeFromPtr(p capnp.Ptr) Process_kill_Params {
	return Process_kill_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Params_List is a list of Process_kill_Params.
type Process_kill_Params_List = capnp.StructList[Process_kill_Params]

// NewProcess_kill_Params creates a new list of Process_kill_Params.
func NewProcess_kill_Params_List(s *capnp.Segment, sz int32) (Process_kill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Params](l), err
}

// Process_kill_Params_Future is a wrapper for a Process_kill_Params promised by a client call.
type Process_kill_Params_Future struct{ *capnp.Future }

func (f Process_kill_Params_Future) Struct() (Process_kill_Params, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Params(p.Struct()), err
}

type Process_kill_Results capnp.Struct

// Process_kill_Results_TypeID is the unique identifier for the type Process_kill_Results.
const Process_kill_Results_TypeID = 0xc53168b273d497ee

func NewProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func NewRootProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func ReadRootProcess_kill_Results(msg *capnp.Message) (Process_kill_Results, error) {
	root, err := msg.Root()
	return Process_kill_Results(root.Struct()), err
}

func (s Process_kill_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_kill_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Results) DecodeFromPtr(p capnp.Ptr) Process_kill_Results {
	return Process_kill_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Results_List is a list of Process_kill_Results.
type Process_kill_Results_List = capnp.StructList[Process_kill_Results]

// NewProcess_kill_Results creates a new list of Process_kill_Results.
func NewProcess_kill_Results_List(s *capnp.Segment, sz int32) (Process_kill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Results](l), err
}

// Process_kill_Results_Future is a wrapper for a Process_kill_Results promised by a client call.
type Process_kill_Results_Future struct{ *capnp.Future }

func (f Process_kill_Results_Future) Struct() (Process_kill_Results, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Results(p.Struct()), err
}

type Process_link_Params capnp.Struct

// Process_link_Params_TypeID is the unique identifier for the type Process_link_Params.
const Process_link_Params_TypeID = 0xd22f75df06c187e8

func NewProcess_link_Params(s *capnp.Segment) (Process_link_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_link_Params(st), err
}

func NewRootProcess_link_Params(s *capnp.Segment) (Process_link_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_link_Params(st), err
}

func ReadRootProcess_link_Params(msg *capnp.Message) (Process_link_Params, error) {
	root, err := msg.Root()
	return Process_link_Params(root.Struct()), err
}

func (s Process_link_Params) String() string {
	str, _ := text.Marshal(0xd22f75df06c187e8, capnp.Struct(s))
	return str
}

func (s Process_link_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_link_Params) DecodeFromPtr(p capnp.Ptr) Process_link_Params {
	return Process_link_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_link_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_link_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_link_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_link_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_link_Params) Other() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_link_Params) SetOther(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_link_Params_List is a list of Process_link_Params.
type Process_link_Params_List = capnp.StructList[Process_link_Params]

// NewProcess_link_Params creates a new list of Process_link_Params.
func NewProcess_link_Params_List(s *capnp.Segment, sz int32) (Process_link_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_link_Params](l), err
}

// Process_link_Params_Future is a wrapper for a Process_link_Params promised by a client call.
type Process_link_Params_Future struct{ *capnp.Future }

func (f Process_link_Params_Future) Struct() (Process_link_Params, error) {
	p, err := f.Future.Ptr()
	return Process_link_Params(p.Struct()), err
}

type Process_link_Results capnp.Struct

// Process_link_Results_TypeID is the unique identifier for the type Process_link_Results.
const Process_link_Results_TypeID = 0x9d6074459fa0602b

func NewProcess_link_Results(s *capnp.Segment) (Process_link_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_link_Results(st), err
}

func NewRootProcess_link_Results(s *capnp.Segment) (Process_link_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_link_Results(st), err
}

func ReadRootProcess_link_Results(msg *capnp.Message) (Process_link_Results, error) {
	root, err := msg.Root()
	return Process_link_Results(root.Struct()), err
}

func (s Process_link_Results) String() string {
	str, _ := text.Marshal(0x9d6074459fa0602b, capnp.Struct(s))
	return str
}

func (s Process_link_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_link_Results) DecodeFromPtr(p capnp.Ptr) Process_link_Results {
	return Process_link_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_link_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_link_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_link_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_link_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_link_Results_List is a list of Process_link_Results.
type Process_link_Results_List = capnp.StructList[Process_link_Results]

// NewProcess_link_Results creates a new list of Process_link_Results.
func NewProcess_link_Results_List(s *capnp.Segment, sz int32) (Process_link_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_link_Results](l), err
}

// Process_link_Results_Future is a wrapper for a Process_link_Results promised by a client call.
type Process_link_Results_Future struct{ *capnp.Future }

func (f Process_link_Results_Future) Struct() (Process_link_Results, error) {
	p, err := f.Future.Ptr()
	return Process_link_Results(p.Struct()), err
}

type Process_unlink_Params capnp.Struct

// Process_unlink_Params_TypeID is the unique identifier for the type Process_unlink_Params.
const Process_unlink_Params_TypeID = 0x86e3410d1abd406b

func NewProcess_unlink_Params(s *capnp.Segment) (Process_unlink_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_unlink_Params(st), err
}

func NewRootProcess_unlink_Params(s *capnp.Segment) (Process_unlink_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_unlink_Params(st), err
}

func ReadRootProcess_unlink_Params(msg *capnp.Message) (Process_unlink_Params, error) {
	root, err := msg.Root()
	return Process_unlink_Params(root.Struct()), err
}

func (s Process_unlink_Params) String() string {
	str, _ := text.Marshal(0x86e3410d1abd406b, capnp.Struct(s))
	return str
}

func (s Process_unlink_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_unlink_Params) DecodeFromPtr(p capnp.Ptr) Process_unlink_Params {
	return Process_unlink_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_unlink_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_unlink_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_unlink_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_unlink_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_unlink_Params) Other() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_unlink_Params) SetOther(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_unlink_Params_List is a list of Process_unlink_Params.
type Process_unlink_Params_List = capnp.StructList[Process_unlink_Params]

// NewProcess_unlink_Params creates a new list of Process_unlink_Params.
func NewProcess_unlink_Params_List(s *capnp.Segment, sz int32) (Process_unlink_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_unlink_Params](l), err
}

// Process_unlink_Params_Future is a wrapper for a Process_unlink_Params promised by a client call.
type Process_unlink_Params_Future struct{ *capnp.Future }

func (f Process_unlink_Params_Future) Struct() (Process_unlink_Params, error) {
	p, err := f.Future.Ptr()
	return Process_unlink_Params(p.Struct()), err
}

type Process_unlink_Results capnp.Struct

// Process_unlink_Results_TypeID is the unique identifier for the type Process_unlink_Results.
const Process_unlink_Results_TypeID = 0xd93c9aa0627bc93c

func NewProcess_unlink_Results(s *capnp.Segment) (Process_unlink_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlink_Results(st), err
}

func NewRootProcess_unlink_Results(s *capnp.Segment) (Process_unlink_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_unlink_Results(st), err
}

func ReadRootProcess_unlink_Results(msg *capnp.Message) (Process_unlink_Results, error) {
	root, err := msg.Root()
	return Process_unlink_Results(root.Struct()), err
}

func (s Process_unlink_Results) String() string {
	str, _ := text.Marshal(0xd93c9aa0627bc93c, capnp.Struct(s))
	return str
}

func (s Process_unlink_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_unlink_Results) DecodeFromPtr(p capnp.Ptr) Process_unlink_Results {
	return Process_unlink_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_unlink_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_unlink_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_unlink_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_unlink_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_unlink_Results_List is a list of Process_unlink_Results.
type Process_unlink_Results_List = capnp.StructList[Process_unlink_Results]

// NewProcess_unlink_Results creates a new list of Process_unlink_Results.
func NewProcess_unlink_Results_List(s *capnp.Segment, sz int32) (Process_unlink_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_unlink_Results](l), err
}

// Process_unlink_Results_Future is a wrapper for a Process_unlink_Results promised by a client call.
type Process_unlink_Results_Future struct{ *capnp.Future }

func (f Process_unlink_Results_Future) Struct() (Process_unlink_Results, error) {
	p, err := f.Future.Ptr()
	return Process_unlink_Results(p.Struct()), err
}

type Info capnp.Struct

// Info_TypeID is the unique identifier for the type Info.
const Info_TypeID = 0xc3153fa5a13d8a26

func NewInfo(s *capnp.Segment) (Info, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Info(st), err
}

func NewRootInfo(s *capnp.Segment) (Info, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Info(st), err
}

func ReadRootInfo(msg *capnp.Message) (Info, error) {
	root, err := msg.Root()
	return Info(root.Struct()), err
}

func (s Info) String() string {
	str, _ := text.Marshal(0xc3153fa5a13d8a26, capnp.Struct(s))
	return str
}

func (s Info) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Info) DecodeFromPtr(p capnp.Ptr) Info {
	return Info(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Info) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Info) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Info) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Info) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Info) Pid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Info) SetPid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Info) Ppid() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Info) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Info) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Info) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Info) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Info) Argv() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Info) HasArgv() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Info) SetArgv(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewArgv sets the argv field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Info) NewArgv(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Info) Time() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Info) SetTime(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// Info_List is a list of Info.
type Info_List = capnp.StructList[Info]

// NewInfo creates a new list of Info.
func NewInfo_List(s *capnp.Segment, sz int32) (Info_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Info](l), err
}

// Info_Future is a wrapper for a Info promised by a client call.
type Info_Future struct{ *capnp.Future }

func (f Info_Future) Struct() (Info, error) {
	p, err := f.Future.Ptr()
	return Info(p.Struct()), err
}

type BootContext capnp.Client

// BootContext_TypeID is the unique identifier for the type BootContext.
const BootContext_TypeID = 0xef622b23fee0980e

func (c BootContext) Pid(ctx context.Context, params func(BootContext_pid_Params) error) (BootContext_pid_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      0,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "pid",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_pid_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_pid_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) Cid(ctx context.Context, params func(BootContext_cid_Params) error) (BootContext_cid_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      1,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "cid",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_cid_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_cid_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) Args(ctx context.Context, params func(BootContext_args_Params) error) (BootContext_args_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      2,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "args",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_args_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_args_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) Caps(ctx context.Context, params func(BootContext_caps_Params) error) (BootContext_caps_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      3,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "caps",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_caps_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_caps_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) SetPid(ctx context.Context, params func(BootContext_setPid_Params) error) (BootContext_setPid_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      4,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "setPid",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_setPid_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_setPid_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) SetCid(ctx context.Context, params func(BootContext_setCid_Params) error) (BootContext_setCid_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      5,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "setCid",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_setCid_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_setCid_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BootContext) String() string {
	return "BootContext(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BootContext) AddRef() BootContext {
	return BootContext(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BootContext) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BootContext) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BootContext) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BootContext) DecodeFromPtr(p capnp.Ptr) BootContext {
	return BootContext(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BootContext) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BootContext) IsSame(other BootContext) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BootContext) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BootContext) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BootContext_Server is a BootContext with a local implementation.
type BootContext_Server interface {
	Pid(context.Context, BootContext_pid) error

	Cid(context.Context, BootContext_cid) error

	Args(context.Context, BootContext_args) error

	Caps(context.Context, BootContext_caps) error

	SetPid(context.Context, BootContext_setPid) error

	SetCid(context.Context, BootContext_setCid) error
}

// BootContext_NewServer creates a new Server from an implementation of BootContext_Server.
func BootContext_NewServer(s BootContext_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BootContext_Methods(nil, s), s, c)
}

// BootContext_ServerToClient creates a new Client from an implementation of BootContext_Server.
// The caller is responsible for calling Release on the returned Client.
func BootContext_ServerToClient(s BootContext_Server) BootContext {
	return BootContext(capnp.NewClient(BootContext_NewServer(s)))
}

// BootContext_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BootContext_Methods(methods []server.Method, s BootContext_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      0,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "pid",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Pid(ctx, BootContext_pid{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      1,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "cid",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cid(ctx, BootContext_cid{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      2,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "args",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Args(ctx, BootContext_args{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      3,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "caps",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Caps(ctx, BootContext_caps{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      4,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "setPid",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetPid(ctx, BootContext_setPid{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      5,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "setCid",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetCid(ctx, BootContext_setCid{call})
		},
	})

	return methods
}

// BootContext_pid holds the state for a server call to BootContext.pid.
// See server.Call for documentation.
type BootContext_pid struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_pid) Args() BootContext_pid_Params {
	return BootContext_pid_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_pid) AllocResults() (BootContext_pid_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_pid_Results(r), err
}

// BootContext_cid holds the state for a server call to BootContext.cid.
// See server.Call for documentation.
type BootContext_cid struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_cid) Args() BootContext_cid_Params {
	return BootContext_cid_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_cid) AllocResults() (BootContext_cid_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_cid_Results(r), err
}

// BootContext_args holds the state for a server call to BootContext.args.
// See server.Call for documentation.
type BootContext_args struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_args) Args() BootContext_args_Params {
	return BootContext_args_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_args) AllocResults() (BootContext_args_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_args_Results(r), err
}

// BootContext_caps holds the state for a server call to BootContext.caps.
// See server.Call for documentation.
type BootContext_caps struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_caps) Args() BootContext_caps_Params {
	return BootContext_caps_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_caps) AllocResults() (BootContext_caps_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_caps_Results(r), err
}

// BootContext_setPid holds the state for a server call to BootContext.setPid.
// See server.Call for documentation.
type BootContext_setPid struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_setPid) Args() BootContext_setPid_Params {
	return BootContext_setPid_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_setPid) AllocResults() (BootContext_setPid_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setPid_Results(r), err
}

// BootContext_setCid holds the state for a server call to BootContext.setCid.
// See server.Call for documentation.
type BootContext_setCid struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_setCid) Args() BootContext_setCid_Params {
	return BootContext_setCid_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_setCid) AllocResults() (BootContext_setCid_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setCid_Results(r), err
}

// BootContext_List is a list of BootContext.
type BootContext_List = capnp.CapList[BootContext]

// NewBootContext creates a new list of BootContext.
func NewBootContext_List(s *capnp.Segment, sz int32) (BootContext_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BootContext](l), err
}

type BootContext_pid_Params capnp.Struct

// BootContext_pid_Params_TypeID is the unique identifier for the type BootContext_pid_Params.
const BootContext_pid_Params_TypeID = 0xa7600db255bca0c7

func NewBootContext_pid_Params(s *capnp.Segment) (BootContext_pid_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_pid_Params(st), err
}

func NewRootBootContext_pid_Params(s *capnp.Segment) (BootContext_pid_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_pid_Params(st), err
}

func ReadRootBootContext_pid_Params(msg *capnp.Message) (BootContext_pid_Params, error) {
	root, err := msg.Root()
	return BootContext_pid_Params(root.Struct()), err
}

func (s BootContext_pid_Params) String() string {
	str, _ := text.Marshal(0xa7600db255bca0c7, capnp.Struct(s))
	return str
}

func (s BootContext_pid_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_pid_Params) DecodeFromPtr(p capnp.Ptr) BootContext_pid_Params {
	return BootContext_pid_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_pid_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_pid_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_pid_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_pid_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_pid_Params_List is a list of BootContext_pid_Params.
type BootContext_pid_Params_List = capnp.StructList[BootContext_pid_Params]

// NewBootContext_pid_Params creates a new list of BootContext_pid_Params.
func NewBootContext_pid_Params_List(s *capnp.Segment, sz int32) (BootContext_pid_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_pid_Params](l), err
}

// BootContext_pid_Params_Future is a wrapper for a BootContext_pid_Params promised by a client call.
type BootContext_pid_Params_Future struct{ *capnp.Future }

func (f BootContext_pid_Params_Future) Struct() (BootContext_pid_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_pid_Params(p.Struct()), err
}

type BootContext_pid_Results capnp.Struct

// BootContext_pid_Results_TypeID is the unique identifier for the type BootContext_pid_Results.
const BootContext_pid_Results_TypeID = 0xe84ba4855da630b6

func NewBootContext_pid_Results(s *capnp.Segment) (BootContext_pid_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_pid_Results(st), err
}

func NewRootBootContext_pid_Results(s *capnp.Segment) (BootContext_pid_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_pid_Results(st), err
}

func ReadRootBootContext_pid_Results(msg *capnp.Message) (BootContext_pid_Results, error) {
	root, err := msg.Root()
	return BootContext_pid_Results(root.Struct()), err
}

func (s BootContext_pid_Results) String() string {
	str, _ := text.Marshal(0xe84ba4855da630b6, capnp.Struct(s))
	return str
}

func (s BootContext_pid_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_pid_Results) DecodeFromPtr(p capnp.Ptr) BootContext_pid_Results {
	return BootContext_pid_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_pid_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_pid_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_pid_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_pid_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_pid_Results) Pid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s BootContext_pid_Results) SetPid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// BootContext_pid_Results_List is a list of BootContext_pid_Results.
type BootContext_pid_Results_List = capnp.StructList[BootContext_pid_Results]

// NewBootContext_pid_Results creates a new list of BootContext_pid_Results.
func NewBootContext_pid_Results_List(s *capnp.Segment, sz int32) (BootContext_pid_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_pid_Results](l), err
}

// BootContext_pid_Results_Future is a wrapper for a BootContext_pid_Results promised by a client call.
type BootContext_pid_Results_Future struct{ *capnp.Future }

func (f BootContext_pid_Results_Future) Struct() (BootContext_pid_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_pid_Results(p.Struct()), err
}

type BootContext_cid_Params capnp.Struct

// BootContext_cid_Params_TypeID is the unique identifier for the type BootContext_cid_Params.
const BootContext_cid_Params_TypeID = 0x8dbc523bcfdca829

func NewBootContext_cid_Params(s *capnp.Segment) (BootContext_cid_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_cid_Params(st), err
}

func NewRootBootContext_cid_Params(s *capnp.Segment) (BootContext_cid_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_cid_Params(st), err
}

func ReadRootBootContext_cid_Params(msg *capnp.Message) (BootContext_cid_Params, error) {
	root, err := msg.Root()
	return BootContext_cid_Params(root.Struct()), err
}

func (s BootContext_cid_Params) String() string {
	str, _ := text.Marshal(0x8dbc523bcfdca829, capnp.Struct(s))
	return str
}

func (s BootContext_cid_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_cid_Params) DecodeFromPtr(p capnp.Ptr) BootContext_cid_Params {
	return BootContext_cid_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_cid_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_cid_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_cid_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_cid_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_cid_Params_List is a list of BootContext_cid_Params.
type BootContext_cid_Params_List = capnp.StructList[BootContext_cid_Params]

// NewBootContext_cid_Params creates a new list of BootContext_cid_Params.
func NewBootContext_cid_Params_List(s *capnp.Segment, sz int32) (BootContext_cid_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_cid_Params](l), err
}

// BootContext_cid_Params_Future is a wrapper for a BootContext_cid_Params promised by a client call.
type BootContext_cid_Params_Future struct{ *capnp.Future }

func (f BootContext_cid_Params_Future) Struct() (BootContext_cid_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_cid_Params(p.Struct()), err
}

type BootContext_cid_Results capnp.Struct

// BootContext_cid_Results_TypeID is the unique identifier for the type BootContext_cid_Results.
const BootContext_cid_Results_TypeID = 0xda227d43770b4d13

func NewBootContext_cid_Results(s *capnp.Segment) (BootContext_cid_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_cid_Results(st), err
}

func NewRootBootContext_cid_Results(s *capnp.Segment) (BootContext_cid_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_cid_Results(st), err
}

func ReadRootBootContext_cid_Results(msg *capnp.Message) (BootContext_cid_Results, error) {
	root, err := msg.Root()
	return BootContext_cid_Results(root.Struct()), err
}

func (s BootContext_cid_Results) String() string {
	str, _ := text.Marshal(0xda227d43770b4d13, capnp.Struct(s))
	return str
}

func (s BootContext_cid_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_cid_Results) DecodeFromPtr(p capnp.Ptr) BootContext_cid_Results {
	return BootContext_cid_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_cid_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_cid_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_cid_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_cid_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_cid_Results) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BootContext_cid_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_cid_Results) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BootContext_cid_Results_List is a list of BootContext_cid_Results.
type BootContext_cid_Results_List = capnp.StructList[BootContext_cid_Results]

// NewBootContext_cid_Results creates a new list of BootContext_cid_Results.
func NewBootContext_cid_Results_List(s *capnp.Segment, sz int32) (BootContext_cid_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_cid_Results](l), err
}

// BootContext_cid_Results_Future is a wrapper for a BootContext_cid_Results promised by a client call.
type BootContext_cid_Results_Future struct{ *capnp.Future }

func (f BootContext_cid_Results_Future) Struct() (BootContext_cid_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_cid_Results(p.Struct()), err
}

type BootContext_args_Params capnp.Struct

// BootContext_args_Params_TypeID is the unique identifier for the type BootContext_args_Params.
const BootContext_args_Params_TypeID = 0xdd266b5e92d80bb6

func NewBootContext_args_Params(s *capnp.Segment) (BootContext_args_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_args_Params(st), err
}

func NewRootBootContext_args_Params(s *capnp.Segment) (BootContext_args_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_args_Params(st), err
}

func ReadRootBootContext_args_Params(msg *capnp.Message) (BootContext_args_Params, error) {
	root, err := msg.Root()
	return BootContext_args_Params(root.Struct()), err
}

func (s BootContext_args_Params) String() string {
	str, _ := text.Marshal(0xdd266b5e92d80bb6, capnp.Struct(s))
	return str
}

func (s BootContext_args_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_args_Params) DecodeFromPtr(p capnp.Ptr) BootContext_args_Params {
	return BootContext_args_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_args_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_args_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_args_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_args_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_args_Params_List is a list of BootContext_args_Params.
type BootContext_args_Params_List = capnp.StructList[BootContext_args_Params]

// NewBootContext_args_Params creates a new list of BootContext_args_Params.
func NewBootContext_args_Params_List(s *capnp.Segment, sz int32) (BootContext_args_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_args_Params](l), err
}

// BootContext_args_Params_Future is a wrapper for a BootContext_args_Params promised by a client call.
type BootContext_args_Params_Future struct{ *capnp.Future }

func (f BootContext_args_Params_Future) Struct() (BootContext_args_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_args_Params(p.Struct()), err
}

type BootContext_args_Results capnp.Struct

// BootContext_args_Results_TypeID is the unique identifier for the type BootContext_args_Results.
const BootContext_args_Results_TypeID = 0xda9aeb6068ce2f08

func NewBootContext_args_Results(s *capnp.Segment) (BootContext_args_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_args_Results(st), err
}

func NewRootBootContext_args_Results(s *capnp.Segment) (BootContext_args_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_args_Results(st), err
}

func ReadRootBootContext_args_Results(msg *capnp.Message) (BootContext_args_Results, error) {
	root, err := msg.Root()
	return BootContext_args_Results(root.Struct()), err
}

func (s BootContext_args_Results) String() string {
	str, _ := text.Marshal(0xda9aeb6068ce2f08, capnp.Struct(s))
	return str
}

func (s BootContext_args_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_args_Results) DecodeFromPtr(p capnp.Ptr) BootContext_args_Results {
	return BootContext_args_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_args_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_args_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_args_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_args_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_args_Results) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s BootContext_args_Results) HasArgs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_args_Results) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s BootContext_args_Results) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// BootContext_args_Results_List is a list of BootContext_args_Results.
type BootContext_args_Results_List = capnp.StructList[BootContext_args_Results]

// NewBootContext_args_Results creates a new list of BootContext_args_Results.
func NewBootContext_args_Results_List(s *capnp.Segment, sz int32) (BootContext_args_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_args_Results](l), err
}

// BootContext_args_Results_Future is a wrapper for a BootContext_args_Results promised by a client call.
type BootContext_args_Results_Future struct{ *capnp.Future }

func (f BootContext_args_Results_Future) Struct() (BootContext_args_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_args_Results(p.Struct()), err
}

type BootContext_caps_Params capnp.Struct

// BootContext_caps_Params_TypeID is the unique identifier for the type BootContext_caps_Params.
const BootContext_caps_Params_TypeID = 0xb4c6412facf739e9

func NewBootContext_caps_Params(s *capnp.Segment) (BootContext_caps_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_caps_Params(st), err
}

func NewRootBootContext_caps_Params(s *capnp.Segment) (BootContext_caps_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_caps_Params(st), err
}

func ReadRootBootContext_caps_Params(msg *capnp.Message) (BootContext_caps_Params, error) {
	root, err := msg.Root()
	return BootContext_caps_Params(root.Struct()), err
}

func (s BootContext_caps_Params) String() string {
	str, _ := text.Marshal(0xb4c6412facf739e9, capnp.Struct(s))
	return str
}

func (s BootContext_caps_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_caps_Params) DecodeFromPtr(p capnp.Ptr) BootContext_caps_Params {
	return BootContext_caps_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_caps_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_caps_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_caps_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_caps_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_caps_Params_List is a list of BootContext_caps_Params.
type BootContext_caps_Params_List = capnp.StructList[BootContext_caps_Params]

// NewBootContext_caps_Params creates a new list of BootContext_caps_Params.
func NewBootContext_caps_Params_List(s *capnp.Segment, sz int32) (BootContext_caps_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_caps_Params](l), err
}

// BootContext_caps_Params_Future is a wrapper for a BootContext_caps_Params promised by a client call.
type BootContext_caps_Params_Future struct{ *capnp.Future }

func (f BootContext_caps_Params_Future) Struct() (BootContext_caps_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_caps_Params(p.Struct()), err
}

type BootContext_caps_Results capnp.Struct

// BootContext_caps_Results_TypeID is the unique identifier for the type BootContext_caps_Results.
const BootContext_caps_Results_TypeID = 0xccc01fd29eb6c672

func NewBootContext_caps_Results(s *capnp.Segment) (BootContext_caps_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_caps_Results(st), err
}

func NewRootBootContext_caps_Results(s *capnp.Segment) (BootContext_caps_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_caps_Results(st), err
}

func ReadRootBootContext_caps_Results(msg *capnp.Message) (BootContext_caps_Results, error) {
	root, err := msg.Root()
	return BootContext_caps_Results(root.Struct()), err
}

func (s BootContext_caps_Results) String() string {
	str, _ := text.Marshal(0xccc01fd29eb6c672, capnp.Struct(s))
	return str
}

func (s BootContext_caps_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_caps_Results) DecodeFromPtr(p capnp.Ptr) BootContext_caps_Results {
	return BootContext_caps_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_caps_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_caps_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_caps_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_caps_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_caps_Results) Caps() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s BootContext_caps_Results) HasCaps() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_caps_Results) SetCaps(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCaps sets the caps field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s BootContext_caps_Results) NewCaps(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// BootContext_caps_Results_List is a list of BootContext_caps_Results.
type BootContext_caps_Results_List = capnp.StructList[BootContext_caps_Results]

// NewBootContext_caps_Results creates a new list of BootContext_caps_Results.
func NewBootContext_caps_Results_List(s *capnp.Segment, sz int32) (BootContext_caps_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_caps_Results](l), err
}

// BootContext_caps_Results_Future is a wrapper for a BootContext_caps_Results promised by a client call.
type BootContext_caps_Results_Future struct{ *capnp.Future }

func (f BootContext_caps_Results_Future) Struct() (BootContext_caps_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_caps_Results(p.Struct()), err
}

type BootContext_setPid_Params capnp.Struct

// BootContext_setPid_Params_TypeID is the unique identifier for the type BootContext_setPid_Params.
const BootContext_setPid_Params_TypeID = 0x9a476b9f1a755580

func NewBootContext_setPid_Params(s *capnp.Segment) (BootContext_setPid_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_setPid_Params(st), err
}

func NewRootBootContext_setPid_Params(s *capnp.Segment) (BootContext_setPid_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BootContext_setPid_Params(st), err
}

func ReadRootBootContext_setPid_Params(msg *capnp.Message) (BootContext_setPid_Params, error) {
	root, err := msg.Root()
	return BootContext_setPid_Params(root.Struct()), err
}

func (s BootContext_setPid_Params) String() string {
	str, _ := text.Marshal(0x9a476b9f1a755580, capnp.Struct(s))
	return str
}

func (s BootContext_setPid_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_setPid_Params) DecodeFromPtr(p capnp.Ptr) BootContext_setPid_Params {
	return BootContext_setPid_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_setPid_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_setPid_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_setPid_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_setPid_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_setPid_Params) Pid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s BootContext_setPid_Params) SetPid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// BootContext_setPid_Params_List is a list of BootContext_setPid_Params.
type BootContext_setPid_Params_List = capnp.StructList[BootContext_setPid_Params]

// NewBootContext_setPid_Params creates a new list of BootContext_setPid_Params.
func NewBootContext_setPid_Params_List(s *capnp.Segment, sz int32) (BootContext_setPid_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_setPid_Params](l), err
}

// BootContext_setPid_Params_Future is a wrapper for a BootContext_setPid_Params promised by a client call.
type BootContext_setPid_Params_Future struct{ *capnp.Future }

func (f BootContext_setPid_Params_Future) Struct() (BootContext_setPid_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_setPid_Params(p.Struct()), err
}

type BootContext_setPid_Results capnp.Struct

// BootContext_setPid_Results_TypeID is the unique identifier for the type BootContext_setPid_Results.
const BootContext_setPid_Results_TypeID = 0xf96299218f4522e8

func NewBootContext_setPid_Results(s *capnp.Segment) (BootContext_setPid_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setPid_Results(st), err
}

func NewRootBootContext_setPid_Results(s *capnp.Segment) (BootContext_setPid_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setPid_Results(st), err
}

func ReadRootBootContext_setPid_Results(msg *capnp.Message) (BootContext_setPid_Results, error) {
	root, err := msg.Root()
	return BootContext_setPid_Results(root.Struct()), err
}

func (s BootContext_setPid_Results) String() string {
	str, _ := text.Marshal(0xf96299218f4522e8, capnp.Struct(s))
	return str
}

func (s BootContext_setPid_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_setPid_Results) DecodeFromPtr(p capnp.Ptr) BootContext_setPid_Results {
	return BootContext_setPid_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_setPid_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_setPid_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_setPid_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_setPid_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_setPid_Results_List is a list of BootContext_setPid_Results.
type BootContext_setPid_Results_List = capnp.StructList[BootContext_setPid_Results]

// NewBootContext_setPid_Results creates a new list of BootContext_setPid_Results.
func NewBootContext_setPid_Results_List(s *capnp.Segment, sz int32) (BootContext_setPid_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_setPid_Results](l), err
}

// BootContext_setPid_Results_Future is a wrapper for a BootContext_setPid_Results promised by a client call.
type BootContext_setPid_Results_Future struct{ *capnp.Future }

func (f BootContext_setPid_Results_Future) Struct() (BootContext_setPid_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_setPid_Results(p.Struct()), err
}

type BootContext_setCid_Params capnp.Struct

// BootContext_setCid_Params_TypeID is the unique identifier for the type BootContext_setCid_Params.
const BootContext_setCid_Params_TypeID = 0x97a28cda532de0ff

func NewBootContext_setCid_Params(s *capnp.Segment) (BootContext_setCid_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_setCid_Params(st), err
}

func NewRootBootContext_setCid_Params(s *capnp.Segment) (BootContext_setCid_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_setCid_Params(st), err
}

func ReadRootBootContext_setCid_Params(msg *capnp.Message) (BootContext_setCid_Params, error) {
	root, err := msg.Root()
	return BootContext_setCid_Params(root.Struct()), err
}

func (s BootContext_setCid_Params) String() string {
	str, _ := text.Marshal(0x97a28cda532de0ff, capnp.Struct(s))
	return str
}

func (s BootContext_setCid_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_setCid_Params) DecodeFromPtr(p capnp.Ptr) BootContext_setCid_Params {
	return BootContext_setCid_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_setCid_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_setCid_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_setCid_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_setCid_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_setCid_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BootContext_setCid_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_setCid_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BootContext_setCid_Params_List is a list of BootContext_setCid_Params.
type BootContext_setCid_Params_List = capnp.StructList[BootContext_setCid_Params]

// NewBootContext_setCid_Params creates a new list of BootContext_setCid_Params.
func NewBootContext_setCid_Params_List(s *capnp.Segment, sz int32) (BootContext_setCid_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_setCid_Params](l), err
}

// BootContext_setCid_Params_Future is a wrapper for a BootContext_setCid_Params promised by a client call.
type BootContext_setCid_Params_Future struct{ *capnp.Future }

func (f BootContext_setCid_Params_Future) Struct() (BootContext_setCid_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_setCid_Params(p.Struct()), err
}

type BootContext_setCid_Results capnp.Struct

// BootContext_setCid_Results_TypeID is the unique identifier for the type BootContext_setCid_Results.
const BootContext_setCid_Results_TypeID = 0xaab0eb92d588b81e

func NewBootContext_setCid_Results(s *capnp.Segment) (BootContext_setCid_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setCid_Results(st), err
}

func NewRootBootContext_setCid_Results(s *capnp.Segment) (BootContext_setCid_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_setCid_Results(st), err
}

func ReadRootBootContext_setCid_Results(msg *capnp.Message) (BootContext_setCid_Results, error) {
	root, err := msg.Root()
	return BootContext_setCid_Results(root.Struct()), err
}

func (s BootContext_setCid_Results) String() string {
	str, _ := text.Marshal(0xaab0eb92d588b81e, capnp.Struct(s))
	return str
}

func (s BootContext_setCid_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_setCid_Results) DecodeFromPtr(p capnp.Ptr) BootContext_setCid_Results {
	return BootContext_setCid_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_setCid_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_setCid_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_setCid_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_setCid_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_setCid_Results_List is a list of BootContext_setCid_Results.
type BootContext_setCid_Results_List = capnp.StructList[BootContext_setCid_Results]

// NewBootContext_setCid_Results creates a new list of BootContext_setCid_Results.
func NewBootContext_setCid_Results_List(s *capnp.Segment, sz int32) (BootContext_setCid_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_setCid_Results](l), err
}

// BootContext_setCid_Results_Future is a wrapper for a BootContext_setCid_Results promised by a client call.
type BootContext_setCid_Results_Future struct{ *capnp.Future }

func (f BootContext_setCid_Results_Future) Struct() (BootContext_setCid_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_setCid_Results(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda\x9cVoh\x14\xd7\x17\xbdwfgg7\x9a" +
	"\xec\xefe\xa2?\x13\x8c\xa91Z\x8c5\x89\x8a\x1fL" +
	"m\xb31\x04\x89m`'%\x1flQ2\xd9L\xb3" +
	"Kbv\xbb3\xdb(UP\xd0\xaaE)JA\x0d" +
	"Zc\xd1\x1a\x8a\x14M%\xad`K\xad\xa8\x08\xfdC" +
	"cK\xab\xadT\xb4\x16Ej+TK\xa0u\xcb}" +
	"\xbbo\x9dd\xb3n\xf0K\xd8\xc9;\xf7\x9ew\xce\xbb" +
	"\xef\xdd[sS\xf6\xbb\x16\xe4\x7f<\x09$}\x9b\xe2" +
	"Nt\xf9?-\xc9\xaf\xbf\xf1&\xe8S\x11\x01\\*" +
	"\xc0\xa23J9\x02j\x17\x95:\xc0\xc4\xdc\x81\x9f\xbf" +
	"y\xb6\xe5\xf4N`%b\xfd\xb6R\x89\xe0J|\xf6" +
	"|U\xa5\xafph\x17\xb0\xe9\x08\xa0 -}\xab\xd4" +
	"R\xe8e\x1e\x9a\xb86\xff\xa5+;\xde\xdb\x93\x0cM" +
	"\x02\xfeU\x96\x11@q\x13`ck\xbc\xe4`\xd7\xf2" +
	">\xd0K\xd2\xe4\xb3\xdd\x1c0\x9f\x03\xe6\xb5\xf5\x1fl" +
	"\xb4\xdb\x0e\x00\x9b*\xd6\x9b\xdd%D~\xa1\xfft\xeb" +
	"`~\xdbQ\xc7\xb6\x16\xbb\xf9\xb6f|\xb2\xed\xfb\xdd" +
	"w\x8e\x7f\xe0X)u\xaf\xa0\x95\xbfd\xfb\x95s\xf7" +
	"\xce\x0f:7\xecM\xd21Nw{\xc9\xdf\xc7\xaa\xeb" +
	"\xcf\x9f\x1c\x95t!\x85\xb6>\xdc\xdf4\xf0\xff\x97\xbf" +
	"p\x86\x96\xba\xb9\xd6\xd9<t\xce[\xcf\x1d:R7" +
	"\xe5,\xe8\x05(%\x82\xbdO\xf7.\xb8\xa9\xf7\x81\"" +
	"\xa9\x00Z\xa3\xbbOkvSL\x93\xbb\x0c\x01\x13w" +
	"\xf7|g\x0d\x86\x16\x9cs\xe8\x0a\xab\\W\xec\xfc\xd0" +
	"\xbb\xc3e\x9f\x7f\xe9\xf4LW9\xd1J\x95\x88nm" +
	"=\xe3\xfe%^=\xec<\xb0\xedj!\x01vq\xc0" +
	"\xb1\xe55\x15\xfd'+\x7fp\x02NPr\xd4Nq" +
	"\xc0\xd2\x8bo\xb4\xf7\xf7-\xbd\xec \xbf\xaar\xeb\xb4" +
	"\xe6I\xbd\x0d\x1b\xca\xaf8\xc9\xcf\xa9\x0b)\xf4+\x1e" +
	"\xba\xc8={\xe0\xd2\x9f\xb3\xae\x00+\x90\x1f\x89\x04\xd4" +
	"~W\x07\xb5\xfb*\xe1\xef\xa9*j\xbb<*@\xc2" +
	"S\xfdu\xa8\xedN\xdf\xa8t\xeb<\\\xcb&\x0f\xa5" +
	"\x1b\x9a\xf4\xe3\xee\xd5]s\xae:\xfc>\xe1\xe1~\xdb" +
	"\xe8} \xff\xfa\xe2o\x19D\xfb<\xd7\xb5#\x94]" +
	";\xe4\xb9\xa0\x15{\x89g\xa8\xe6\xfdU[\x0e\xbfp" +
	"\xcbYF\xe8\xe5\xdb\xf6z\x89g\xf9\xaa\xea\xe3\xc5\x1f" +
	"\x1e\xbd\xebP<\xd7[H<\x05{\xaf=\x9c5\xaf" +
	"\xfd\x8f\x0c\x1e\xe6\x1d\xd6J)\xfb\xa2b\xefV\xd4\xbc" +
	"yD\x14:\xf5\xd4?\x976\xcc\xb8\xef\xac\x82{^" +
	"^@#\x9ch\xfd\xc0\x9d\xf8\xfe\xc2w\x1e8\x01\xc5" +
	"y\\\xf1\xcc<\x02\xf8V?8;\xfcL\xdb\x08\xe8" +
	"\xd3\xd3[\xad\xcf\xe3\x19\x9a8\xe0Vy\xe3\xdb3\xf7" +
	"\xb5\x8f8,\x09\xe7\xf1\xea\xbd\xf1\xd1O\x9e\xeb+\xc2" +
	"#\x0e\x11\xady\x85\x085\x89h,\x124-\xabJ" +
	"\x0e\x1a\xd1\x9ehm \xf5\x19\xef\xe9\x0e\xf7tU\x04" +
	"\x8c\x98j\xac\xb1t\x97\xec\x02p!\x00\xcb_\x08\xa0" +
	"{d\xd4\x8b$,\x8b\xd8!3\x86\x1e\x90\xd0\x038" +
	"6\xd5\xb2H\xc4n\x88\xf4\xd8\xe6Z\xbb*\x18\xee\xa8" +
	"\x08\x18\xbe\x98\xb1\xc6\xca\x80\xad\xb3\xcd`\xa4\xc3l0" +
	"\x82!\xb3*\x1a\xb7+\xea\x02Fl\x0c\xe9\x0a\x00}" +
	"\xb2\x8c\xfa4\x09\x13\xed\xa9\x00\x00\xc0|\x900\xdfA" +
	"\xed\xca\xa4\xb6L\xbb\x81\xb3SNp&-\x7f\xa4D" +
	"\x0d\x86;&\x98,\x90;Y4\xdc\x91\xcd\x14\xe1/" +
	"w\xb7\xc5\xb4\xe2\xdd\xb2m=\xce\xb9\xe88\xceeW" +
	"\xc93\xda\x16@\x06v\x94\xcb\x9d\xa6\x9d\x86>\x89\xcd" +
	"\xe3\x9d\xb0\x11\xb5*\x02eF\xee#\x0e\x19\xd6xG" +
	"\x9c\xeb40\x99\xab\xa9G~5\x12@\xd4\x8b\xd2\xa1" +
	"\x1b(t\xad\x8c\xfaf\x09\x19b\x11]\x0e\xb6\xa9\x12" +
	"@_/\xa3\xbeMB\x94\x8aP\x02`[\x08\xb8Q" +
	"F}\x87\x84L\xc6\"\x94\x01\xd8v\x02n\x96Q\xef" +
	"\x97\x90\xb9\xb0\x08]\x00\xec\x00\xfds\xaf\x8c\xfa\xe1\xd1" +
	"\xc7\xe9\x8b:>\x9c\xdb\xf4\x19\xb1\xce\xd7\xb1\x000 " +
	"#N\x06\x89~\xfa\xec\xf0\x1a\x13\x15\x90P\xc9^\x08" +
	"]\xe1\xee\xee\x09\x15\x027\xb8\xa5.yjN\xe3*" +
	"S\xc6UH\xe8#\x90\xd8E\xa1K\x06\xa4\x8f\xc7\xd6" +
	" ?\x08|\xb2\x1b.\x12\xf5\x1aa;\xad![=" +
	"\x99k\xc3vC\xaa\x9er\xe4K=>-\xa6\xe5#" +
	"\xb1\xb9\x1e\x96\x16\xb3,\xc3\x94\x09VS V\xc6\xbf" +
	"\xa9\xa0\xfe'+\x00\xe9\x97\x12E+d\xafU\x82\xc4" +
	"L\x15\x1f\xb5\x02\x14-\x98\xad\xa4\xb5f\x15\xa5tk" +
	"E1v\xb0zZ[\xac\xa2\x9c\x9e\x93PtO6" +
	"\xb7\x16$V\xaa\xfa\xc89?\xfa\xa8\x08\xfc\xe8#\xd5" +
	"~\xacK\xca\xf7c\x00\x1f{\xe3\x8cXg\xee\x82 " +
	"\xd0\x98\xb2\xcc\x99s\xec-\x96\xc6\xdeb5\x182\xc9" +
	"\xb1\xc9\xdc11\xca\xa1\xe8pL/\x07\x895\x92c" +
	"\xa2\xa7\xa1\x18\x9f\xd8\x12Z\x9bO\x8e\x89\xb1\x08E_" +
	"c3im\x8a\xaaF\xe3\xb6\x1f\xd5N\x93\xfe\x86\x0c" +
	"+\xa7\x13\xd1\x09\x14\xc1\x04\xded~\x15S\xf7!C" +
	"|\x9a\x0em\x92>\x8dK\x17\x83$\x8a)\x82\x9d " +
	"\x09GH\xba\x98}Q\x0cFl\x1f\xad\xed$\xe9b" +
	"vA1\xe5\xd0s%\xb18\x15\x8b\x98#QLs" +
	",Lk\xabTt\xa5g^\x14\x9d\x9e\xe9\xb5I\xab" +
	"\x95\xf4\xc0\x8cb\x86eKj\xb9\xd5$\xdd\xcfo\x81" +
	"?Y\x0f\xfe\xe4;\xe1\xc7\xbad;K\xfeh\xa0\x1f" +
	"N\xa3]\xd9\xfa\xf3x\x9d#\xd7}\x93\xb3\xb5\xa1'" +
	"\xe8\x04\xael]%\xd7\xc6B\x86\x85\x08\x12\xe2\x84\x9a" +
	"|f/\x1d\xef\xd9K\xd5\xcb\x7f\x01\x00\x00\xff\xff\x01" +
	"H\x8fn"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9a51e53177277763,
		Nodes: []uint64{
			0x86e3410d1abd406b,
			0x8dbc523bcfdca829,
			0x91b6120f2a2e3ebe,
			0x97a28cda532de0ff,
			0x9a476b9f1a755580,
			0x9d6074459fa0602b,
			0xa7600db255bca0c7,
			0xaab0eb92d588b81e,
			0xb2c6f1c55b7403f4,
			0xb4c6412facf739e9,
			0xc25a17a8499cfe55,
			0xc3153fa5a13d8a26,
			0xc53168b273d497ee,
			0xccc01fd29eb6c672,
			0xd22f75df06c187e8,
			0xd72ab4a0243047ac,
			0xd93c9aa0627bc93c,
			0xda227d43770b4d13,
			0xda23f0d3a8250633,
			0xda9aeb6068ce2f08,
			0xdd266b5e92d80bb6,
			0xe64ce403f6090174,
			0xe84ba4855da630b6,
			0xeea7ae19b02f5d47,
			0xef622b23fee0980e,
			0xf51e7dd3fc20b968,
			0xf694129c75eba87c,
			0xf9602cd2c3f65e0f,
			0xf96299218f4522e8,
			0xf9694ae208dbb3e3,
		},
		Compressed: true,
	})
}
