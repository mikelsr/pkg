// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xaf2e5ebaa58175d2

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release

}

func (c Executor) ExecCached(ctx context.Context, params func(Executor_execCached_Params) error) (Executor_execCached_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      1,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "execCached",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_execCached_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_execCached_Results_Future{Future: ans.Future()}, release

}

func (c Executor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return "Executor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error

	ExecCached(context.Context, Executor_execCached) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      1,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "execCached",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExecCached(ctx, Executor_execCached{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(r), err
}

// Executor_execCached holds the state for a server call to Executor.execCached.
// See server.Call for documentation.
type Executor_execCached struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_execCached) Args() Executor_execCached_Params {
	return Executor_execCached_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_execCached) AllocResults() (Executor_execCached_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_exec_Params capnp.Struct

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0xf20b3dea95929312

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Executor_exec_Params(st), err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Executor_exec_Params(st), err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params(root.Struct()), err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0xf20b3dea95929312, capnp.Struct(s))
	return str
}

func (s Executor_exec_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Params) DecodeFromPtr(p capnp.Ptr) Executor_exec_Params {
	return Executor_exec_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Executor_exec_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Executor_exec_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_exec_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_exec_Params) BootstrapClient() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(1)
	return p.Interface().Client()
}

func (s Executor_exec_Params) HasBootstrapClient() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_exec_Params) SetBootstrapClient(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Executor_exec_Params](l), err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (f Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Params(p.Struct()), err
}
func (p Executor_exec_Params_Future) BootstrapClient() capnp.Client {
	return p.Future.Field(1, nil).Client()
}

type Executor_exec_Results capnp.Struct

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0xbb4f16b0a7d2d09b

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results(root.Struct()), err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0xbb4f16b0a7d2d09b, capnp.Struct(s))
	return str
}

func (s Executor_exec_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Results) DecodeFromPtr(p capnp.Ptr) Executor_exec_Results {
	return Executor_exec_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Results) Process() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Executor_exec_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Results) SetProcess(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results](l), err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (f Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Results(p.Struct()), err
}
func (p Executor_exec_Results_Future) Process() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Executor_execCached_Params capnp.Struct

// Executor_execCached_Params_TypeID is the unique identifier for the type Executor_execCached_Params.
const Executor_execCached_Params_TypeID = 0xb9b9c4df47b44962

func NewExecutor_execCached_Params(s *capnp.Segment) (Executor_execCached_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Executor_execCached_Params(st), err
}

func NewRootExecutor_execCached_Params(s *capnp.Segment) (Executor_execCached_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Executor_execCached_Params(st), err
}

func ReadRootExecutor_execCached_Params(msg *capnp.Message) (Executor_execCached_Params, error) {
	root, err := msg.Root()
	return Executor_execCached_Params(root.Struct()), err
}

func (s Executor_execCached_Params) String() string {
	str, _ := text.Marshal(0xb9b9c4df47b44962, capnp.Struct(s))
	return str
}

func (s Executor_execCached_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execCached_Params) DecodeFromPtr(p capnp.Ptr) Executor_execCached_Params {
	return Executor_execCached_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execCached_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execCached_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execCached_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execCached_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execCached_Params) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Executor_execCached_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execCached_Params) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Executor_execCached_Params) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Executor_execCached_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_execCached_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_execCached_Params) BootstrapClient() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(1)
	return p.Interface().Client()
}

func (s Executor_execCached_Params) HasBootstrapClient() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_execCached_Params) SetBootstrapClient(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Executor_execCached_Params_List is a list of Executor_execCached_Params.
type Executor_execCached_Params_List = capnp.StructList[Executor_execCached_Params]

// NewExecutor_execCached_Params creates a new list of Executor_execCached_Params.
func NewExecutor_execCached_Params_List(s *capnp.Segment, sz int32) (Executor_execCached_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Executor_execCached_Params](l), err
}

// Executor_execCached_Params_Future is a wrapper for a Executor_execCached_Params promised by a client call.
type Executor_execCached_Params_Future struct{ *capnp.Future }

func (f Executor_execCached_Params_Future) Struct() (Executor_execCached_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_execCached_Params(p.Struct()), err
}
func (p Executor_execCached_Params_Future) BootstrapClient() capnp.Client {
	return p.Future.Field(1, nil).Client()
}

type Executor_execCached_Results capnp.Struct

// Executor_execCached_Results_TypeID is the unique identifier for the type Executor_execCached_Results.
const Executor_execCached_Results_TypeID = 0xa21a945a0ef3799e

func NewExecutor_execCached_Results(s *capnp.Segment) (Executor_execCached_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(st), err
}

func NewRootExecutor_execCached_Results(s *capnp.Segment) (Executor_execCached_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(st), err
}

func ReadRootExecutor_execCached_Results(msg *capnp.Message) (Executor_execCached_Results, error) {
	root, err := msg.Root()
	return Executor_execCached_Results(root.Struct()), err
}

func (s Executor_execCached_Results) String() string {
	str, _ := text.Marshal(0xa21a945a0ef3799e, capnp.Struct(s))
	return str
}

func (s Executor_execCached_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execCached_Results) DecodeFromPtr(p capnp.Ptr) Executor_execCached_Results {
	return Executor_execCached_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execCached_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execCached_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execCached_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execCached_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execCached_Results) Process() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Executor_execCached_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execCached_Results) SetProcess(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_execCached_Results_List is a list of Executor_execCached_Results.
type Executor_execCached_Results_List = capnp.StructList[Executor_execCached_Results]

// NewExecutor_execCached_Results creates a new list of Executor_execCached_Results.
func NewExecutor_execCached_Results_List(s *capnp.Segment, sz int32) (Executor_execCached_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_execCached_Results](l), err
}

// Executor_execCached_Results_Future is a wrapper for a Executor_execCached_Results promised by a client call.
type Executor_execCached_Results_Future struct{ *capnp.Future }

func (f Executor_execCached_Results_Future) Struct() (Executor_execCached_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_execCached_Results(p.Struct()), err
}
func (p Executor_execCached_Results_Future) Process() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release

}

func (c Process) Kill(ctx context.Context, params func(Process_kill_Params) error) (Process_kill_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_kill_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_kill_Results_Future{Future: ans.Future()}, release

}

func (c Process) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return "Process(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Wait(context.Context, Process_wait) error

	Kill(context.Context, Process_kill) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Kill(ctx, Process_kill{call})
		},
	})

	return methods
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(r), err
}

// Process_kill holds the state for a server call to Process.kill.
// See server.Call for documentation.
type Process_kill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_kill) Args() Process_kill_Params {
	return Process_kill_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_kill) AllocResults() (Process_kill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_wait_Results) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}

type Process_kill_Params capnp.Struct

// Process_kill_Params_TypeID is the unique identifier for the type Process_kill_Params.
const Process_kill_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func NewRootProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func ReadRootProcess_kill_Params(msg *capnp.Message) (Process_kill_Params, error) {
	root, err := msg.Root()
	return Process_kill_Params(root.Struct()), err
}

func (s Process_kill_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_kill_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Params) DecodeFromPtr(p capnp.Ptr) Process_kill_Params {
	return Process_kill_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Params_List is a list of Process_kill_Params.
type Process_kill_Params_List = capnp.StructList[Process_kill_Params]

// NewProcess_kill_Params creates a new list of Process_kill_Params.
func NewProcess_kill_Params_List(s *capnp.Segment, sz int32) (Process_kill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Params](l), err
}

// Process_kill_Params_Future is a wrapper for a Process_kill_Params promised by a client call.
type Process_kill_Params_Future struct{ *capnp.Future }

func (f Process_kill_Params_Future) Struct() (Process_kill_Params, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Params(p.Struct()), err
}

type Process_kill_Results capnp.Struct

// Process_kill_Results_TypeID is the unique identifier for the type Process_kill_Results.
const Process_kill_Results_TypeID = 0xc53168b273d497ee

func NewProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func NewRootProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func ReadRootProcess_kill_Results(msg *capnp.Message) (Process_kill_Results, error) {
	root, err := msg.Root()
	return Process_kill_Results(root.Struct()), err
}

func (s Process_kill_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_kill_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Results) DecodeFromPtr(p capnp.Ptr) Process_kill_Results {
	return Process_kill_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Results_List is a list of Process_kill_Results.
type Process_kill_Results_List = capnp.StructList[Process_kill_Results]

// NewProcess_kill_Results creates a new list of Process_kill_Results.
func NewProcess_kill_Results_List(s *capnp.Segment, sz int32) (Process_kill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Results](l), err
}

// Process_kill_Results_Future is a wrapper for a Process_kill_Results promised by a client call.
type Process_kill_Results_Future struct{ *capnp.Future }

func (f Process_kill_Results_Future) Struct() (Process_kill_Results, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Results(p.Struct()), err
}

type BytecodeCache capnp.Client

// BytecodeCache_TypeID is the unique identifier for the type BytecodeCache.
const BytecodeCache_TypeID = 0xe64ce403f6090174

func (c BytecodeCache) Put(ctx context.Context, params func(BytecodeCache_put_Params) error) (BytecodeCache_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_put_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Get(ctx context.Context, params func(BytecodeCache_get_Params) error) (BytecodeCache_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_get_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) Has(ctx context.Context, params func(BytecodeCache_has_Params) error) (BytecodeCache_has_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeCache_has_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeCache_has_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeCache) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BytecodeCache) String() string {
	return "BytecodeCache(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BytecodeCache) AddRef() BytecodeCache {
	return BytecodeCache(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BytecodeCache) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BytecodeCache) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BytecodeCache) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BytecodeCache) DecodeFromPtr(p capnp.Ptr) BytecodeCache {
	return BytecodeCache(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BytecodeCache) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BytecodeCache) IsSame(other BytecodeCache) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BytecodeCache) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BytecodeCache) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BytecodeCache_Server is a BytecodeCache with a local implementation.
type BytecodeCache_Server interface {
	Put(context.Context, BytecodeCache_put) error

	Get(context.Context, BytecodeCache_get) error

	Has(context.Context, BytecodeCache_has) error
}

// BytecodeCache_NewServer creates a new Server from an implementation of BytecodeCache_Server.
func BytecodeCache_NewServer(s BytecodeCache_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BytecodeCache_Methods(nil, s), s, c)
}

// BytecodeCache_ServerToClient creates a new Client from an implementation of BytecodeCache_Server.
// The caller is responsible for calling Release on the returned Client.
func BytecodeCache_ServerToClient(s BytecodeCache_Server) BytecodeCache {
	return BytecodeCache(capnp.NewClient(BytecodeCache_NewServer(s)))
}

// BytecodeCache_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BytecodeCache_Methods(methods []server.Method, s BytecodeCache_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, BytecodeCache_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, BytecodeCache_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe64ce403f6090174,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeCache",
			MethodName:    "has",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Has(ctx, BytecodeCache_has{call})
		},
	})

	return methods
}

// BytecodeCache_put holds the state for a server call to BytecodeCache.put.
// See server.Call for documentation.
type BytecodeCache_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_put) Args() BytecodeCache_put_Params {
	return BytecodeCache_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_put) AllocResults() (BytecodeCache_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(r), err
}

// BytecodeCache_get holds the state for a server call to BytecodeCache.get.
// See server.Call for documentation.
type BytecodeCache_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_get) Args() BytecodeCache_get_Params {
	return BytecodeCache_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_get) AllocResults() (BytecodeCache_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(r), err
}

// BytecodeCache_has holds the state for a server call to BytecodeCache.has.
// See server.Call for documentation.
type BytecodeCache_has struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeCache_has) Args() BytecodeCache_has_Params {
	return BytecodeCache_has_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeCache_has) AllocResults() (BytecodeCache_has_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(r), err
}

// BytecodeCache_List is a list of BytecodeCache.
type BytecodeCache_List = capnp.CapList[BytecodeCache]

// NewBytecodeCache creates a new list of BytecodeCache.
func NewBytecodeCache_List(s *capnp.Segment, sz int32) (BytecodeCache_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BytecodeCache](l), err
}

type BytecodeCache_put_Params capnp.Struct

// BytecodeCache_put_Params_TypeID is the unique identifier for the type BytecodeCache_put_Params.
const BytecodeCache_put_Params_TypeID = 0x91b6120f2a2e3ebe

func NewBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func NewRootBytecodeCache_put_Params(s *capnp.Segment) (BytecodeCache_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Params(st), err
}

func ReadRootBytecodeCache_put_Params(msg *capnp.Message) (BytecodeCache_put_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Params(root.Struct()), err
}

func (s BytecodeCache_put_Params) String() string {
	str, _ := text.Marshal(0x91b6120f2a2e3ebe, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Params {
	return BytecodeCache_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_put_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_put_Params_List is a list of BytecodeCache_put_Params.
type BytecodeCache_put_Params_List = capnp.StructList[BytecodeCache_put_Params]

// NewBytecodeCache_put_Params creates a new list of BytecodeCache_put_Params.
func NewBytecodeCache_put_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Params](l), err
}

// BytecodeCache_put_Params_Future is a wrapper for a BytecodeCache_put_Params promised by a client call.
type BytecodeCache_put_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Params_Future) Struct() (BytecodeCache_put_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Params(p.Struct()), err
}

type BytecodeCache_put_Results capnp.Struct

// BytecodeCache_put_Results_TypeID is the unique identifier for the type BytecodeCache_put_Results.
const BytecodeCache_put_Results_TypeID = 0xf51e7dd3fc20b968

func NewBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func NewRootBytecodeCache_put_Results(s *capnp.Segment) (BytecodeCache_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_put_Results(st), err
}

func ReadRootBytecodeCache_put_Results(msg *capnp.Message) (BytecodeCache_put_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_put_Results(root.Struct()), err
}

func (s BytecodeCache_put_Results) String() string {
	str, _ := text.Marshal(0xf51e7dd3fc20b968, capnp.Struct(s))
	return str
}

func (s BytecodeCache_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_put_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_put_Results {
	return BytecodeCache_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_put_Results) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BytecodeCache_put_Results) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_put_Results) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BytecodeCache_put_Results) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BytecodeCache_put_Results_List is a list of BytecodeCache_put_Results.
type BytecodeCache_put_Results_List = capnp.StructList[BytecodeCache_put_Results]

// NewBytecodeCache_put_Results creates a new list of BytecodeCache_put_Results.
func NewBytecodeCache_put_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_put_Results](l), err
}

// BytecodeCache_put_Results_Future is a wrapper for a BytecodeCache_put_Results promised by a client call.
type BytecodeCache_put_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_put_Results_Future) Struct() (BytecodeCache_put_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_put_Results(p.Struct()), err
}

type BytecodeCache_get_Params capnp.Struct

// BytecodeCache_get_Params_TypeID is the unique identifier for the type BytecodeCache_get_Params.
const BytecodeCache_get_Params_TypeID = 0xf694129c75eba87c

func NewBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func NewRootBytecodeCache_get_Params(s *capnp.Segment) (BytecodeCache_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Params(st), err
}

func ReadRootBytecodeCache_get_Params(msg *capnp.Message) (BytecodeCache_get_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Params(root.Struct()), err
}

func (s BytecodeCache_get_Params) String() string {
	str, _ := text.Marshal(0xf694129c75eba87c, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Params {
	return BytecodeCache_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Params) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BytecodeCache_get_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Params) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BytecodeCache_get_Params) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BytecodeCache_get_Params_List is a list of BytecodeCache_get_Params.
type BytecodeCache_get_Params_List = capnp.StructList[BytecodeCache_get_Params]

// NewBytecodeCache_get_Params creates a new list of BytecodeCache_get_Params.
func NewBytecodeCache_get_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Params](l), err
}

// BytecodeCache_get_Params_Future is a wrapper for a BytecodeCache_get_Params promised by a client call.
type BytecodeCache_get_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Params_Future) Struct() (BytecodeCache_get_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Params(p.Struct()), err
}

type BytecodeCache_get_Results capnp.Struct

// BytecodeCache_get_Results_TypeID is the unique identifier for the type BytecodeCache_get_Results.
const BytecodeCache_get_Results_TypeID = 0xb2c6f1c55b7403f4

func NewBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func NewRootBytecodeCache_get_Results(s *capnp.Segment) (BytecodeCache_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_get_Results(st), err
}

func ReadRootBytecodeCache_get_Results(msg *capnp.Message) (BytecodeCache_get_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_get_Results(root.Struct()), err
}

func (s BytecodeCache_get_Results) String() string {
	str, _ := text.Marshal(0xb2c6f1c55b7403f4, capnp.Struct(s))
	return str
}

func (s BytecodeCache_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_get_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_get_Results {
	return BytecodeCache_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_get_Results) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeCache_get_Results) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_get_Results) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeCache_get_Results_List is a list of BytecodeCache_get_Results.
type BytecodeCache_get_Results_List = capnp.StructList[BytecodeCache_get_Results]

// NewBytecodeCache_get_Results creates a new list of BytecodeCache_get_Results.
func NewBytecodeCache_get_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_get_Results](l), err
}

// BytecodeCache_get_Results_Future is a wrapper for a BytecodeCache_get_Results promised by a client call.
type BytecodeCache_get_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_get_Results_Future) Struct() (BytecodeCache_get_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_get_Results(p.Struct()), err
}

type BytecodeCache_has_Params capnp.Struct

// BytecodeCache_has_Params_TypeID is the unique identifier for the type BytecodeCache_has_Params.
const BytecodeCache_has_Params_TypeID = 0xc25a17a8499cfe55

func NewBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func NewRootBytecodeCache_has_Params(s *capnp.Segment) (BytecodeCache_has_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeCache_has_Params(st), err
}

func ReadRootBytecodeCache_has_Params(msg *capnp.Message) (BytecodeCache_has_Params, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Params(root.Struct()), err
}

func (s BytecodeCache_has_Params) String() string {
	str, _ := text.Marshal(0xc25a17a8499cfe55, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Params) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Params {
	return BytecodeCache_has_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Params) Cid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BytecodeCache_has_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeCache_has_Params) CidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BytecodeCache_has_Params) SetCid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BytecodeCache_has_Params_List is a list of BytecodeCache_has_Params.
type BytecodeCache_has_Params_List = capnp.StructList[BytecodeCache_has_Params]

// NewBytecodeCache_has_Params creates a new list of BytecodeCache_has_Params.
func NewBytecodeCache_has_Params_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeCache_has_Params](l), err
}

// BytecodeCache_has_Params_Future is a wrapper for a BytecodeCache_has_Params promised by a client call.
type BytecodeCache_has_Params_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Params_Future) Struct() (BytecodeCache_has_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Params(p.Struct()), err
}

type BytecodeCache_has_Results capnp.Struct

// BytecodeCache_has_Results_TypeID is the unique identifier for the type BytecodeCache_has_Results.
const BytecodeCache_has_Results_TypeID = 0xf9602cd2c3f65e0f

func NewBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func NewRootBytecodeCache_has_Results(s *capnp.Segment) (BytecodeCache_has_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeCache_has_Results(st), err
}

func ReadRootBytecodeCache_has_Results(msg *capnp.Message) (BytecodeCache_has_Results, error) {
	root, err := msg.Root()
	return BytecodeCache_has_Results(root.Struct()), err
}

func (s BytecodeCache_has_Results) String() string {
	str, _ := text.Marshal(0xf9602cd2c3f65e0f, capnp.Struct(s))
	return str
}

func (s BytecodeCache_has_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeCache_has_Results) DecodeFromPtr(p capnp.Ptr) BytecodeCache_has_Results {
	return BytecodeCache_has_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeCache_has_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeCache_has_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeCache_has_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeCache_has_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeCache_has_Results) Has() bool {
	return capnp.Struct(s).Bit(0)
}

func (s BytecodeCache_has_Results) SetHas(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// BytecodeCache_has_Results_List is a list of BytecodeCache_has_Results.
type BytecodeCache_has_Results_List = capnp.StructList[BytecodeCache_has_Results]

// NewBytecodeCache_has_Results creates a new list of BytecodeCache_has_Results.
func NewBytecodeCache_has_Results_List(s *capnp.Segment, sz int32) (BytecodeCache_has_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BytecodeCache_has_Results](l), err
}

// BytecodeCache_has_Results_Future is a wrapper for a BytecodeCache_has_Results promised by a client call.
type BytecodeCache_has_Results_Future struct{ *capnp.Future }

func (f BytecodeCache_has_Results_Future) Struct() (BytecodeCache_has_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeCache_has_Results(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda\xacU]h\x1cU\x18\xfd\xce\xbd3;\x11\xb3" +
	"]\xeeNLL\xa9?\x8d\x09b\xd05K\xf0\xc1\x82" +
	"fM\x0c1!\xc5\xbd\xa5\x01\x8d\xb6\xb8\x9d\x1d\xba\x8b" +
	"\xdb\xee\xb23KRP\xa4\x82\x14\x1f|\x88VD\xad" +
	"\"\x824\x82\xd86\x16!\x15}P\xab\xaf\x92\x0a\xa2" +
	"\"\x92j\x05\x15\x8a\xf5'\x10\x10G\xee\xec\xce\xeel" +
	"\xb2\xebo_\x96\x1d\xee\x99s\xcfw\xbe\xf3}3t" +
	"\x98\xa5\xb4dt\xc4 &w\xeb\x11\xef\xbd;\x13\x83" +
	"\xb1\xf8\xdb\x0b$\xb6\x81H\x87A4\xfc\x04\xdf\x01\x82" +
	"\xf9\x14\x1f!x/\x1f\xfae\xcb\xec\xd1\xad\xaf\x92\xe8" +
	"\xa9\x03N\xf1]\x0a\xf0\xae\x0fX\xa9\x1c~\xed\xcc\xde" +
	"\xc4\x09\x12[\xb8g\xcd\xdd8\x97\xbc _ \x82\xf9" +
	"\x15?c^\xe0\x06\x91\xb9\xca\x8f\x98\xb7i\x06\x91\xf7" +
	"+w\x1f8{\xe9\xa3\xa5\xf0u\xd7h\xa3\x8am@" +
	"Sl\xfb&OO|\xfd\xe1\xf22\xc9\x1e(\x04S" +
	"\x88ImJ!f\xb4\x13\x04\xef\xc5OV\x8e\x9f\xec" +
	"\xbe\xf7\x9d\xb0\xa0KZ\x9f\x02\xac\xfb\x143\x7f\x1c\x9b" +
	"\\\xec\x99}?|G\xaf\xee\x97\xb4]W\x80\x8b\xcf" +
	"}\xea,\xe5\x92gIt\x83H\xe9\x1a\xbeK\xdf\x0a" +
	"\xd2\xbc7&\x86\xfa_9=\xf8\x19\xc9n\x04G7" +
	"\xa9#\x98I\xff\xd5\xe1\xc8\xc0\xe2\xb9\x9fn\xf8bS" +
	"\xb13\xfa\x92\xb9GW\xc5\xde\xaf\x1f1_W\xff<" +
	"\x17W\xac\xf1o\xa7\xbf\xdb\x04^\xd0\xcf\x9b/\xf9\xe0" +
	"\xe7\xf5\x8fM\x11Q\xe0\x89=\xb7\x9e\xec}\xf3\xf8\xc5" +
	"\x90\xa8u=\xaeD\xc5\x9fy\xfa\xd9\x1f\xee\xb8\xf2\xe7" +
	"&KV\xab\xaa\xbe\xd7\x95%\xb9\xe5\xeb\x7f?\xf7\xe8" +
	"\xb5\xbf\x85+~2\xe2\xbb\xba\x10Q\xb2\x1fY\xfc\xb1" +
	"r,~t-\x0c8\x15\xf1-Y\xf6\x01\xb1\xbdk" +
	"\x1f\xac\xdc\xfc\xd0:\xc9m\xf5\xc2?\xaf2\xac\xfa\x80" +
	"o\xde\xfa\xb2\xe3\xfcT~=$\x0fF\x1c4\xe4\x95" +
	"\xcaE\xcbv\x9c\x04\xb72\xa5\x83\xa5\x1d\xa3\x87\\\xdb" +
	"*f\xed\xb1\x8c\x95\xb3\x13\xa5\x8a\xdb?\x92\xce\x943" +
	"\x07\x1c\xa9q\x8dH\x03\x91\x88N\x11\xc9N\x0ey5" +
	"\x83\xb7\xaf\xf6\x02\x11!J\x0cQB\x9dS\xabr\x8e" +
	"\xcf\xdbV\xc5-\x96\x13\xf6\xbcm\xf9\xc4\xd9\xfe]\xb6" +
	"S)\xb8h\xa2\x1d%\x92\x1d\x1c\xb2\x8b\xe1\xb1\x1a\x05" +
	"D\xa3g\x04\x88\x109\x02\xf2\x91*{\x1a\x90\x1d\\" +
	"'\xaa;\x8e k\"9HL\x0c\x18h\x04\x14\xc1" +
	"`\x88\xdeYbB\x181%.\x05/\xd0H\xdc\xce" +
	"\xa6\x90\xc6\xa6j\x9a\x1d\xdao\xbb\xb5Z\x1c\xba\xcc\x16" +
	"U}\xf7y\x02\xda\xf1>\"\x99\xe2\x90\xd3\x0c@\x97" +
	"\xea\xb5\x98\x1c$\x92ws\xc84\x83`\xe8\x02#\x12" +
	";\x1f'\x92\xd3\x1c\xf2>\x06\xc3\xcag\xd1I\x0c\x9d" +
	"\x84X\xa9\x94\xcf\xa2\x83\x18:\xd4\xb4\x16\x8b\xae\xe3\x96" +
	"3(\x8d\x15\xf2\xf6A\x97\x10\xd78\x01\xf1\x90@\xde" +
	"B\xa0_\xb1Qp\xffG\xf7Z\xc6-\x97qZ\xc5" +
	"\xad\xaf\xc1\x1c\xaee#W\xba\xf6\xf8p\xbeP\xa8\xf6" +
	"\x84\xbbN;\xd0\\&\xef\xd6A\xed\x1ag\xcf\xe7\xdd" +
	"\xb1Z\xe3\x02\xcf6\xc4/]\xbe\xce\x7fn\xa4/\x18" +
	"5\x04\xdb(\x94\xbe`K \xd8a\xa2W\x9dE\x8d" +
	"\x98\xd2\x93BLioN\x1d\xdbh\x94a\xe5lu" +
	"[\xa7\x7f[\xf0\x01@\xb0D\x84\xec#&\xc6\xd5m" +
	"\xc1\xda@\xb0\xb6\xc5\xed\xea\xec\x16\x03\xac\xbee\x11\xac" +
	"\x0e\xb1]\x9d]e\x18\xa5\x8a\x9b\x82\xb1\xdfV\xbf\xb9" +
	"\x8c\xd3\xac\xa6\x95\xd5~\xc3\xe0\xfcub\x14\x88\x1fp" +
	"\xc2Y\x9ej\xe46\xc8\xf2N\x95\xe5{8\xe4\xeeP" +
	"\x96\xa5\xcar\x9aC>\xd8z\x96\xfe}\xa6\xb5v\xbb" +
	"\xae\xd5$\xff\xc3\xf4m^\x0b\xff!\xc9Z\xbb\xa9\xf8" +
	";a\xb9\x8c\x03\x10\x03\xda\x8f\x85\x9f\xf8Z\xaf\xfe\x0c" +
	"\x00\x00\xff\xff1m5_"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9a51e53177277763,
		Nodes: []uint64{
			0x91b6120f2a2e3ebe,
			0xa21a945a0ef3799e,
			0xaf2e5ebaa58175d2,
			0xb2c6f1c55b7403f4,
			0xb9b9c4df47b44962,
			0xbb4f16b0a7d2d09b,
			0xc25a17a8499cfe55,
			0xc53168b273d497ee,
			0xd72ab4a0243047ac,
			0xda23f0d3a8250633,
			0xe64ce403f6090174,
			0xeea7ae19b02f5d47,
			0xf20b3dea95929312,
			0xf51e7dd3fc20b968,
			0xf694129c75eba87c,
			0xf9602cd2c3f65e0f,
			0xf9694ae208dbb3e3,
		},
		Compressed: true,
	})
}
