// Code generated by capnpc-go. DO NOT EDIT.

package core

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	capstore "github.com/wetware/pkg/api/capstore"
	cluster "github.com/wetware/pkg/api/cluster"
	process "github.com/wetware/pkg/api/process"
)

type Terminal capnp.Client

// Terminal_TypeID is the unique identifier for the type Terminal.
const Terminal_TypeID = 0xc0c1a3f1fdbabdfd

func (c Terminal) Login(ctx context.Context, params func(Terminal_login_Params) error) (Terminal_login_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc0c1a3f1fdbabdfd,
			MethodID:      0,
			InterfaceName: "core.capnp:Terminal",
			MethodName:    "login",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Terminal_login_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Terminal_login_Results_Future{Future: ans.Future()}, release

}

func (c Terminal) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Terminal) String() string {
	return "Terminal(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Terminal) AddRef() Terminal {
	return Terminal(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Terminal) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Terminal) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Terminal) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Terminal) DecodeFromPtr(p capnp.Ptr) Terminal {
	return Terminal(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Terminal) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Terminal) IsSame(other Terminal) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Terminal) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Terminal) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Terminal_Server is a Terminal with a local implementation.
type Terminal_Server interface {
	Login(context.Context, Terminal_login) error
}

// Terminal_NewServer creates a new Server from an implementation of Terminal_Server.
func Terminal_NewServer(s Terminal_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Terminal_Methods(nil, s), s, c)
}

// Terminal_ServerToClient creates a new Client from an implementation of Terminal_Server.
// The caller is responsible for calling Release on the returned Client.
func Terminal_ServerToClient(s Terminal_Server) Terminal {
	return Terminal(capnp.NewClient(Terminal_NewServer(s)))
}

// Terminal_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Terminal_Methods(methods []server.Method, s Terminal_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc0c1a3f1fdbabdfd,
			MethodID:      0,
			InterfaceName: "core.capnp:Terminal",
			MethodName:    "login",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Login(ctx, Terminal_login{call})
		},
	})

	return methods
}

// Terminal_login holds the state for a server call to Terminal.login.
// See server.Call for documentation.
type Terminal_login struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Terminal_login) Args() Terminal_login_Params {
	return Terminal_login_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Terminal_login) AllocResults() (Terminal_login_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(r), err
}

// Terminal_List is a list of Terminal.
type Terminal_List = capnp.CapList[Terminal]

// NewTerminal creates a new list of Terminal.
func NewTerminal_List(s *capnp.Segment, sz int32) (Terminal_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Terminal](l), err
}

type Terminal_login_Params capnp.Struct

// Terminal_login_Params_TypeID is the unique identifier for the type Terminal_login_Params.
const Terminal_login_Params_TypeID = 0xf7531ef46740370e

func NewTerminal_login_Params(s *capnp.Segment) (Terminal_login_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Params(st), err
}

func NewRootTerminal_login_Params(s *capnp.Segment) (Terminal_login_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Params(st), err
}

func ReadRootTerminal_login_Params(msg *capnp.Message) (Terminal_login_Params, error) {
	root, err := msg.Root()
	return Terminal_login_Params(root.Struct()), err
}

func (s Terminal_login_Params) String() string {
	str, _ := text.Marshal(0xf7531ef46740370e, capnp.Struct(s))
	return str
}

func (s Terminal_login_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Terminal_login_Params) DecodeFromPtr(p capnp.Ptr) Terminal_login_Params {
	return Terminal_login_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Terminal_login_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Terminal_login_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Terminal_login_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Terminal_login_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Terminal_login_Params) Account() cluster.Signer {
	p, _ := capnp.Struct(s).Ptr(0)
	return cluster.Signer(p.Interface().Client())
}

func (s Terminal_login_Params) HasAccount() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Terminal_login_Params) SetAccount(v cluster.Signer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Terminal_login_Params_List is a list of Terminal_login_Params.
type Terminal_login_Params_List = capnp.StructList[Terminal_login_Params]

// NewTerminal_login_Params creates a new list of Terminal_login_Params.
func NewTerminal_login_Params_List(s *capnp.Segment, sz int32) (Terminal_login_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Terminal_login_Params](l), err
}

// Terminal_login_Params_Future is a wrapper for a Terminal_login_Params promised by a client call.
type Terminal_login_Params_Future struct{ *capnp.Future }

func (f Terminal_login_Params_Future) Struct() (Terminal_login_Params, error) {
	p, err := f.Future.Ptr()
	return Terminal_login_Params(p.Struct()), err
}
func (p Terminal_login_Params_Future) Account() cluster.Signer {
	return cluster.Signer(p.Future.Field(0, nil).Client())
}

type Terminal_login_Results capnp.Struct

// Terminal_login_Results_TypeID is the unique identifier for the type Terminal_login_Results.
const Terminal_login_Results_TypeID = 0x9baeae5a95f57921

func NewTerminal_login_Results(s *capnp.Segment) (Terminal_login_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(st), err
}

func NewRootTerminal_login_Results(s *capnp.Segment) (Terminal_login_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(st), err
}

func ReadRootTerminal_login_Results(msg *capnp.Message) (Terminal_login_Results, error) {
	root, err := msg.Root()
	return Terminal_login_Results(root.Struct()), err
}

func (s Terminal_login_Results) String() string {
	str, _ := text.Marshal(0x9baeae5a95f57921, capnp.Struct(s))
	return str
}

func (s Terminal_login_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Terminal_login_Results) DecodeFromPtr(p capnp.Ptr) Terminal_login_Results {
	return Terminal_login_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Terminal_login_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Terminal_login_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Terminal_login_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Terminal_login_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Terminal_login_Results) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Terminal_login_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Terminal_login_Results) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Terminal_login_Results) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Terminal_login_Results_List is a list of Terminal_login_Results.
type Terminal_login_Results_List = capnp.StructList[Terminal_login_Results]

// NewTerminal_login_Results creates a new list of Terminal_login_Results.
func NewTerminal_login_Results_List(s *capnp.Segment, sz int32) (Terminal_login_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Terminal_login_Results](l), err
}

// Terminal_login_Results_Future is a wrapper for a Terminal_login_Results promised by a client call.
type Terminal_login_Results_Future struct{ *capnp.Future }

func (f Terminal_login_Results_Future) Struct() (Terminal_login_Results, error) {
	p, err := f.Future.Ptr()
	return Terminal_login_Results(p.Struct()), err
}
func (p Terminal_login_Results_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type Session capnp.Struct
type Session_local Session

// Session_TypeID is the unique identifier for the type Session.
const Session_TypeID = 0xc65521f186b6e059

func NewSession(s *capnp.Segment) (Session, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Session(st), err
}

func NewRootSession(s *capnp.Segment) (Session, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Session(st), err
}

func ReadRootSession(msg *capnp.Message) (Session, error) {
	root, err := msg.Root()
	return Session(root.Struct()), err
}

func (s Session) String() string {
	str, _ := text.Marshal(0xc65521f186b6e059, capnp.Struct(s))
	return str
}

func (s Session) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session) DecodeFromPtr(p capnp.Ptr) Session {
	return Session(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session) Local() Session_local { return Session_local(s) }

func (s Session_local) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_local) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_local) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session_local) Peer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Session_local) HasPeer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Session_local) PeerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Session_local) SetPeer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Session_local) Server() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Session_local) SetServer(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Session_local) Host() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Session_local) HasHost() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Session_local) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Session_local) SetHost(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Session) View() cluster.View {
	p, _ := capnp.Struct(s).Ptr(2)
	return cluster.View(p.Interface().Client())
}

func (s Session) HasView() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Session) SetView(v cluster.View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

func (s Session) Exec() Executor {
	p, _ := capnp.Struct(s).Ptr(3)
	return Executor(p.Interface().Client())
}

func (s Session) HasExec() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Session) SetExec(v Executor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

func (s Session) CapStore() capstore.CapStore {
	p, _ := capnp.Struct(s).Ptr(4)
	return capstore.CapStore(p.Interface().Client())
}

func (s Session) HasCapStore() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Session) SetCapStore(v capstore.CapStore) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(4, in.ToPtr())
}

func (s Session) Extra() (Session_Extra_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return Session_Extra_List(p.List()), err
}

func (s Session) HasExtra() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Session) SetExtra(v Session_Extra_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewExtra sets the extra field to a newly
// allocated Session_Extra_List, preferring placement in s's segment.
func (s Session) NewExtra(n int32) (Session_Extra_List, error) {
	l, err := NewSession_Extra_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Session_Extra_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}

// Session_List is a list of Session.
type Session_List = capnp.StructList[Session]

// NewSession creates a new list of Session.
func NewSession_List(s *capnp.Segment, sz int32) (Session_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return capnp.StructList[Session](l), err
}

// Session_Future is a wrapper for a Session promised by a client call.
type Session_Future struct{ *capnp.Future }

func (f Session_Future) Struct() (Session, error) {
	p, err := f.Future.Ptr()
	return Session(p.Struct()), err
}
func (p Session_Future) Local() Session_local_Future { return Session_local_Future{p.Future} }

// Session_local_Future is a wrapper for a Session_local promised by a client call.
type Session_local_Future struct{ *capnp.Future }

func (f Session_local_Future) Struct() (Session_local, error) {
	p, err := f.Future.Ptr()
	return Session_local(p.Struct()), err
}
func (p Session_Future) View() cluster.View {
	return cluster.View(p.Future.Field(2, nil).Client())
}

func (p Session_Future) Exec() Executor {
	return Executor(p.Future.Field(3, nil).Client())
}

func (p Session_Future) CapStore() capstore.CapStore {
	return capstore.CapStore(p.Future.Field(4, nil).Client())
}

type Session_Extra capnp.Struct

// Session_Extra_TypeID is the unique identifier for the type Session_Extra.
const Session_Extra_TypeID = 0xb6ead80127ea2fdd

func NewSession_Extra(s *capnp.Segment) (Session_Extra, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Session_Extra(st), err
}

func NewRootSession_Extra(s *capnp.Segment) (Session_Extra, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Session_Extra(st), err
}

func ReadRootSession_Extra(msg *capnp.Message) (Session_Extra, error) {
	root, err := msg.Root()
	return Session_Extra(root.Struct()), err
}

func (s Session_Extra) String() string {
	str, _ := text.Marshal(0xb6ead80127ea2fdd, capnp.Struct(s))
	return str
}

func (s Session_Extra) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_Extra) DecodeFromPtr(p capnp.Ptr) Session_Extra {
	return Session_Extra(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_Extra) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_Extra) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_Extra) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_Extra) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session_Extra) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Session_Extra) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Session_Extra) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Session_Extra) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Session_Extra) Client() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(1)
	return p.Interface().Client()
}

func (s Session_Extra) HasClient() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Session_Extra) SetClient(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Session_Extra_List is a list of Session_Extra.
type Session_Extra_List = capnp.StructList[Session_Extra]

// NewSession_Extra creates a new list of Session_Extra.
func NewSession_Extra_List(s *capnp.Segment, sz int32) (Session_Extra_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Session_Extra](l), err
}

// Session_Extra_Future is a wrapper for a Session_Extra promised by a client call.
type Session_Extra_Future struct{ *capnp.Future }

func (f Session_Extra_Future) Struct() (Session_Extra, error) {
	p, err := f.Future.Ptr()
	return Session_Extra(p.Struct()), err
}
func (p Session_Extra_Future) Client() capnp.Client {
	return p.Future.Field(1, nil).Client()
}

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0x804fe3440f678ff3

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      0,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release

}

func (c Executor) ExecCached(ctx context.Context, params func(Executor_execCached_Params) error) (Executor_execCached_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      1,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "execCached",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_execCached_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_execCached_Results_Future{Future: ans.Future()}, release

}

func (c Executor) Ps(ctx context.Context, params func(Executor_ps_Params) error) (Executor_ps_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      2,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "ps",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_ps_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_ps_Results_Future{Future: ans.Future()}, release

}

func (c Executor) BytecodeCache(ctx context.Context, params func(Executor_bytecodeCache_Params) error) (Executor_bytecodeCache_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      3,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "bytecodeCache",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_bytecodeCache_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_bytecodeCache_Results_Future{Future: ans.Future()}, release

}

func (c Executor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return "Executor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error

	ExecCached(context.Context, Executor_execCached) error

	Ps(context.Context, Executor_ps) error

	BytecodeCache(context.Context, Executor_bytecodeCache) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      0,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      1,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "execCached",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExecCached(ctx, Executor_execCached{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      2,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "ps",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ps(ctx, Executor_ps{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      3,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "bytecodeCache",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.BytecodeCache(ctx, Executor_bytecodeCache{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(r), err
}

// Executor_execCached holds the state for a server call to Executor.execCached.
// See server.Call for documentation.
type Executor_execCached struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_execCached) Args() Executor_execCached_Params {
	return Executor_execCached_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_execCached) AllocResults() (Executor_execCached_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(r), err
}

// Executor_ps holds the state for a server call to Executor.ps.
// See server.Call for documentation.
type Executor_ps struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_ps) Args() Executor_ps_Params {
	return Executor_ps_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_ps) AllocResults() (Executor_ps_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_ps_Results(r), err
}

// Executor_bytecodeCache holds the state for a server call to Executor.bytecodeCache.
// See server.Call for documentation.
type Executor_bytecodeCache struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_bytecodeCache) Args() Executor_bytecodeCache_Params {
	return Executor_bytecodeCache_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_bytecodeCache) AllocResults() (Executor_bytecodeCache_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_bytecodeCache_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_exec_Params capnp.Struct

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0x969e88e97ed79d94

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_exec_Params(st), err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_exec_Params(st), err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params(root.Struct()), err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0x969e88e97ed79d94, capnp.Struct(s))
	return str
}

func (s Executor_exec_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Params) DecodeFromPtr(p capnp.Ptr) Executor_exec_Params {
	return Executor_exec_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Params) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Executor_exec_Params) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Params) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Executor_exec_Params) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Executor_exec_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Executor_exec_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_exec_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Executor_exec_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_exec_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_exec_Params) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Executor_exec_Params) HasArgs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Executor_exec_Params) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Executor_exec_Params) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Executor_exec_Params](l), err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (f Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Params(p.Struct()), err
}
func (p Executor_exec_Params_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type Executor_exec_Results capnp.Struct

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0xd698fc716f499b07

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results(root.Struct()), err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0xd698fc716f499b07, capnp.Struct(s))
	return str
}

func (s Executor_exec_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Results) DecodeFromPtr(p capnp.Ptr) Executor_exec_Results {
	return Executor_exec_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Results) Process() process.Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Process(p.Interface().Client())
}

func (s Executor_exec_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Results) SetProcess(v process.Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results](l), err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (f Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Results(p.Struct()), err
}
func (p Executor_exec_Results_Future) Process() process.Process {
	return process.Process(p.Future.Field(0, nil).Client())
}

type Executor_execCached_Params capnp.Struct

// Executor_execCached_Params_TypeID is the unique identifier for the type Executor_execCached_Params.
const Executor_execCached_Params_TypeID = 0xb52aad0122df1319

func NewExecutor_execCached_Params(s *capnp.Segment) (Executor_execCached_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_execCached_Params(st), err
}

func NewRootExecutor_execCached_Params(s *capnp.Segment) (Executor_execCached_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_execCached_Params(st), err
}

func ReadRootExecutor_execCached_Params(msg *capnp.Message) (Executor_execCached_Params, error) {
	root, err := msg.Root()
	return Executor_execCached_Params(root.Struct()), err
}

func (s Executor_execCached_Params) String() string {
	str, _ := text.Marshal(0xb52aad0122df1319, capnp.Struct(s))
	return str
}

func (s Executor_execCached_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execCached_Params) DecodeFromPtr(p capnp.Ptr) Executor_execCached_Params {
	return Executor_execCached_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execCached_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execCached_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execCached_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execCached_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execCached_Params) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Executor_execCached_Params) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execCached_Params) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Executor_execCached_Params) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Executor_execCached_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Executor_execCached_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_execCached_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Executor_execCached_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_execCached_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_execCached_Params) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Executor_execCached_Params) HasArgs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Executor_execCached_Params) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Executor_execCached_Params) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Executor_execCached_Params_List is a list of Executor_execCached_Params.
type Executor_execCached_Params_List = capnp.StructList[Executor_execCached_Params]

// NewExecutor_execCached_Params creates a new list of Executor_execCached_Params.
func NewExecutor_execCached_Params_List(s *capnp.Segment, sz int32) (Executor_execCached_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Executor_execCached_Params](l), err
}

// Executor_execCached_Params_Future is a wrapper for a Executor_execCached_Params promised by a client call.
type Executor_execCached_Params_Future struct{ *capnp.Future }

func (f Executor_execCached_Params_Future) Struct() (Executor_execCached_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_execCached_Params(p.Struct()), err
}
func (p Executor_execCached_Params_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type Executor_execCached_Results capnp.Struct

// Executor_execCached_Results_TypeID is the unique identifier for the type Executor_execCached_Results.
const Executor_execCached_Results_TypeID = 0x81914daea9a63e6e

func NewExecutor_execCached_Results(s *capnp.Segment) (Executor_execCached_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(st), err
}

func NewRootExecutor_execCached_Results(s *capnp.Segment) (Executor_execCached_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(st), err
}

func ReadRootExecutor_execCached_Results(msg *capnp.Message) (Executor_execCached_Results, error) {
	root, err := msg.Root()
	return Executor_execCached_Results(root.Struct()), err
}

func (s Executor_execCached_Results) String() string {
	str, _ := text.Marshal(0x81914daea9a63e6e, capnp.Struct(s))
	return str
}

func (s Executor_execCached_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execCached_Results) DecodeFromPtr(p capnp.Ptr) Executor_execCached_Results {
	return Executor_execCached_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execCached_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execCached_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execCached_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execCached_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execCached_Results) Process() process.Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Process(p.Interface().Client())
}

func (s Executor_execCached_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execCached_Results) SetProcess(v process.Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_execCached_Results_List is a list of Executor_execCached_Results.
type Executor_execCached_Results_List = capnp.StructList[Executor_execCached_Results]

// NewExecutor_execCached_Results creates a new list of Executor_execCached_Results.
func NewExecutor_execCached_Results_List(s *capnp.Segment, sz int32) (Executor_execCached_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_execCached_Results](l), err
}

// Executor_execCached_Results_Future is a wrapper for a Executor_execCached_Results promised by a client call.
type Executor_execCached_Results_Future struct{ *capnp.Future }

func (f Executor_execCached_Results_Future) Struct() (Executor_execCached_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_execCached_Results(p.Struct()), err
}
func (p Executor_execCached_Results_Future) Process() process.Process {
	return process.Process(p.Future.Field(0, nil).Client())
}

type Executor_ps_Params capnp.Struct

// Executor_ps_Params_TypeID is the unique identifier for the type Executor_ps_Params.
const Executor_ps_Params_TypeID = 0xffdf64593702d802

func NewExecutor_ps_Params(s *capnp.Segment) (Executor_ps_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_ps_Params(st), err
}

func NewRootExecutor_ps_Params(s *capnp.Segment) (Executor_ps_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_ps_Params(st), err
}

func ReadRootExecutor_ps_Params(msg *capnp.Message) (Executor_ps_Params, error) {
	root, err := msg.Root()
	return Executor_ps_Params(root.Struct()), err
}

func (s Executor_ps_Params) String() string {
	str, _ := text.Marshal(0xffdf64593702d802, capnp.Struct(s))
	return str
}

func (s Executor_ps_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_ps_Params) DecodeFromPtr(p capnp.Ptr) Executor_ps_Params {
	return Executor_ps_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_ps_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_ps_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_ps_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_ps_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Executor_ps_Params_List is a list of Executor_ps_Params.
type Executor_ps_Params_List = capnp.StructList[Executor_ps_Params]

// NewExecutor_ps_Params creates a new list of Executor_ps_Params.
func NewExecutor_ps_Params_List(s *capnp.Segment, sz int32) (Executor_ps_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Executor_ps_Params](l), err
}

// Executor_ps_Params_Future is a wrapper for a Executor_ps_Params promised by a client call.
type Executor_ps_Params_Future struct{ *capnp.Future }

func (f Executor_ps_Params_Future) Struct() (Executor_ps_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_ps_Params(p.Struct()), err
}

type Executor_ps_Results capnp.Struct

// Executor_ps_Results_TypeID is the unique identifier for the type Executor_ps_Results.
const Executor_ps_Results_TypeID = 0xd13bb87cc9defbdd

func NewExecutor_ps_Results(s *capnp.Segment) (Executor_ps_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_ps_Results(st), err
}

func NewRootExecutor_ps_Results(s *capnp.Segment) (Executor_ps_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_ps_Results(st), err
}

func ReadRootExecutor_ps_Results(msg *capnp.Message) (Executor_ps_Results, error) {
	root, err := msg.Root()
	return Executor_ps_Results(root.Struct()), err
}

func (s Executor_ps_Results) String() string {
	str, _ := text.Marshal(0xd13bb87cc9defbdd, capnp.Struct(s))
	return str
}

func (s Executor_ps_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_ps_Results) DecodeFromPtr(p capnp.Ptr) Executor_ps_Results {
	return Executor_ps_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_ps_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_ps_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_ps_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_ps_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_ps_Results) Procs() (process.Info_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return process.Info_List(p.List()), err
}

func (s Executor_ps_Results) HasProcs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_ps_Results) SetProcs(v process.Info_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewProcs sets the procs field to a newly
// allocated process.Info_List, preferring placement in s's segment.
func (s Executor_ps_Results) NewProcs(n int32) (process.Info_List, error) {
	l, err := process.NewInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return process.Info_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Executor_ps_Results_List is a list of Executor_ps_Results.
type Executor_ps_Results_List = capnp.StructList[Executor_ps_Results]

// NewExecutor_ps_Results creates a new list of Executor_ps_Results.
func NewExecutor_ps_Results_List(s *capnp.Segment, sz int32) (Executor_ps_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_ps_Results](l), err
}

// Executor_ps_Results_Future is a wrapper for a Executor_ps_Results promised by a client call.
type Executor_ps_Results_Future struct{ *capnp.Future }

func (f Executor_ps_Results_Future) Struct() (Executor_ps_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_ps_Results(p.Struct()), err
}

type Executor_bytecodeCache_Params capnp.Struct

// Executor_bytecodeCache_Params_TypeID is the unique identifier for the type Executor_bytecodeCache_Params.
const Executor_bytecodeCache_Params_TypeID = 0x8b1d7e7251a6624c

func NewExecutor_bytecodeCache_Params(s *capnp.Segment) (Executor_bytecodeCache_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_bytecodeCache_Params(st), err
}

func NewRootExecutor_bytecodeCache_Params(s *capnp.Segment) (Executor_bytecodeCache_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_bytecodeCache_Params(st), err
}

func ReadRootExecutor_bytecodeCache_Params(msg *capnp.Message) (Executor_bytecodeCache_Params, error) {
	root, err := msg.Root()
	return Executor_bytecodeCache_Params(root.Struct()), err
}

func (s Executor_bytecodeCache_Params) String() string {
	str, _ := text.Marshal(0x8b1d7e7251a6624c, capnp.Struct(s))
	return str
}

func (s Executor_bytecodeCache_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_bytecodeCache_Params) DecodeFromPtr(p capnp.Ptr) Executor_bytecodeCache_Params {
	return Executor_bytecodeCache_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_bytecodeCache_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_bytecodeCache_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_bytecodeCache_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_bytecodeCache_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Executor_bytecodeCache_Params_List is a list of Executor_bytecodeCache_Params.
type Executor_bytecodeCache_Params_List = capnp.StructList[Executor_bytecodeCache_Params]

// NewExecutor_bytecodeCache_Params creates a new list of Executor_bytecodeCache_Params.
func NewExecutor_bytecodeCache_Params_List(s *capnp.Segment, sz int32) (Executor_bytecodeCache_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Executor_bytecodeCache_Params](l), err
}

// Executor_bytecodeCache_Params_Future is a wrapper for a Executor_bytecodeCache_Params promised by a client call.
type Executor_bytecodeCache_Params_Future struct{ *capnp.Future }

func (f Executor_bytecodeCache_Params_Future) Struct() (Executor_bytecodeCache_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_bytecodeCache_Params(p.Struct()), err
}

type Executor_bytecodeCache_Results capnp.Struct

// Executor_bytecodeCache_Results_TypeID is the unique identifier for the type Executor_bytecodeCache_Results.
const Executor_bytecodeCache_Results_TypeID = 0x9315a840d2a15700

func NewExecutor_bytecodeCache_Results(s *capnp.Segment) (Executor_bytecodeCache_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_bytecodeCache_Results(st), err
}

func NewRootExecutor_bytecodeCache_Results(s *capnp.Segment) (Executor_bytecodeCache_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_bytecodeCache_Results(st), err
}

func ReadRootExecutor_bytecodeCache_Results(msg *capnp.Message) (Executor_bytecodeCache_Results, error) {
	root, err := msg.Root()
	return Executor_bytecodeCache_Results(root.Struct()), err
}

func (s Executor_bytecodeCache_Results) String() string {
	str, _ := text.Marshal(0x9315a840d2a15700, capnp.Struct(s))
	return str
}

func (s Executor_bytecodeCache_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_bytecodeCache_Results) DecodeFromPtr(p capnp.Ptr) Executor_bytecodeCache_Results {
	return Executor_bytecodeCache_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_bytecodeCache_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_bytecodeCache_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_bytecodeCache_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_bytecodeCache_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_bytecodeCache_Results) Cache() process.BytecodeCache {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.BytecodeCache(p.Interface().Client())
}

func (s Executor_bytecodeCache_Results) HasCache() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_bytecodeCache_Results) SetCache(v process.BytecodeCache) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_bytecodeCache_Results_List is a list of Executor_bytecodeCache_Results.
type Executor_bytecodeCache_Results_List = capnp.StructList[Executor_bytecodeCache_Results]

// NewExecutor_bytecodeCache_Results creates a new list of Executor_bytecodeCache_Results.
func NewExecutor_bytecodeCache_Results_List(s *capnp.Segment, sz int32) (Executor_bytecodeCache_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_bytecodeCache_Results](l), err
}

// Executor_bytecodeCache_Results_Future is a wrapper for a Executor_bytecodeCache_Results promised by a client call.
type Executor_bytecodeCache_Results_Future struct{ *capnp.Future }

func (f Executor_bytecodeCache_Results_Future) Struct() (Executor_bytecodeCache_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_bytecodeCache_Results(p.Struct()), err
}
func (p Executor_bytecodeCache_Results_Future) Cache() process.BytecodeCache {
	return process.BytecodeCache(p.Future.Field(0, nil).Client())
}

type ProcessInit capnp.Client

// ProcessInit_TypeID is the unique identifier for the type ProcessInit.
const ProcessInit_TypeID = 0x8efe6ee8e0e56459

func (c ProcessInit) Terminal(ctx context.Context, params func(ProcessInit_terminal_Params) error) (ProcessInit_terminal_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      0,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "terminal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ProcessInit_terminal_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProcessInit_terminal_Results_Future{Future: ans.Future()}, release

}

func (c ProcessInit) Events(ctx context.Context, params func(ProcessInit_events_Params) error) (ProcessInit_events_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      1,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "events",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ProcessInit_events_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProcessInit_events_Results_Future{Future: ans.Future()}, release

}

func (c ProcessInit) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ProcessInit) String() string {
	return "ProcessInit(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ProcessInit) AddRef() ProcessInit {
	return ProcessInit(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ProcessInit) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ProcessInit) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ProcessInit) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ProcessInit) DecodeFromPtr(p capnp.Ptr) ProcessInit {
	return ProcessInit(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ProcessInit) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ProcessInit) IsSame(other ProcessInit) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ProcessInit) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ProcessInit) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ProcessInit_Server is a ProcessInit with a local implementation.
type ProcessInit_Server interface {
	Terminal(context.Context, ProcessInit_terminal) error

	Events(context.Context, ProcessInit_events) error
}

// ProcessInit_NewServer creates a new Server from an implementation of ProcessInit_Server.
func ProcessInit_NewServer(s ProcessInit_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ProcessInit_Methods(nil, s), s, c)
}

// ProcessInit_ServerToClient creates a new Client from an implementation of ProcessInit_Server.
// The caller is responsible for calling Release on the returned Client.
func ProcessInit_ServerToClient(s ProcessInit_Server) ProcessInit {
	return ProcessInit(capnp.NewClient(ProcessInit_NewServer(s)))
}

// ProcessInit_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ProcessInit_Methods(methods []server.Method, s ProcessInit_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      0,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "terminal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Terminal(ctx, ProcessInit_terminal{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      1,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "events",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Events(ctx, ProcessInit_events{call})
		},
	})

	return methods
}

// ProcessInit_terminal holds the state for a server call to ProcessInit.terminal.
// See server.Call for documentation.
type ProcessInit_terminal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ProcessInit_terminal) Args() ProcessInit_terminal_Params {
	return ProcessInit_terminal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ProcessInit_terminal) AllocResults() (ProcessInit_terminal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_terminal_Results(r), err
}

// ProcessInit_events holds the state for a server call to ProcessInit.events.
// See server.Call for documentation.
type ProcessInit_events struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ProcessInit_events) Args() ProcessInit_events_Params {
	return ProcessInit_events_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ProcessInit_events) AllocResults() (ProcessInit_events_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_events_Results(r), err
}

// ProcessInit_List is a list of ProcessInit.
type ProcessInit_List = capnp.CapList[ProcessInit]

// NewProcessInit creates a new list of ProcessInit.
func NewProcessInit_List(s *capnp.Segment, sz int32) (ProcessInit_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ProcessInit](l), err
}

type ProcessInit_terminal_Params capnp.Struct

// ProcessInit_terminal_Params_TypeID is the unique identifier for the type ProcessInit_terminal_Params.
const ProcessInit_terminal_Params_TypeID = 0xea6d16891c17db82

func NewProcessInit_terminal_Params(s *capnp.Segment) (ProcessInit_terminal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_terminal_Params(st), err
}

func NewRootProcessInit_terminal_Params(s *capnp.Segment) (ProcessInit_terminal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_terminal_Params(st), err
}

func ReadRootProcessInit_terminal_Params(msg *capnp.Message) (ProcessInit_terminal_Params, error) {
	root, err := msg.Root()
	return ProcessInit_terminal_Params(root.Struct()), err
}

func (s ProcessInit_terminal_Params) String() string {
	str, _ := text.Marshal(0xea6d16891c17db82, capnp.Struct(s))
	return str
}

func (s ProcessInit_terminal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_terminal_Params) DecodeFromPtr(p capnp.Ptr) ProcessInit_terminal_Params {
	return ProcessInit_terminal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_terminal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_terminal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_terminal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_terminal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ProcessInit_terminal_Params_List is a list of ProcessInit_terminal_Params.
type ProcessInit_terminal_Params_List = capnp.StructList[ProcessInit_terminal_Params]

// NewProcessInit_terminal_Params creates a new list of ProcessInit_terminal_Params.
func NewProcessInit_terminal_Params_List(s *capnp.Segment, sz int32) (ProcessInit_terminal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ProcessInit_terminal_Params](l), err
}

// ProcessInit_terminal_Params_Future is a wrapper for a ProcessInit_terminal_Params promised by a client call.
type ProcessInit_terminal_Params_Future struct{ *capnp.Future }

func (f ProcessInit_terminal_Params_Future) Struct() (ProcessInit_terminal_Params, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_terminal_Params(p.Struct()), err
}

type ProcessInit_terminal_Results capnp.Struct

// ProcessInit_terminal_Results_TypeID is the unique identifier for the type ProcessInit_terminal_Results.
const ProcessInit_terminal_Results_TypeID = 0xb2239bbcb9521b14

func NewProcessInit_terminal_Results(s *capnp.Segment) (ProcessInit_terminal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_terminal_Results(st), err
}

func NewRootProcessInit_terminal_Results(s *capnp.Segment) (ProcessInit_terminal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_terminal_Results(st), err
}

func ReadRootProcessInit_terminal_Results(msg *capnp.Message) (ProcessInit_terminal_Results, error) {
	root, err := msg.Root()
	return ProcessInit_terminal_Results(root.Struct()), err
}

func (s ProcessInit_terminal_Results) String() string {
	str, _ := text.Marshal(0xb2239bbcb9521b14, capnp.Struct(s))
	return str
}

func (s ProcessInit_terminal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_terminal_Results) DecodeFromPtr(p capnp.Ptr) ProcessInit_terminal_Results {
	return ProcessInit_terminal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_terminal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_terminal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_terminal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_terminal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProcessInit_terminal_Results) Terminal() Terminal {
	p, _ := capnp.Struct(s).Ptr(0)
	return Terminal(p.Interface().Client())
}

func (s ProcessInit_terminal_Results) HasTerminal() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProcessInit_terminal_Results) SetTerminal(v Terminal) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ProcessInit_terminal_Results_List is a list of ProcessInit_terminal_Results.
type ProcessInit_terminal_Results_List = capnp.StructList[ProcessInit_terminal_Results]

// NewProcessInit_terminal_Results creates a new list of ProcessInit_terminal_Results.
func NewProcessInit_terminal_Results_List(s *capnp.Segment, sz int32) (ProcessInit_terminal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ProcessInit_terminal_Results](l), err
}

// ProcessInit_terminal_Results_Future is a wrapper for a ProcessInit_terminal_Results promised by a client call.
type ProcessInit_terminal_Results_Future struct{ *capnp.Future }

func (f ProcessInit_terminal_Results_Future) Struct() (ProcessInit_terminal_Results, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_terminal_Results(p.Struct()), err
}
func (p ProcessInit_terminal_Results_Future) Terminal() Terminal {
	return Terminal(p.Future.Field(0, nil).Client())
}

type ProcessInit_events_Params capnp.Struct

// ProcessInit_events_Params_TypeID is the unique identifier for the type ProcessInit_events_Params.
const ProcessInit_events_Params_TypeID = 0xca85f2cfe432ed49

func NewProcessInit_events_Params(s *capnp.Segment) (ProcessInit_events_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_events_Params(st), err
}

func NewRootProcessInit_events_Params(s *capnp.Segment) (ProcessInit_events_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_events_Params(st), err
}

func ReadRootProcessInit_events_Params(msg *capnp.Message) (ProcessInit_events_Params, error) {
	root, err := msg.Root()
	return ProcessInit_events_Params(root.Struct()), err
}

func (s ProcessInit_events_Params) String() string {
	str, _ := text.Marshal(0xca85f2cfe432ed49, capnp.Struct(s))
	return str
}

func (s ProcessInit_events_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_events_Params) DecodeFromPtr(p capnp.Ptr) ProcessInit_events_Params {
	return ProcessInit_events_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_events_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_events_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_events_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_events_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProcessInit_events_Params) Handler() process.Events {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Events(p.Interface().Client())
}

func (s ProcessInit_events_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProcessInit_events_Params) SetHandler(v process.Events) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ProcessInit_events_Params_List is a list of ProcessInit_events_Params.
type ProcessInit_events_Params_List = capnp.StructList[ProcessInit_events_Params]

// NewProcessInit_events_Params creates a new list of ProcessInit_events_Params.
func NewProcessInit_events_Params_List(s *capnp.Segment, sz int32) (ProcessInit_events_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ProcessInit_events_Params](l), err
}

// ProcessInit_events_Params_Future is a wrapper for a ProcessInit_events_Params promised by a client call.
type ProcessInit_events_Params_Future struct{ *capnp.Future }

func (f ProcessInit_events_Params_Future) Struct() (ProcessInit_events_Params, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_events_Params(p.Struct()), err
}
func (p ProcessInit_events_Params_Future) Handler() process.Events {
	return process.Events(p.Future.Field(0, nil).Client())
}

type ProcessInit_events_Results capnp.Struct

// ProcessInit_events_Results_TypeID is the unique identifier for the type ProcessInit_events_Results.
const ProcessInit_events_Results_TypeID = 0xc6398605d1d1ffd8

func NewProcessInit_events_Results(s *capnp.Segment) (ProcessInit_events_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_events_Results(st), err
}

func NewRootProcessInit_events_Results(s *capnp.Segment) (ProcessInit_events_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_events_Results(st), err
}

func ReadRootProcessInit_events_Results(msg *capnp.Message) (ProcessInit_events_Results, error) {
	root, err := msg.Root()
	return ProcessInit_events_Results(root.Struct()), err
}

func (s ProcessInit_events_Results) String() string {
	str, _ := text.Marshal(0xc6398605d1d1ffd8, capnp.Struct(s))
	return str
}

func (s ProcessInit_events_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_events_Results) DecodeFromPtr(p capnp.Ptr) ProcessInit_events_Results {
	return ProcessInit_events_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_events_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_events_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_events_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_events_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ProcessInit_events_Results_List is a list of ProcessInit_events_Results.
type ProcessInit_events_Results_List = capnp.StructList[ProcessInit_events_Results]

// NewProcessInit_events_Results creates a new list of ProcessInit_events_Results.
func NewProcessInit_events_Results_List(s *capnp.Segment, sz int32) (ProcessInit_events_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ProcessInit_events_Results](l), err
}

// ProcessInit_events_Results_Future is a wrapper for a ProcessInit_events_Results promised by a client call.
type ProcessInit_events_Results_Future struct{ *capnp.Future }

func (f ProcessInit_events_Results_Future) Struct() (ProcessInit_events_Results, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_events_Results(p.Struct()), err
}

const schema_e82706a772b0927b = "x\xda\x9cVml\x14U\x17>\xe7\xde\xddN\xfb\xd2" +
	"2{w\x86\x97\xf7U\xcb\x06(\"M\xa8\xd0\x9a\x10" +
	"j\xb4\x1b\xa4\xc164\xeem!\xa6\x8d$\x0c\xbb\xd7" +
	"v\x93\xed\xec23\x85\x12\x15\xd4\x08\x02\x1a\x8d\x9f1" +
	"\x10L\xc0\x80\xf8\x03\xfc\x88%B0\x91\x18I\xe0\x87" +
	"\xa6\x9a(\xd1  \xa8\xd0\xc4H\xebW\xa2\xc0\x98;" +
	"\xbb\xb3;K[\x88\xfe\xdaI\xee\xb9\xe79\xcfs\x9e" +
	"s\xee.\xa8\xad\x88\x87\x16\xd6,\x9b\x01\xa4k5\x86" +
	"+\xdc_\x9e\xefU\x97\x9e\x7f\xe0q`S\xa8\xfb\xc8" +
	"\x8b\xefXoV\xcc\xbd\x08\x80Z\x95\xbaGc\xaa\x02" +
	"\xd0T\xa3*\xa8\x0d\xc9O\xd7\xbcw\xdf[\x07;^" +
	"x\x02\x98\x8e\x00a\x94\xc7\xbb\xd4f\x04\xd4\xf6\xaa-" +
	"\x80\xee\xf25\xfb\xb8\xb5\xb1\xf6\x99|@H\x9e\x7f\xa2" +
	"\xb6#\x84\xdc\xee\xd4\xf7g/\x9a\xd7\x9e\x1b\x07\xf4\xae" +
	"zD;,\xb3kC\xea\xd3ZUD\x01\xb8\xf6\xe0" +
	"\xee\xcf\xe3\xfb\xa7\xbd\x14@\x19U;%\xcaU\x0f\xe5" +
	"\xe5]_m\xbc\xb4\xf5\xf5W\x81\xeb(#\xa8\x8c\xa8" +
	"\x8d\x10\x1913\xf2#\xa0;s\xc3o\xaf\xf4\x1c<" +
	"\xb83Xh\x15\x8b\xca\x00\xc6d\x0a\xfd\xd6\xce\xc3G" +
	"w\xce~\x0f\xd8\xf4b\xc0B\xb6D\x06,\xf6\x02\xfe" +
	"\xaf\x9d\x99\x85\x07\xea\x87\xca0V\xb1F\x19!\x98\xc4" +
	"8}\xe7\xc8\\<5r\x08\x98\x86n\xf7\xd9C[" +
	"Fg\xae<\x0ea\"\xa9\xb4EOj+\xa3\xf2\x8b" +
	"G\xd7\x03\xba$s\xfa\xfd\xee\xa6\xf3G\x81k\x18\x08" +
	"\x9eV\xa1 \x80v zR\x0a\x11}\x1b\xd0\xbd\xfa" +
	"\xe1\x91\xab\xa3o\x1c\xfbh\x9cNm\xda\x1e\x8dk2" +
	"e\x87\xb6L\x1b\x90_\xee)wx8\xbce\xf1\xf1" +
	"<\x0bO\xeeUZ\xa3'\xb7\x0f\xc1\xa7 \x96\xf2\x84" +
	"+d\x82Vm\x87\xd6\xa1M\x07hZ\xa9\xc5\x10\xd0" +
	"m\xfb\xa9\xf1\xc2gc\x9bO\x06\xd5X\xa5\xd7{\\" +
	"u\xa9\xc6\xe9\xbf\xbe=\xf1\xe8\x07w\x0f\x07\xf4\xd46" +
	"\xeb\x7f\x02j\xdb\xbcseg[v\xed\x95\xd7\xbe\x0c" +
	"\xea}X\xff\x8fLp\xcc\x0bx\xf2\x9b\xe9\xb7m\xfb" +
	"o\xffH\xa0\xd2sz\xb3\xact\xea\xa2x\xef\xaf3" +
	"\xba\xfe\x08^=\x91\xbf:\xec]%\xa7\xc8\xa2\xee\xd4" +
	"\x19\xb7\xe4)mT\x1f\x03\x17\\\xb8\xec&\xb3\x96h" +
	"H\x1a94s\xcd\xad\x83\"9\xa08Y+\x81\xc8" +
	"#4\x0cPt\x0a\xfa\x05\xb2\xb5\xf5@\x98P\xb0\xd4" +
	"a\xf4]\xcd\xba{\x800\xae )b\xa2O\x9c\xb5" +
	"\xde\x02\x84-V\x90\x16=\x8e\xe0\xdbt\xbe\x05\x84\xcd" +
	"QT1(\x92qt\xe5\xcf}F\xb2\x0f\xa8H\xc5" +
	"\x91\xe6\xec8\xbak68\"\x99M\x09\x88\xc9\x13\x11" +
	"\xc7\x04b\xb1x\xea\x17\xefd\xad\x06\xff\xb6H\xd5u" +
	"\xb6\x08{ \xe3\xd8<DC\x00!\x04`5K\x00" +
	"x%E\xae\x13\xdc\x94\xb3\xb2Ia\xdb\xc8\xdc\xa6\x8a" +
	"9\xfb\xbf\xb8<\xfbk\x00D\x06\xa5\xcc\xa1`f\xbf" +
	"\x06/{]\xc2\xb0\x8c~\x1b\xa0L\xc2\x84\xcc\xd8b" +
	"\xdbmf\xda\x91*Vz*\xfa\xcdC\x7fj\xd8\xc2" +
	"v l\x9eT\xd1\xb7\x0e\xfa^d\xb5\xcd@\x18S" +
	"\\GX\xfdi\xd3\xc8\x00@\x1c[\xc4:a:v" +
	"9\xef\x1bT\xd7\xe91\xc72\xea\x8d%\xea\xb1\xa4\x8c" +
	"B\xe6:X\xf5;\xbd\xb0\xfc\x87\xeb\x89\x8f\x93\xd4\xe7" +
	"\xcb#\xc5\x84\x86\xd4\xf2!\x8a\xbc\x8f C\xf4\xe6\x9c" +
	"\x89v\x00\x9e\xa2\xc8s\x04\x91\xe8H\x00X\x7f=\x00" +
	"\xef\xa3\xc8\x1d\x82\x8c\x12\x1d)\x804\x12\xf0\x0cE\xbe" +
	"\x95\xe0&[\xd8v:kb\xa44x\x80\x18\x81@" +
	"\xe3\x01\xb0\x06\x08\xd6\x00\xaa\xb9\\:\x85\x95@\xb0\x12" +
	"P5\xac^\x1b\xa7\x02&(b5\x10\xf9Y\xc6b" +
	"EA\xc6\x86L\xb67mN(L\xd0\x13\x93W\x12" +
	"T=\x91w\x8els\x83\xdf\xa7Bj\x1b\x82\xa9\xa5" +
	"\x1a\xd5\x14\xf9\xff\x08\x06\x1b\x8a\xac\xb4\xa8n\xa6|\xc1" +
	"\xcc\x89\x98\xd7\x80\x9b\xea?\x0b\x80\xaf\xa6\xc83%\xfd" +
	"\xd3\xf5\xa5\x9e\x14\xf5/6\xe5\xa9\x1b\xb1V\x92\xe9\xd4" +
	"?\xd7\x9d\x98\xb9\xe6\xae|\xca\x86\xd6A\xc72\x00\xf2" +
	"\xd3\xe0\x97>O\x82\xd7Q\xe4\x0b\x02\xa5\xcfo\x06\xe0" +
	"wP\xe4w\x11TM\xa3_xy\xab\x01[\x92\x99" +
	"\xb40\x1d\x8c\x86( F'\x01\xcad\x93R[^" +
	"]Di\x95(q\x8a|9A\x1f\xa4M\x82,\xa5" +
	"\xc8\x13\x04\x19\xc1\xbc@\x1d2\xf0~\x8a|\x05A5" +
	"'\x84UD\xb6\x85\xb5NXX\x05\x04\xab\x00\xd5\xbe" +
	"\xac\xed\xf8ge\x83\xef\xb9L1\x8d\x8c\xe4\x19\xf2\xa6" +
	"\xde_\xcc\xe8?\xa6\x8c5\x02aa%\xe69q\xfc" +
	"\x0a\x0b\x9a*?\xeeu\x9d\"\xe6y\xaa\x0c\xcb#L" +
	"\xb3&\x0fa\xf0\x15\xc5\xc6\x98\xa75\xd7\xa5\x00\x18x" +
	"4\xd9c\x12\x18\x0b\x8d\x17\xf5%\x870Bu\x0c\x8d" +
	"\xb3HH\xc7\xb0\xb4H{aD\x07\x09\xb2PX\xc7" +
	"\x0a\x006 \xd7H\x8e\"\x7f\x96`\xcc\xd3\\]\x97" +
	"\x16\xeb\x91\xb9;\xea\xae\xf44]\xae\xdd^p\xb4\xb7" +
	"\xce\x91\x95\xfe\"\xf9F7r]N\xd6\x12\xf918" +
	"\xde\xfa\xf3\xf6-S\xf6~W8\x8d\x09I\xc1\xf7U" +
	"\xa4D\x0fp\xdcdO\xa0W\xc2P\xbd!\x99d\xb8" +
	"\xfb\x0c3\x95\x11\x162\xf7\xe15=b\xc9\xc8\xd0\xa5" +
	"\xeb\xa7\x8f\x04\xa7/gO\xf8\x84\xf8{\xb4\x8e`L" +
	">!v\xa9\xdc\xdb\xb7\xdf\xb3{o\xcb\xb4\x8f'*" +
	"\xb7|\x9d\xfa\xcb\x02\xfe\xfd\xe3D'[D-\xf9]" +
	"}\xa35\xe8\xbf^\x93\xa1\x1b\xc9dv\xc0t\x90\xb9" +
	"G\xc7\x8e}\xba\xf4\xdc\xd8\xe8\xcd\x94*\xec\xa7\xbf\x03" +
	"\x00\x00\xff\xff\x03\xf7\xfa\xf8"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e82706a772b0927b,
		Nodes: []uint64{
			0x804fe3440f678ff3,
			0x81914daea9a63e6e,
			0x8b1d7e7251a6624c,
			0x8efe6ee8e0e56459,
			0x9315a840d2a15700,
			0x969e88e97ed79d94,
			0x9baeae5a95f57921,
			0xb2239bbcb9521b14,
			0xb52aad0122df1319,
			0xb6ead80127ea2fdd,
			0xbce33359b4dd6c02,
			0xc0c1a3f1fdbabdfd,
			0xc6398605d1d1ffd8,
			0xc65521f186b6e059,
			0xca85f2cfe432ed49,
			0xd13bb87cc9defbdd,
			0xd698fc716f499b07,
			0xea6d16891c17db82,
			0xf7531ef46740370e,
			0xffdf64593702d802,
		},
		Compressed: true,
	})
}
