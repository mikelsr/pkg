// Code generated by capnpc-go. DO NOT EDIT.

package core

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	capstore "github.com/wetware/pkg/api/capstore"
	cluster "github.com/wetware/pkg/api/cluster"
	process "github.com/wetware/pkg/api/process"
)

type Terminal capnp.Client

// Terminal_TypeID is the unique identifier for the type Terminal.
const Terminal_TypeID = 0xc0c1a3f1fdbabdfd

func (c Terminal) Login(ctx context.Context, params func(Terminal_login_Params) error) (Terminal_login_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc0c1a3f1fdbabdfd,
			MethodID:      0,
			InterfaceName: "core.capnp:Terminal",
			MethodName:    "login",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Terminal_login_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Terminal_login_Results_Future{Future: ans.Future()}, release

}

func (c Terminal) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Terminal) String() string {
	return "Terminal(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Terminal) AddRef() Terminal {
	return Terminal(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Terminal) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Terminal) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Terminal) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Terminal) DecodeFromPtr(p capnp.Ptr) Terminal {
	return Terminal(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Terminal) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Terminal) IsSame(other Terminal) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Terminal) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Terminal) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Terminal_Server is a Terminal with a local implementation.
type Terminal_Server interface {
	Login(context.Context, Terminal_login) error
}

// Terminal_NewServer creates a new Server from an implementation of Terminal_Server.
func Terminal_NewServer(s Terminal_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Terminal_Methods(nil, s), s, c)
}

// Terminal_ServerToClient creates a new Client from an implementation of Terminal_Server.
// The caller is responsible for calling Release on the returned Client.
func Terminal_ServerToClient(s Terminal_Server) Terminal {
	return Terminal(capnp.NewClient(Terminal_NewServer(s)))
}

// Terminal_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Terminal_Methods(methods []server.Method, s Terminal_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc0c1a3f1fdbabdfd,
			MethodID:      0,
			InterfaceName: "core.capnp:Terminal",
			MethodName:    "login",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Login(ctx, Terminal_login{call})
		},
	})

	return methods
}

// Terminal_login holds the state for a server call to Terminal.login.
// See server.Call for documentation.
type Terminal_login struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Terminal_login) Args() Terminal_login_Params {
	return Terminal_login_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Terminal_login) AllocResults() (Terminal_login_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(r), err
}

// Terminal_List is a list of Terminal.
type Terminal_List = capnp.CapList[Terminal]

// NewTerminal creates a new list of Terminal.
func NewTerminal_List(s *capnp.Segment, sz int32) (Terminal_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Terminal](l), err
}

type Terminal_login_Params capnp.Struct

// Terminal_login_Params_TypeID is the unique identifier for the type Terminal_login_Params.
const Terminal_login_Params_TypeID = 0xf7531ef46740370e

func NewTerminal_login_Params(s *capnp.Segment) (Terminal_login_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Params(st), err
}

func NewRootTerminal_login_Params(s *capnp.Segment) (Terminal_login_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Params(st), err
}

func ReadRootTerminal_login_Params(msg *capnp.Message) (Terminal_login_Params, error) {
	root, err := msg.Root()
	return Terminal_login_Params(root.Struct()), err
}

func (s Terminal_login_Params) String() string {
	str, _ := text.Marshal(0xf7531ef46740370e, capnp.Struct(s))
	return str
}

func (s Terminal_login_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Terminal_login_Params) DecodeFromPtr(p capnp.Ptr) Terminal_login_Params {
	return Terminal_login_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Terminal_login_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Terminal_login_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Terminal_login_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Terminal_login_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Terminal_login_Params) Account() cluster.Signer {
	p, _ := capnp.Struct(s).Ptr(0)
	return cluster.Signer(p.Interface().Client())
}

func (s Terminal_login_Params) HasAccount() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Terminal_login_Params) SetAccount(v cluster.Signer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Terminal_login_Params_List is a list of Terminal_login_Params.
type Terminal_login_Params_List = capnp.StructList[Terminal_login_Params]

// NewTerminal_login_Params creates a new list of Terminal_login_Params.
func NewTerminal_login_Params_List(s *capnp.Segment, sz int32) (Terminal_login_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Terminal_login_Params](l), err
}

// Terminal_login_Params_Future is a wrapper for a Terminal_login_Params promised by a client call.
type Terminal_login_Params_Future struct{ *capnp.Future }

func (f Terminal_login_Params_Future) Struct() (Terminal_login_Params, error) {
	p, err := f.Future.Ptr()
	return Terminal_login_Params(p.Struct()), err
}
func (p Terminal_login_Params_Future) Account() cluster.Signer {
	return cluster.Signer(p.Future.Field(0, nil).Client())
}

type Terminal_login_Results capnp.Struct

// Terminal_login_Results_TypeID is the unique identifier for the type Terminal_login_Results.
const Terminal_login_Results_TypeID = 0x9baeae5a95f57921

func NewTerminal_login_Results(s *capnp.Segment) (Terminal_login_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(st), err
}

func NewRootTerminal_login_Results(s *capnp.Segment) (Terminal_login_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(st), err
}

func ReadRootTerminal_login_Results(msg *capnp.Message) (Terminal_login_Results, error) {
	root, err := msg.Root()
	return Terminal_login_Results(root.Struct()), err
}

func (s Terminal_login_Results) String() string {
	str, _ := text.Marshal(0x9baeae5a95f57921, capnp.Struct(s))
	return str
}

func (s Terminal_login_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Terminal_login_Results) DecodeFromPtr(p capnp.Ptr) Terminal_login_Results {
	return Terminal_login_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Terminal_login_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Terminal_login_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Terminal_login_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Terminal_login_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Terminal_login_Results) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Terminal_login_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Terminal_login_Results) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Terminal_login_Results) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Terminal_login_Results_List is a list of Terminal_login_Results.
type Terminal_login_Results_List = capnp.StructList[Terminal_login_Results]

// NewTerminal_login_Results creates a new list of Terminal_login_Results.
func NewTerminal_login_Results_List(s *capnp.Segment, sz int32) (Terminal_login_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Terminal_login_Results](l), err
}

// Terminal_login_Results_Future is a wrapper for a Terminal_login_Results promised by a client call.
type Terminal_login_Results_Future struct{ *capnp.Future }

func (f Terminal_login_Results_Future) Struct() (Terminal_login_Results, error) {
	p, err := f.Future.Ptr()
	return Terminal_login_Results(p.Struct()), err
}
func (p Terminal_login_Results_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type PeerLister capnp.Client

// PeerLister_TypeID is the unique identifier for the type PeerLister.
const PeerLister_TypeID = 0x8e73ddc10aabd76d

func (c PeerLister) Peers(ctx context.Context, params func(PeerLister_peers_Params) error) (PeerLister_peers_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8e73ddc10aabd76d,
			MethodID:      0,
			InterfaceName: "core.capnp:PeerLister",
			MethodName:    "peers",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PeerLister_peers_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return PeerLister_peers_Results_Future{Future: ans.Future()}, release

}

func (c PeerLister) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c PeerLister) String() string {
	return "PeerLister(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c PeerLister) AddRef() PeerLister {
	return PeerLister(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c PeerLister) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c PeerLister) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c PeerLister) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (PeerLister) DecodeFromPtr(p capnp.Ptr) PeerLister {
	return PeerLister(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c PeerLister) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c PeerLister) IsSame(other PeerLister) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c PeerLister) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c PeerLister) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A PeerLister_Server is a PeerLister with a local implementation.
type PeerLister_Server interface {
	Peers(context.Context, PeerLister_peers) error
}

// PeerLister_NewServer creates a new Server from an implementation of PeerLister_Server.
func PeerLister_NewServer(s PeerLister_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PeerLister_Methods(nil, s), s, c)
}

// PeerLister_ServerToClient creates a new Client from an implementation of PeerLister_Server.
// The caller is responsible for calling Release on the returned Client.
func PeerLister_ServerToClient(s PeerLister_Server) PeerLister {
	return PeerLister(capnp.NewClient(PeerLister_NewServer(s)))
}

// PeerLister_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PeerLister_Methods(methods []server.Method, s PeerLister_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e73ddc10aabd76d,
			MethodID:      0,
			InterfaceName: "core.capnp:PeerLister",
			MethodName:    "peers",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Peers(ctx, PeerLister_peers{call})
		},
	})

	return methods
}

// PeerLister_peers holds the state for a server call to PeerLister.peers.
// See server.Call for documentation.
type PeerLister_peers struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PeerLister_peers) Args() PeerLister_peers_Params {
	return PeerLister_peers_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c PeerLister_peers) AllocResults() (PeerLister_peers_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PeerLister_peers_Results(r), err
}

// PeerLister_List is a list of PeerLister.
type PeerLister_List = capnp.CapList[PeerLister]

// NewPeerLister creates a new list of PeerLister.
func NewPeerLister_List(s *capnp.Segment, sz int32) (PeerLister_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PeerLister](l), err
}

type PeerLister_peers_Params capnp.Struct

// PeerLister_peers_Params_TypeID is the unique identifier for the type PeerLister_peers_Params.
const PeerLister_peers_Params_TypeID = 0x86f74fa7a21af622

func NewPeerLister_peers_Params(s *capnp.Segment) (PeerLister_peers_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PeerLister_peers_Params(st), err
}

func NewRootPeerLister_peers_Params(s *capnp.Segment) (PeerLister_peers_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PeerLister_peers_Params(st), err
}

func ReadRootPeerLister_peers_Params(msg *capnp.Message) (PeerLister_peers_Params, error) {
	root, err := msg.Root()
	return PeerLister_peers_Params(root.Struct()), err
}

func (s PeerLister_peers_Params) String() string {
	str, _ := text.Marshal(0x86f74fa7a21af622, capnp.Struct(s))
	return str
}

func (s PeerLister_peers_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PeerLister_peers_Params) DecodeFromPtr(p capnp.Ptr) PeerLister_peers_Params {
	return PeerLister_peers_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PeerLister_peers_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PeerLister_peers_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PeerLister_peers_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PeerLister_peers_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// PeerLister_peers_Params_List is a list of PeerLister_peers_Params.
type PeerLister_peers_Params_List = capnp.StructList[PeerLister_peers_Params]

// NewPeerLister_peers_Params creates a new list of PeerLister_peers_Params.
func NewPeerLister_peers_Params_List(s *capnp.Segment, sz int32) (PeerLister_peers_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[PeerLister_peers_Params](l), err
}

// PeerLister_peers_Params_Future is a wrapper for a PeerLister_peers_Params promised by a client call.
type PeerLister_peers_Params_Future struct{ *capnp.Future }

func (f PeerLister_peers_Params_Future) Struct() (PeerLister_peers_Params, error) {
	p, err := f.Future.Ptr()
	return PeerLister_peers_Params(p.Struct()), err
}

type PeerLister_peers_Results capnp.Struct

// PeerLister_peers_Results_TypeID is the unique identifier for the type PeerLister_peers_Results.
const PeerLister_peers_Results_TypeID = 0xe6dd1edc1453a4c3

func NewPeerLister_peers_Results(s *capnp.Segment) (PeerLister_peers_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PeerLister_peers_Results(st), err
}

func NewRootPeerLister_peers_Results(s *capnp.Segment) (PeerLister_peers_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PeerLister_peers_Results(st), err
}

func ReadRootPeerLister_peers_Results(msg *capnp.Message) (PeerLister_peers_Results, error) {
	root, err := msg.Root()
	return PeerLister_peers_Results(root.Struct()), err
}

func (s PeerLister_peers_Results) String() string {
	str, _ := text.Marshal(0xe6dd1edc1453a4c3, capnp.Struct(s))
	return str
}

func (s PeerLister_peers_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PeerLister_peers_Results) DecodeFromPtr(p capnp.Ptr) PeerLister_peers_Results {
	return PeerLister_peers_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PeerLister_peers_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PeerLister_peers_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PeerLister_peers_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PeerLister_peers_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PeerLister_peers_Results) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s PeerLister_peers_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PeerLister_peers_Results) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s PeerLister_peers_Results) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// PeerLister_peers_Results_List is a list of PeerLister_peers_Results.
type PeerLister_peers_Results_List = capnp.StructList[PeerLister_peers_Results]

// NewPeerLister_peers_Results creates a new list of PeerLister_peers_Results.
func NewPeerLister_peers_Results_List(s *capnp.Segment, sz int32) (PeerLister_peers_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PeerLister_peers_Results](l), err
}

// PeerLister_peers_Results_Future is a wrapper for a PeerLister_peers_Results promised by a client call.
type PeerLister_peers_Results_Future struct{ *capnp.Future }

func (f PeerLister_peers_Results_Future) Struct() (PeerLister_peers_Results, error) {
	p, err := f.Future.Ptr()
	return PeerLister_peers_Results(p.Struct()), err
}
func (p PeerLister_peers_Results_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type Session capnp.Struct
type Session_local Session

// Session_TypeID is the unique identifier for the type Session.
const Session_TypeID = 0xc65521f186b6e059

func NewSession(s *capnp.Segment) (Session, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Session(st), err
}

func NewRootSession(s *capnp.Segment) (Session, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Session(st), err
}

func ReadRootSession(msg *capnp.Message) (Session, error) {
	root, err := msg.Root()
	return Session(root.Struct()), err
}

func (s Session) String() string {
	str, _ := text.Marshal(0xc65521f186b6e059, capnp.Struct(s))
	return str
}

func (s Session) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session) DecodeFromPtr(p capnp.Ptr) Session {
	return Session(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session) Local() Session_local { return Session_local(s) }

func (s Session_local) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_local) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_local) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session_local) Peer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Session_local) HasPeer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Session_local) PeerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Session_local) SetPeer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Session_local) Server() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Session_local) SetServer(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Session_local) Host() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Session_local) HasHost() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Session_local) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Session_local) SetHost(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Session) View() cluster.View {
	p, _ := capnp.Struct(s).Ptr(2)
	return cluster.View(p.Interface().Client())
}

func (s Session) HasView() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Session) SetView(v cluster.View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

func (s Session) Exec() Executor {
	p, _ := capnp.Struct(s).Ptr(3)
	return Executor(p.Interface().Client())
}

func (s Session) HasExec() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Session) SetExec(v Executor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

func (s Session) CapStore() capstore.CapStore {
	p, _ := capnp.Struct(s).Ptr(4)
	return capstore.CapStore(p.Interface().Client())
}

func (s Session) HasCapStore() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Session) SetCapStore(v capstore.CapStore) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(4, in.ToPtr())
}

func (s Session) Extra() (Session_Extra_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return Session_Extra_List(p.List()), err
}

func (s Session) HasExtra() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Session) SetExtra(v Session_Extra_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewExtra sets the extra field to a newly
// allocated Session_Extra_List, preferring placement in s's segment.
func (s Session) NewExtra(n int32) (Session_Extra_List, error) {
	l, err := NewSession_Extra_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Session_Extra_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}

// Session_List is a list of Session.
type Session_List = capnp.StructList[Session]

// NewSession creates a new list of Session.
func NewSession_List(s *capnp.Segment, sz int32) (Session_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return capnp.StructList[Session](l), err
}

// Session_Future is a wrapper for a Session promised by a client call.
type Session_Future struct{ *capnp.Future }

func (f Session_Future) Struct() (Session, error) {
	p, err := f.Future.Ptr()
	return Session(p.Struct()), err
}
func (p Session_Future) Local() Session_local_Future { return Session_local_Future{p.Future} }

// Session_local_Future is a wrapper for a Session_local promised by a client call.
type Session_local_Future struct{ *capnp.Future }

func (f Session_local_Future) Struct() (Session_local, error) {
	p, err := f.Future.Ptr()
	return Session_local(p.Struct()), err
}
func (p Session_Future) View() cluster.View {
	return cluster.View(p.Future.Field(2, nil).Client())
}

func (p Session_Future) Exec() Executor {
	return Executor(p.Future.Field(3, nil).Client())
}

func (p Session_Future) CapStore() capstore.CapStore {
	return capstore.CapStore(p.Future.Field(4, nil).Client())
}

type Session_Extra capnp.Struct

// Session_Extra_TypeID is the unique identifier for the type Session_Extra.
const Session_Extra_TypeID = 0xb6ead80127ea2fdd

func NewSession_Extra(s *capnp.Segment) (Session_Extra, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Session_Extra(st), err
}

func NewRootSession_Extra(s *capnp.Segment) (Session_Extra, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Session_Extra(st), err
}

func ReadRootSession_Extra(msg *capnp.Message) (Session_Extra, error) {
	root, err := msg.Root()
	return Session_Extra(root.Struct()), err
}

func (s Session_Extra) String() string {
	str, _ := text.Marshal(0xb6ead80127ea2fdd, capnp.Struct(s))
	return str
}

func (s Session_Extra) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_Extra) DecodeFromPtr(p capnp.Ptr) Session_Extra {
	return Session_Extra(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_Extra) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_Extra) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_Extra) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_Extra) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session_Extra) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Session_Extra) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Session_Extra) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Session_Extra) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Session_Extra) Client() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(1)
	return p.Interface().Client()
}

func (s Session_Extra) HasClient() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Session_Extra) SetClient(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Session_Extra_List is a list of Session_Extra.
type Session_Extra_List = capnp.StructList[Session_Extra]

// NewSession_Extra creates a new list of Session_Extra.
func NewSession_Extra_List(s *capnp.Segment, sz int32) (Session_Extra_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Session_Extra](l), err
}

// Session_Extra_Future is a wrapper for a Session_Extra promised by a client call.
type Session_Extra_Future struct{ *capnp.Future }

func (f Session_Extra_Future) Struct() (Session_Extra, error) {
	p, err := f.Future.Ptr()
	return Session_Extra(p.Struct()), err
}
func (p Session_Extra_Future) Client() capnp.Client {
	return p.Future.Field(1, nil).Client()
}

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0x804fe3440f678ff3

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      0,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release

}

func (c Executor) ExecCached(ctx context.Context, params func(Executor_execCached_Params) error) (Executor_execCached_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      1,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "execCached",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_execCached_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_execCached_Results_Future{Future: ans.Future()}, release

}

func (c Executor) Ps(ctx context.Context, params func(Executor_ps_Params) error) (Executor_ps_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      2,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "ps",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_ps_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_ps_Results_Future{Future: ans.Future()}, release

}

func (c Executor) BytecodeCache(ctx context.Context, params func(Executor_bytecodeCache_Params) error) (Executor_bytecodeCache_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      3,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "bytecodeCache",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_bytecodeCache_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_bytecodeCache_Results_Future{Future: ans.Future()}, release

}

func (c Executor) DialPeer(ctx context.Context, params func(Executor_dialPeer_Params) error) (Executor_dialPeer_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      4,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "dialPeer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_dialPeer_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_dialPeer_Results_Future{Future: ans.Future()}, release

}

func (c Executor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return "Executor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error

	ExecCached(context.Context, Executor_execCached) error

	Ps(context.Context, Executor_ps) error

	BytecodeCache(context.Context, Executor_bytecodeCache) error

	DialPeer(context.Context, Executor_dialPeer) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      0,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      1,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "execCached",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExecCached(ctx, Executor_execCached{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      2,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "ps",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ps(ctx, Executor_ps{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      3,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "bytecodeCache",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.BytecodeCache(ctx, Executor_bytecodeCache{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      4,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "dialPeer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DialPeer(ctx, Executor_dialPeer{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(r), err
}

// Executor_execCached holds the state for a server call to Executor.execCached.
// See server.Call for documentation.
type Executor_execCached struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_execCached) Args() Executor_execCached_Params {
	return Executor_execCached_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_execCached) AllocResults() (Executor_execCached_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(r), err
}

// Executor_ps holds the state for a server call to Executor.ps.
// See server.Call for documentation.
type Executor_ps struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_ps) Args() Executor_ps_Params {
	return Executor_ps_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_ps) AllocResults() (Executor_ps_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_ps_Results(r), err
}

// Executor_bytecodeCache holds the state for a server call to Executor.bytecodeCache.
// See server.Call for documentation.
type Executor_bytecodeCache struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_bytecodeCache) Args() Executor_bytecodeCache_Params {
	return Executor_bytecodeCache_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_bytecodeCache) AllocResults() (Executor_bytecodeCache_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_bytecodeCache_Results(r), err
}

// Executor_dialPeer holds the state for a server call to Executor.dialPeer.
// See server.Call for documentation.
type Executor_dialPeer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_dialPeer) Args() Executor_dialPeer_Params {
	return Executor_dialPeer_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_dialPeer) AllocResults() (Executor_dialPeer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_dialPeer_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_exec_Params capnp.Struct

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0x969e88e97ed79d94

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_exec_Params(st), err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_exec_Params(st), err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params(root.Struct()), err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0x969e88e97ed79d94, capnp.Struct(s))
	return str
}

func (s Executor_exec_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Params) DecodeFromPtr(p capnp.Ptr) Executor_exec_Params {
	return Executor_exec_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Params) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Executor_exec_Params) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Params) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Executor_exec_Params) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Executor_exec_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Executor_exec_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_exec_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Executor_exec_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_exec_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_exec_Params) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Executor_exec_Params) HasArgs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Executor_exec_Params) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Executor_exec_Params) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Executor_exec_Params](l), err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (f Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Params(p.Struct()), err
}
func (p Executor_exec_Params_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type Executor_exec_Results capnp.Struct

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0xd698fc716f499b07

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results(root.Struct()), err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0xd698fc716f499b07, capnp.Struct(s))
	return str
}

func (s Executor_exec_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Results) DecodeFromPtr(p capnp.Ptr) Executor_exec_Results {
	return Executor_exec_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Results) Process() process.Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Process(p.Interface().Client())
}

func (s Executor_exec_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Results) SetProcess(v process.Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results](l), err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (f Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Results(p.Struct()), err
}
func (p Executor_exec_Results_Future) Process() process.Process {
	return process.Process(p.Future.Field(0, nil).Client())
}

type Executor_execCached_Params capnp.Struct

// Executor_execCached_Params_TypeID is the unique identifier for the type Executor_execCached_Params.
const Executor_execCached_Params_TypeID = 0xb52aad0122df1319

func NewExecutor_execCached_Params(s *capnp.Segment) (Executor_execCached_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_execCached_Params(st), err
}

func NewRootExecutor_execCached_Params(s *capnp.Segment) (Executor_execCached_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_execCached_Params(st), err
}

func ReadRootExecutor_execCached_Params(msg *capnp.Message) (Executor_execCached_Params, error) {
	root, err := msg.Root()
	return Executor_execCached_Params(root.Struct()), err
}

func (s Executor_execCached_Params) String() string {
	str, _ := text.Marshal(0xb52aad0122df1319, capnp.Struct(s))
	return str
}

func (s Executor_execCached_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execCached_Params) DecodeFromPtr(p capnp.Ptr) Executor_execCached_Params {
	return Executor_execCached_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execCached_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execCached_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execCached_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execCached_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execCached_Params) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Executor_execCached_Params) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execCached_Params) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Executor_execCached_Params) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Executor_execCached_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Executor_execCached_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_execCached_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Executor_execCached_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_execCached_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_execCached_Params) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Executor_execCached_Params) HasArgs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Executor_execCached_Params) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Executor_execCached_Params) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Executor_execCached_Params_List is a list of Executor_execCached_Params.
type Executor_execCached_Params_List = capnp.StructList[Executor_execCached_Params]

// NewExecutor_execCached_Params creates a new list of Executor_execCached_Params.
func NewExecutor_execCached_Params_List(s *capnp.Segment, sz int32) (Executor_execCached_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Executor_execCached_Params](l), err
}

// Executor_execCached_Params_Future is a wrapper for a Executor_execCached_Params promised by a client call.
type Executor_execCached_Params_Future struct{ *capnp.Future }

func (f Executor_execCached_Params_Future) Struct() (Executor_execCached_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_execCached_Params(p.Struct()), err
}
func (p Executor_execCached_Params_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type Executor_execCached_Results capnp.Struct

// Executor_execCached_Results_TypeID is the unique identifier for the type Executor_execCached_Results.
const Executor_execCached_Results_TypeID = 0x81914daea9a63e6e

func NewExecutor_execCached_Results(s *capnp.Segment) (Executor_execCached_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(st), err
}

func NewRootExecutor_execCached_Results(s *capnp.Segment) (Executor_execCached_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(st), err
}

func ReadRootExecutor_execCached_Results(msg *capnp.Message) (Executor_execCached_Results, error) {
	root, err := msg.Root()
	return Executor_execCached_Results(root.Struct()), err
}

func (s Executor_execCached_Results) String() string {
	str, _ := text.Marshal(0x81914daea9a63e6e, capnp.Struct(s))
	return str
}

func (s Executor_execCached_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execCached_Results) DecodeFromPtr(p capnp.Ptr) Executor_execCached_Results {
	return Executor_execCached_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execCached_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execCached_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execCached_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execCached_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execCached_Results) Process() process.Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Process(p.Interface().Client())
}

func (s Executor_execCached_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execCached_Results) SetProcess(v process.Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_execCached_Results_List is a list of Executor_execCached_Results.
type Executor_execCached_Results_List = capnp.StructList[Executor_execCached_Results]

// NewExecutor_execCached_Results creates a new list of Executor_execCached_Results.
func NewExecutor_execCached_Results_List(s *capnp.Segment, sz int32) (Executor_execCached_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_execCached_Results](l), err
}

// Executor_execCached_Results_Future is a wrapper for a Executor_execCached_Results promised by a client call.
type Executor_execCached_Results_Future struct{ *capnp.Future }

func (f Executor_execCached_Results_Future) Struct() (Executor_execCached_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_execCached_Results(p.Struct()), err
}
func (p Executor_execCached_Results_Future) Process() process.Process {
	return process.Process(p.Future.Field(0, nil).Client())
}

type Executor_ps_Params capnp.Struct

// Executor_ps_Params_TypeID is the unique identifier for the type Executor_ps_Params.
const Executor_ps_Params_TypeID = 0xffdf64593702d802

func NewExecutor_ps_Params(s *capnp.Segment) (Executor_ps_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_ps_Params(st), err
}

func NewRootExecutor_ps_Params(s *capnp.Segment) (Executor_ps_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_ps_Params(st), err
}

func ReadRootExecutor_ps_Params(msg *capnp.Message) (Executor_ps_Params, error) {
	root, err := msg.Root()
	return Executor_ps_Params(root.Struct()), err
}

func (s Executor_ps_Params) String() string {
	str, _ := text.Marshal(0xffdf64593702d802, capnp.Struct(s))
	return str
}

func (s Executor_ps_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_ps_Params) DecodeFromPtr(p capnp.Ptr) Executor_ps_Params {
	return Executor_ps_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_ps_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_ps_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_ps_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_ps_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Executor_ps_Params_List is a list of Executor_ps_Params.
type Executor_ps_Params_List = capnp.StructList[Executor_ps_Params]

// NewExecutor_ps_Params creates a new list of Executor_ps_Params.
func NewExecutor_ps_Params_List(s *capnp.Segment, sz int32) (Executor_ps_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Executor_ps_Params](l), err
}

// Executor_ps_Params_Future is a wrapper for a Executor_ps_Params promised by a client call.
type Executor_ps_Params_Future struct{ *capnp.Future }

func (f Executor_ps_Params_Future) Struct() (Executor_ps_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_ps_Params(p.Struct()), err
}

type Executor_ps_Results capnp.Struct

// Executor_ps_Results_TypeID is the unique identifier for the type Executor_ps_Results.
const Executor_ps_Results_TypeID = 0xd13bb87cc9defbdd

func NewExecutor_ps_Results(s *capnp.Segment) (Executor_ps_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_ps_Results(st), err
}

func NewRootExecutor_ps_Results(s *capnp.Segment) (Executor_ps_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_ps_Results(st), err
}

func ReadRootExecutor_ps_Results(msg *capnp.Message) (Executor_ps_Results, error) {
	root, err := msg.Root()
	return Executor_ps_Results(root.Struct()), err
}

func (s Executor_ps_Results) String() string {
	str, _ := text.Marshal(0xd13bb87cc9defbdd, capnp.Struct(s))
	return str
}

func (s Executor_ps_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_ps_Results) DecodeFromPtr(p capnp.Ptr) Executor_ps_Results {
	return Executor_ps_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_ps_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_ps_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_ps_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_ps_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_ps_Results) Procs() (process.Info_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return process.Info_List(p.List()), err
}

func (s Executor_ps_Results) HasProcs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_ps_Results) SetProcs(v process.Info_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewProcs sets the procs field to a newly
// allocated process.Info_List, preferring placement in s's segment.
func (s Executor_ps_Results) NewProcs(n int32) (process.Info_List, error) {
	l, err := process.NewInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return process.Info_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Executor_ps_Results_List is a list of Executor_ps_Results.
type Executor_ps_Results_List = capnp.StructList[Executor_ps_Results]

// NewExecutor_ps_Results creates a new list of Executor_ps_Results.
func NewExecutor_ps_Results_List(s *capnp.Segment, sz int32) (Executor_ps_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_ps_Results](l), err
}

// Executor_ps_Results_Future is a wrapper for a Executor_ps_Results promised by a client call.
type Executor_ps_Results_Future struct{ *capnp.Future }

func (f Executor_ps_Results_Future) Struct() (Executor_ps_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_ps_Results(p.Struct()), err
}

type Executor_bytecodeCache_Params capnp.Struct

// Executor_bytecodeCache_Params_TypeID is the unique identifier for the type Executor_bytecodeCache_Params.
const Executor_bytecodeCache_Params_TypeID = 0x8b1d7e7251a6624c

func NewExecutor_bytecodeCache_Params(s *capnp.Segment) (Executor_bytecodeCache_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_bytecodeCache_Params(st), err
}

func NewRootExecutor_bytecodeCache_Params(s *capnp.Segment) (Executor_bytecodeCache_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_bytecodeCache_Params(st), err
}

func ReadRootExecutor_bytecodeCache_Params(msg *capnp.Message) (Executor_bytecodeCache_Params, error) {
	root, err := msg.Root()
	return Executor_bytecodeCache_Params(root.Struct()), err
}

func (s Executor_bytecodeCache_Params) String() string {
	str, _ := text.Marshal(0x8b1d7e7251a6624c, capnp.Struct(s))
	return str
}

func (s Executor_bytecodeCache_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_bytecodeCache_Params) DecodeFromPtr(p capnp.Ptr) Executor_bytecodeCache_Params {
	return Executor_bytecodeCache_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_bytecodeCache_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_bytecodeCache_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_bytecodeCache_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_bytecodeCache_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Executor_bytecodeCache_Params_List is a list of Executor_bytecodeCache_Params.
type Executor_bytecodeCache_Params_List = capnp.StructList[Executor_bytecodeCache_Params]

// NewExecutor_bytecodeCache_Params creates a new list of Executor_bytecodeCache_Params.
func NewExecutor_bytecodeCache_Params_List(s *capnp.Segment, sz int32) (Executor_bytecodeCache_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Executor_bytecodeCache_Params](l), err
}

// Executor_bytecodeCache_Params_Future is a wrapper for a Executor_bytecodeCache_Params promised by a client call.
type Executor_bytecodeCache_Params_Future struct{ *capnp.Future }

func (f Executor_bytecodeCache_Params_Future) Struct() (Executor_bytecodeCache_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_bytecodeCache_Params(p.Struct()), err
}

type Executor_bytecodeCache_Results capnp.Struct

// Executor_bytecodeCache_Results_TypeID is the unique identifier for the type Executor_bytecodeCache_Results.
const Executor_bytecodeCache_Results_TypeID = 0x9315a840d2a15700

func NewExecutor_bytecodeCache_Results(s *capnp.Segment) (Executor_bytecodeCache_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_bytecodeCache_Results(st), err
}

func NewRootExecutor_bytecodeCache_Results(s *capnp.Segment) (Executor_bytecodeCache_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_bytecodeCache_Results(st), err
}

func ReadRootExecutor_bytecodeCache_Results(msg *capnp.Message) (Executor_bytecodeCache_Results, error) {
	root, err := msg.Root()
	return Executor_bytecodeCache_Results(root.Struct()), err
}

func (s Executor_bytecodeCache_Results) String() string {
	str, _ := text.Marshal(0x9315a840d2a15700, capnp.Struct(s))
	return str
}

func (s Executor_bytecodeCache_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_bytecodeCache_Results) DecodeFromPtr(p capnp.Ptr) Executor_bytecodeCache_Results {
	return Executor_bytecodeCache_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_bytecodeCache_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_bytecodeCache_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_bytecodeCache_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_bytecodeCache_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_bytecodeCache_Results) Cache() process.BytecodeCache {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.BytecodeCache(p.Interface().Client())
}

func (s Executor_bytecodeCache_Results) HasCache() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_bytecodeCache_Results) SetCache(v process.BytecodeCache) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_bytecodeCache_Results_List is a list of Executor_bytecodeCache_Results.
type Executor_bytecodeCache_Results_List = capnp.StructList[Executor_bytecodeCache_Results]

// NewExecutor_bytecodeCache_Results creates a new list of Executor_bytecodeCache_Results.
func NewExecutor_bytecodeCache_Results_List(s *capnp.Segment, sz int32) (Executor_bytecodeCache_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_bytecodeCache_Results](l), err
}

// Executor_bytecodeCache_Results_Future is a wrapper for a Executor_bytecodeCache_Results promised by a client call.
type Executor_bytecodeCache_Results_Future struct{ *capnp.Future }

func (f Executor_bytecodeCache_Results_Future) Struct() (Executor_bytecodeCache_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_bytecodeCache_Results(p.Struct()), err
}
func (p Executor_bytecodeCache_Results_Future) Cache() process.BytecodeCache {
	return process.BytecodeCache(p.Future.Field(0, nil).Client())
}

type Executor_dialPeer_Params capnp.Struct

// Executor_dialPeer_Params_TypeID is the unique identifier for the type Executor_dialPeer_Params.
const Executor_dialPeer_Params_TypeID = 0xbe2475e52b796657

func NewExecutor_dialPeer_Params(s *capnp.Segment) (Executor_dialPeer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_dialPeer_Params(st), err
}

func NewRootExecutor_dialPeer_Params(s *capnp.Segment) (Executor_dialPeer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_dialPeer_Params(st), err
}

func ReadRootExecutor_dialPeer_Params(msg *capnp.Message) (Executor_dialPeer_Params, error) {
	root, err := msg.Root()
	return Executor_dialPeer_Params(root.Struct()), err
}

func (s Executor_dialPeer_Params) String() string {
	str, _ := text.Marshal(0xbe2475e52b796657, capnp.Struct(s))
	return str
}

func (s Executor_dialPeer_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_dialPeer_Params) DecodeFromPtr(p capnp.Ptr) Executor_dialPeer_Params {
	return Executor_dialPeer_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_dialPeer_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_dialPeer_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_dialPeer_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_dialPeer_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_dialPeer_Params) PeerId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Executor_dialPeer_Params) HasPeerId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_dialPeer_Params) PeerIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Executor_dialPeer_Params) SetPeerId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Executor_dialPeer_Params_List is a list of Executor_dialPeer_Params.
type Executor_dialPeer_Params_List = capnp.StructList[Executor_dialPeer_Params]

// NewExecutor_dialPeer_Params creates a new list of Executor_dialPeer_Params.
func NewExecutor_dialPeer_Params_List(s *capnp.Segment, sz int32) (Executor_dialPeer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_dialPeer_Params](l), err
}

// Executor_dialPeer_Params_Future is a wrapper for a Executor_dialPeer_Params promised by a client call.
type Executor_dialPeer_Params_Future struct{ *capnp.Future }

func (f Executor_dialPeer_Params_Future) Struct() (Executor_dialPeer_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_dialPeer_Params(p.Struct()), err
}

type Executor_dialPeer_Results capnp.Struct

// Executor_dialPeer_Results_TypeID is the unique identifier for the type Executor_dialPeer_Results.
const Executor_dialPeer_Results_TypeID = 0x9dbddd0e637e25ac

func NewExecutor_dialPeer_Results(s *capnp.Segment) (Executor_dialPeer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_dialPeer_Results(st), err
}

func NewRootExecutor_dialPeer_Results(s *capnp.Segment) (Executor_dialPeer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_dialPeer_Results(st), err
}

func ReadRootExecutor_dialPeer_Results(msg *capnp.Message) (Executor_dialPeer_Results, error) {
	root, err := msg.Root()
	return Executor_dialPeer_Results(root.Struct()), err
}

func (s Executor_dialPeer_Results) String() string {
	str, _ := text.Marshal(0x9dbddd0e637e25ac, capnp.Struct(s))
	return str
}

func (s Executor_dialPeer_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_dialPeer_Results) DecodeFromPtr(p capnp.Ptr) Executor_dialPeer_Results {
	return Executor_dialPeer_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_dialPeer_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_dialPeer_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_dialPeer_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_dialPeer_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_dialPeer_Results) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Executor_dialPeer_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_dialPeer_Results) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Executor_dialPeer_Results) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Executor_dialPeer_Results_List is a list of Executor_dialPeer_Results.
type Executor_dialPeer_Results_List = capnp.StructList[Executor_dialPeer_Results]

// NewExecutor_dialPeer_Results creates a new list of Executor_dialPeer_Results.
func NewExecutor_dialPeer_Results_List(s *capnp.Segment, sz int32) (Executor_dialPeer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_dialPeer_Results](l), err
}

// Executor_dialPeer_Results_Future is a wrapper for a Executor_dialPeer_Results promised by a client call.
type Executor_dialPeer_Results_Future struct{ *capnp.Future }

func (f Executor_dialPeer_Results_Future) Struct() (Executor_dialPeer_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_dialPeer_Results(p.Struct()), err
}
func (p Executor_dialPeer_Results_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type ProcessInit capnp.Client

// ProcessInit_TypeID is the unique identifier for the type ProcessInit.
const ProcessInit_TypeID = 0x8efe6ee8e0e56459

func (c ProcessInit) Terminal(ctx context.Context, params func(ProcessInit_terminal_Params) error) (ProcessInit_terminal_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      0,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "terminal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ProcessInit_terminal_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProcessInit_terminal_Results_Future{Future: ans.Future()}, release

}

func (c ProcessInit) Events(ctx context.Context, params func(ProcessInit_events_Params) error) (ProcessInit_events_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      1,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "events",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ProcessInit_events_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProcessInit_events_Results_Future{Future: ans.Future()}, release

}

func (c ProcessInit) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ProcessInit) String() string {
	return "ProcessInit(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ProcessInit) AddRef() ProcessInit {
	return ProcessInit(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ProcessInit) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ProcessInit) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ProcessInit) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ProcessInit) DecodeFromPtr(p capnp.Ptr) ProcessInit {
	return ProcessInit(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ProcessInit) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ProcessInit) IsSame(other ProcessInit) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ProcessInit) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ProcessInit) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ProcessInit_Server is a ProcessInit with a local implementation.
type ProcessInit_Server interface {
	Terminal(context.Context, ProcessInit_terminal) error

	Events(context.Context, ProcessInit_events) error
}

// ProcessInit_NewServer creates a new Server from an implementation of ProcessInit_Server.
func ProcessInit_NewServer(s ProcessInit_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ProcessInit_Methods(nil, s), s, c)
}

// ProcessInit_ServerToClient creates a new Client from an implementation of ProcessInit_Server.
// The caller is responsible for calling Release on the returned Client.
func ProcessInit_ServerToClient(s ProcessInit_Server) ProcessInit {
	return ProcessInit(capnp.NewClient(ProcessInit_NewServer(s)))
}

// ProcessInit_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ProcessInit_Methods(methods []server.Method, s ProcessInit_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      0,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "terminal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Terminal(ctx, ProcessInit_terminal{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      1,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "events",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Events(ctx, ProcessInit_events{call})
		},
	})

	return methods
}

// ProcessInit_terminal holds the state for a server call to ProcessInit.terminal.
// See server.Call for documentation.
type ProcessInit_terminal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ProcessInit_terminal) Args() ProcessInit_terminal_Params {
	return ProcessInit_terminal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ProcessInit_terminal) AllocResults() (ProcessInit_terminal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_terminal_Results(r), err
}

// ProcessInit_events holds the state for a server call to ProcessInit.events.
// See server.Call for documentation.
type ProcessInit_events struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ProcessInit_events) Args() ProcessInit_events_Params {
	return ProcessInit_events_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ProcessInit_events) AllocResults() (ProcessInit_events_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_events_Results(r), err
}

// ProcessInit_List is a list of ProcessInit.
type ProcessInit_List = capnp.CapList[ProcessInit]

// NewProcessInit creates a new list of ProcessInit.
func NewProcessInit_List(s *capnp.Segment, sz int32) (ProcessInit_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ProcessInit](l), err
}

type ProcessInit_terminal_Params capnp.Struct

// ProcessInit_terminal_Params_TypeID is the unique identifier for the type ProcessInit_terminal_Params.
const ProcessInit_terminal_Params_TypeID = 0xea6d16891c17db82

func NewProcessInit_terminal_Params(s *capnp.Segment) (ProcessInit_terminal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_terminal_Params(st), err
}

func NewRootProcessInit_terminal_Params(s *capnp.Segment) (ProcessInit_terminal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_terminal_Params(st), err
}

func ReadRootProcessInit_terminal_Params(msg *capnp.Message) (ProcessInit_terminal_Params, error) {
	root, err := msg.Root()
	return ProcessInit_terminal_Params(root.Struct()), err
}

func (s ProcessInit_terminal_Params) String() string {
	str, _ := text.Marshal(0xea6d16891c17db82, capnp.Struct(s))
	return str
}

func (s ProcessInit_terminal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_terminal_Params) DecodeFromPtr(p capnp.Ptr) ProcessInit_terminal_Params {
	return ProcessInit_terminal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_terminal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_terminal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_terminal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_terminal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ProcessInit_terminal_Params_List is a list of ProcessInit_terminal_Params.
type ProcessInit_terminal_Params_List = capnp.StructList[ProcessInit_terminal_Params]

// NewProcessInit_terminal_Params creates a new list of ProcessInit_terminal_Params.
func NewProcessInit_terminal_Params_List(s *capnp.Segment, sz int32) (ProcessInit_terminal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ProcessInit_terminal_Params](l), err
}

// ProcessInit_terminal_Params_Future is a wrapper for a ProcessInit_terminal_Params promised by a client call.
type ProcessInit_terminal_Params_Future struct{ *capnp.Future }

func (f ProcessInit_terminal_Params_Future) Struct() (ProcessInit_terminal_Params, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_terminal_Params(p.Struct()), err
}

type ProcessInit_terminal_Results capnp.Struct

// ProcessInit_terminal_Results_TypeID is the unique identifier for the type ProcessInit_terminal_Results.
const ProcessInit_terminal_Results_TypeID = 0xb2239bbcb9521b14

func NewProcessInit_terminal_Results(s *capnp.Segment) (ProcessInit_terminal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_terminal_Results(st), err
}

func NewRootProcessInit_terminal_Results(s *capnp.Segment) (ProcessInit_terminal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_terminal_Results(st), err
}

func ReadRootProcessInit_terminal_Results(msg *capnp.Message) (ProcessInit_terminal_Results, error) {
	root, err := msg.Root()
	return ProcessInit_terminal_Results(root.Struct()), err
}

func (s ProcessInit_terminal_Results) String() string {
	str, _ := text.Marshal(0xb2239bbcb9521b14, capnp.Struct(s))
	return str
}

func (s ProcessInit_terminal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_terminal_Results) DecodeFromPtr(p capnp.Ptr) ProcessInit_terminal_Results {
	return ProcessInit_terminal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_terminal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_terminal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_terminal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_terminal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProcessInit_terminal_Results) Terminal() Terminal {
	p, _ := capnp.Struct(s).Ptr(0)
	return Terminal(p.Interface().Client())
}

func (s ProcessInit_terminal_Results) HasTerminal() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProcessInit_terminal_Results) SetTerminal(v Terminal) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ProcessInit_terminal_Results_List is a list of ProcessInit_terminal_Results.
type ProcessInit_terminal_Results_List = capnp.StructList[ProcessInit_terminal_Results]

// NewProcessInit_terminal_Results creates a new list of ProcessInit_terminal_Results.
func NewProcessInit_terminal_Results_List(s *capnp.Segment, sz int32) (ProcessInit_terminal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ProcessInit_terminal_Results](l), err
}

// ProcessInit_terminal_Results_Future is a wrapper for a ProcessInit_terminal_Results promised by a client call.
type ProcessInit_terminal_Results_Future struct{ *capnp.Future }

func (f ProcessInit_terminal_Results_Future) Struct() (ProcessInit_terminal_Results, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_terminal_Results(p.Struct()), err
}
func (p ProcessInit_terminal_Results_Future) Terminal() Terminal {
	return Terminal(p.Future.Field(0, nil).Client())
}

type ProcessInit_events_Params capnp.Struct

// ProcessInit_events_Params_TypeID is the unique identifier for the type ProcessInit_events_Params.
const ProcessInit_events_Params_TypeID = 0xca85f2cfe432ed49

func NewProcessInit_events_Params(s *capnp.Segment) (ProcessInit_events_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_events_Params(st), err
}

func NewRootProcessInit_events_Params(s *capnp.Segment) (ProcessInit_events_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_events_Params(st), err
}

func ReadRootProcessInit_events_Params(msg *capnp.Message) (ProcessInit_events_Params, error) {
	root, err := msg.Root()
	return ProcessInit_events_Params(root.Struct()), err
}

func (s ProcessInit_events_Params) String() string {
	str, _ := text.Marshal(0xca85f2cfe432ed49, capnp.Struct(s))
	return str
}

func (s ProcessInit_events_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_events_Params) DecodeFromPtr(p capnp.Ptr) ProcessInit_events_Params {
	return ProcessInit_events_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_events_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_events_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_events_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_events_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProcessInit_events_Params) Handler() process.Events {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Events(p.Interface().Client())
}

func (s ProcessInit_events_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProcessInit_events_Params) SetHandler(v process.Events) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ProcessInit_events_Params_List is a list of ProcessInit_events_Params.
type ProcessInit_events_Params_List = capnp.StructList[ProcessInit_events_Params]

// NewProcessInit_events_Params creates a new list of ProcessInit_events_Params.
func NewProcessInit_events_Params_List(s *capnp.Segment, sz int32) (ProcessInit_events_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ProcessInit_events_Params](l), err
}

// ProcessInit_events_Params_Future is a wrapper for a ProcessInit_events_Params promised by a client call.
type ProcessInit_events_Params_Future struct{ *capnp.Future }

func (f ProcessInit_events_Params_Future) Struct() (ProcessInit_events_Params, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_events_Params(p.Struct()), err
}
func (p ProcessInit_events_Params_Future) Handler() process.Events {
	return process.Events(p.Future.Field(0, nil).Client())
}

type ProcessInit_events_Results capnp.Struct

// ProcessInit_events_Results_TypeID is the unique identifier for the type ProcessInit_events_Results.
const ProcessInit_events_Results_TypeID = 0xc6398605d1d1ffd8

func NewProcessInit_events_Results(s *capnp.Segment) (ProcessInit_events_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_events_Results(st), err
}

func NewRootProcessInit_events_Results(s *capnp.Segment) (ProcessInit_events_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_events_Results(st), err
}

func ReadRootProcessInit_events_Results(msg *capnp.Message) (ProcessInit_events_Results, error) {
	root, err := msg.Root()
	return ProcessInit_events_Results(root.Struct()), err
}

func (s ProcessInit_events_Results) String() string {
	str, _ := text.Marshal(0xc6398605d1d1ffd8, capnp.Struct(s))
	return str
}

func (s ProcessInit_events_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_events_Results) DecodeFromPtr(p capnp.Ptr) ProcessInit_events_Results {
	return ProcessInit_events_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_events_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_events_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_events_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_events_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ProcessInit_events_Results_List is a list of ProcessInit_events_Results.
type ProcessInit_events_Results_List = capnp.StructList[ProcessInit_events_Results]

// NewProcessInit_events_Results creates a new list of ProcessInit_events_Results.
func NewProcessInit_events_Results_List(s *capnp.Segment, sz int32) (ProcessInit_events_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ProcessInit_events_Results](l), err
}

// ProcessInit_events_Results_Future is a wrapper for a ProcessInit_events_Results promised by a client call.
type ProcessInit_events_Results_Future struct{ *capnp.Future }

func (f ProcessInit_events_Results_Future) Struct() (ProcessInit_events_Results, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_events_Results(p.Struct()), err
}

const schema_e82706a772b0927b = "x\xda\xacVkl\x14\xd7\x15>\xe7\xce\xae\xc7\x80\xed" +
	"\xd9\xbb3\x86\x96\xd6\xac0\xa6\x14Wu\xb1]\x09\xe1" +
	"\x8a\xeeBYQ[\xb6\xd8\xb1A\xc8n+u\xd8\xbd" +
	"\xd8+\xed\x8b\x995\xd8j\x81\xb6*\x0e\x90\x97HB" +
	"\x84@D\x82\x84G\x94@\"\x14P\x82 \x8a\x85\x82" +
	"\x14~$\"Q\x02J\xb2\x81\x84G\xc0\x12\x0a8\x09" +
	"H\x09f\xa2;\xbb\xb3;\x8b_\x8a\x92_\x1e\xf9\x9e" +
	"=\xe7;\xe7\xfb\xcew\xef\x82\xbf\x95\x04\\\xf5\xe5\xfe" +
	"* \x1d+\xd1]b~\xfdd\xb7\xb4\xec\xca\x8a\xff" +
	"\x00\x9d&\x98\xffz\xeaU\xfdP\xc9\xbc\x1b\x00(o" +
	"\xa9\xd8/?^!\x024n\xabX\x8e\xf2?$\x11" +
	"\xc0L\xfc\xf9\xe0\x8bG\xdbv\xfc\x17\xa8\x82\x00n\xe4" +
	"\xc7A\xa9\x09\x01\xe56\xc9\x0fhV\xdf\x9d\xb9\xff\xd0" +
	"\x8a{\x03@\xa7#\x80\x8b\x9f\xc7\xa5\x99\x08.\xb3u" +
	"\xcdAU\xdfT\xf5h\xf6\xa7\xd6\xc9*\xa9\x85\x9f\xc4" +
	"/\xbc4u0c<1\x0a\xc2\x12\xe9\x98\xdc\xcc\xeb" +
	"\xcaAi\xb9\x1c\xb7\x10tF\xae]\xbe\x91x0:" +
	"x\x95t2\x0bR\xee\x94\x1e\x91\x8f\xf0\xaf\x07\xab\xf7" +
	"\xbd\x1f8\\\xf9\xb4\x03\xecN\xa9\x9d\x83\xddg\x81}" +
	"f\xef\x85M7\xb7>\xf7,\xa8\x0a\xf2\x08\x81G\x0c" +
	"J\x84G\xbc-}\x09h\xce\xee\xffvg\xd7\xd1\xa3" +
	"{\x9c\xfd\x1e\xf1xy\xc0q\x0fO\xf1\xf2\xdcM\xe1" +
	"\x8a\xcc\xe9\xbd\xce\x80\x0f=\xb5< c\x05(\xbfj" +
	"\x7f\xe3\xd4\x9e9\xc7\x80\xce\xc8\x07\x8cx\x96\xf2\x007" +
	"\xe5\x01\xbf\x94/U\xe3\x91\xda\xe3E \xe6\xd3\x06\x1e" +
	"QO9\x88\xcc\x1f\x86\xe6\xe1\xc5\xa1\x13@e4;" +
	"/\x9f\x18\xb83{\xd5Yp\x13\xdek\xa5\xf7\x9c<" +
	"\xdb\xcb\xbf\xaa\xbc\x1b\x00M\x12\xcb\xbc\xd6\xd9x\xe5\x14" +
	"\xa82:\x82+KD\x04\x90\xfb\xbd\xe7\x00\xe5\x8d\xde" +
	"W\x00\xcd\xd5k\xfb\x7fw\xad\xb7\xe6M'\xf2J\xb9" +
	"\x9a\x97\xad\x929\xb0\x91\xd3'G\xee<?\xf8\xd6\xa8" +
	"I/\x96\xf7\xcbA\x99\xd7\\\"/\x97\xa3\xfc\xcb\xbc" +
	"h\x9e?\xef\x1eXt6\xdb\xa6\xc5\xae*7pv" +
	"\xf3\x18\xd4i\x88\x85<\xee\x12\x9e`\x91\xbc[^\"" +
	"\xcf\x00hl\x96}\x08h6\xdfj\xb8\xfa\xde\xf0\x96" +
	"s\xceq\xa9\x8a5\xcfN\x85\xa3\xca|\xff\xd9;\xff" +
	"~\xfdO\xe7\x1d\xb0\xe5~\xe5;\xde\x96u.\xeei" +
	"N\xae\xbb\xbf\xeb\xa3\"\xc6\x94\xa9\x16cV\xc0\x99\x17" +
	":\x94Oge\xaeg\x15\x9acL\xb1\xfa\xceX\x01" +
	"\xff\xfbd\xc6\xaf\xb7M\x8f\x0f9Z\x19Q\x9ax+" +
	"\x15\x0b\x03\xdd\xdf\xcc\xea\xb8\xe7\xcc}-\x9b\xfb\x96\xf5" +
	"Sr\x91,\xec\x8c\\2\x0b\x1a\x97\xcb+\x87\xc1\x04" +
	"\x13v\x99\xe1\xa4\xce\xea\xc2Z\x0a\x13\xa9\xa6`\x1f\x0b" +
	"\xf7\x8a\xe9\xa4\x1eBT\x15\xc1\x0d\x90\x17#\xda\x1d\xd0" +
	"\x1d\xb5@\xe8\x16\x11\x0b\x1aA{\xffh\x7f\x17\x10\xba" +
	"ND\x92\xaf\x89\xf6d(\x9b\x09\x84v\x8a(\xe4w" +
	"\x0e\xc1\xde\x846\x1d\x08\x0d\x8a\xe8\xca\xf3\x8f\xb6\x84\xe9" +
	"\xa2\x16 \xb4^\x94X\x1f\x0b\x07\xd0\xe4\x7f\xfe\xa2\x85" +
	"{@`\x91\x00\x0a)#\x80\xe6\x9a\xfe4\x0b'#" +
	"\x0c|\xfc\x84\x05\xd0\x8cD\xb5X\x881\x1d\x00\x02\x18" +
	"B\xcc\xb7)\xd8m\xa6\x93z\x9d\x9d\x8bEj\xda\xfd" +
	"\xcc\xe8\x8d\xa5\x0d\xd5%\xb8\x00\\\x08@\xcb\x97\x02\xa8" +
	"\xa5\x02\xaa\x0a\xc1\xcd)=\x19f\x86\x81\xd4l,\x99" +
	"{\xf8\x83\xdbs>\x06@\xa4P\x9c\x99\x97l\x8d\x1a" +
	"i\xa6\xd7\xa5\x18\xd3\x8d\x9a\x90\xa6kB\xdc\xc8\x07\xb9" +
	"\x9c\xe5m\xd8\x16\x04+4n\x00\x141b%\xf4Y" +
	"\x199'.\x8b\x13\xdb\xcd\xd0\x16\x0d\xa5\x0d@\xa8[" +
	"\xf4YE\x8b\x1b\xb6\xb2p\xf0~\xc3hND\xd3<" +
	"M\xa9\x95\xc6V\x14\xdaf@\xeb\xf9\xa8\xe7sjm" +
	"\xc1\xa3\xbdA\xb4\xaa\x09\x08\xa5\xa2\x99fz<\x9a\xd0" +
	"b\xd6d\xfdl=K\xa4\x1f\xaa8A\x8f\xed\xd6\x90" +
	"\xb1h\xca\x0d\x85)\xfb\xc2<\x0a\xa9\x99\xc6)w\x85" +
	"\xab\xad\xd7\xc7\x9aq\x11{\xf6\xd4TO>\xa1\xc6i" +
	"\xfb\xbb\x80j\x0fA\x8ah\xd9\x17e-\x00jD@" +
	"5E\x10\x89\x82\x04\x80\xc6k\x01\xd4\x1e\x01\xd54A" +
	"*\x10\x05\x05\x00\xba\x8e\xff3&\xa0\xba\x95\xe0f\x83" +
	"\x19F4\x99@O\xc1.\x00\xd1\x03\x0e\xc5\x01`9" +
	"\x10,\x07\x94R\xa9h\x04K\x81`)\xa0\xa4\xe9\xdd" +
	"\x06V\x00\x86\x04\xc42 \xfc\xb3\xa8\x8b\x95\xb91\xd6" +
	"\xc5\x92\xdd\xd1\xc4\x98\x83q\xcao|$c\x8e\xc6\x96" +
	"?\xcf+M$\xeb\xc9\xf3\xbal\xfdd\xe5Sg\xf3" +
	"\x9f\x83l\x8035\x9fr\x99\x80\xea/\x08:\x85\x82" +
	"\xb4`\xdb\x931\x9a\xdb\xc7\x90\xcf\"vR^\xab\x01" +
	"\xd4\x7f\x0a\xa8\xc6\x0a\xbcFk\x0b\\\xe7y\xcd\x93\xfd" +
	"\xff\x89\xba\x16\xc3\xd1\xc8\x8f\xe7\x93$RM\x1d\xd9\x94" +
	"u\xc1\xbe\xb4\xae\x01d\xb7\xcc\x86>\x9f\x17\xaf\x11P" +
	"]\xe0\x80\xfe\xfb&\x00\xf5\xb7\x02\xaa\x7f$(%\xb4" +
	"8\xb3\xf2\x96\x01\xfa\xc3\xb1(K\xa4\xd1\xeb\x12\x00\xd1" +
	";N\xa1X2\xccg\xab\x96\xe5\xab\x04y\x95\x80\x80" +
	"j+A\xbbH3/\xb2L@5D\x90\x12\xcc\x0e" +
	"\xa8\x8d\x07\xfeU@u%A\x89[F\xbe\xb2\xc1\xf4" +
	"\xf5L\xc7)@p\x0a\xa0\xd4\x934\xd2\xf6\xd9$B" +
	"\x0bi\xba\xc8\xf9r\x88\xa1\xa9\xa03?\xaf\xd2\x1c\x19" +
	"\x95\x0b\xedM\x10\x13Z\xac`p\xf6\x8d\x86\xf6C'" +
	"op\xd6\xb6\x8cvt\xa7@\xb3\x96T\xd3\xce|\x96" +
	">\x8bjY\xc3\x13\x92\x09\xd5\x85\xce\x07\x0c6\xf8," +
	"\xdeT\x85\xa3G\xc7{\x85n\xe4\x851'\"V[" +
	"P\x1b%\x82\x82\xaeQrs)\xe8\xe6rk\xc9\xd9" +
	"H\x1fA\xear+X\x02@{\xb9\xd5\xa5\x04T\x1f" +
	"#\xe8\xb3\xf8\x93\xd6G\xd9\x06\xa4\xe6\xee\x9a\xfb]\x8d" +
	"\xb7\xab\xb6\xe7\xb6\xc3\xba\xeb\x90\x16^\xc1\xf6\xd2h\xa9" +
	"\x8etRg\xd9\x95:\x1b\xfcj\xfb\xc0\xb4\x03_\xe4" +
	"N}\x8c\xb7`k\xd4Sh\x0fp\x94\xfb\x8c1\xaf" +
	"\x90&\xe9\x0f\x11\xe84\x8a\x1e-\x11\x891\x1d\xa9\xb9" +
	"vM\x17[:t\xfc\xe6\xc3\x9bL\x9c\xbaH\x19c" +
	"\xde\xa8\xb6\xd7\xd7\x10\xf4\xf1\x1b\xd5(\xc0\xfd\xcd\xf6\xc5" +
	"\xfb\x0e\xf8+\xcf\x8c\x05\xb7\xd8\xf2m\xe3\x81\x9f\xf9\xae" +
	"\xe6y\xc5\x9f\xe4\x95\xc2x^\xe9\xcf^S\x13\xdd\x00" +
	"\xf6\xf5?^u-\x1cN\xf6&\xd2H\xcdS\xc3\x83" +
	"\xef.\xfb|\xf8\xced\x04\xe4,\xf4\x87\x00\x00\x00\xff" +
	"\xff\x8b\xed\x9da"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e82706a772b0927b,
		Nodes: []uint64{
			0x804fe3440f678ff3,
			0x81914daea9a63e6e,
			0x86f74fa7a21af622,
			0x8b1d7e7251a6624c,
			0x8e73ddc10aabd76d,
			0x8efe6ee8e0e56459,
			0x9315a840d2a15700,
			0x969e88e97ed79d94,
			0x9baeae5a95f57921,
			0x9dbddd0e637e25ac,
			0xb2239bbcb9521b14,
			0xb52aad0122df1319,
			0xb6ead80127ea2fdd,
			0xbce33359b4dd6c02,
			0xbe2475e52b796657,
			0xc0c1a3f1fdbabdfd,
			0xc6398605d1d1ffd8,
			0xc65521f186b6e059,
			0xca85f2cfe432ed49,
			0xd13bb87cc9defbdd,
			0xd698fc716f499b07,
			0xe6dd1edc1453a4c3,
			0xea6d16891c17db82,
			0xf7531ef46740370e,
			0xffdf64593702d802,
		},
		Compressed: true,
	})
}
