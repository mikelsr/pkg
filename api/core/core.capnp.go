// Code generated by capnpc-go. DO NOT EDIT.

package core

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	capstore "github.com/wetware/pkg/api/capstore"
	cluster "github.com/wetware/pkg/api/cluster"
	process "github.com/wetware/pkg/api/process"
)

type Terminal capnp.Client

// Terminal_TypeID is the unique identifier for the type Terminal.
const Terminal_TypeID = 0xc0c1a3f1fdbabdfd

func (c Terminal) Login(ctx context.Context, params func(Terminal_login_Params) error) (Terminal_login_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc0c1a3f1fdbabdfd,
			MethodID:      0,
			InterfaceName: "core.capnp:Terminal",
			MethodName:    "login",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Terminal_login_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Terminal_login_Results_Future{Future: ans.Future()}, release

}

func (c Terminal) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Terminal) String() string {
	return "Terminal(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Terminal) AddRef() Terminal {
	return Terminal(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Terminal) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Terminal) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Terminal) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Terminal) DecodeFromPtr(p capnp.Ptr) Terminal {
	return Terminal(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Terminal) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Terminal) IsSame(other Terminal) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Terminal) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Terminal) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Terminal_Server is a Terminal with a local implementation.
type Terminal_Server interface {
	Login(context.Context, Terminal_login) error
}

// Terminal_NewServer creates a new Server from an implementation of Terminal_Server.
func Terminal_NewServer(s Terminal_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Terminal_Methods(nil, s), s, c)
}

// Terminal_ServerToClient creates a new Client from an implementation of Terminal_Server.
// The caller is responsible for calling Release on the returned Client.
func Terminal_ServerToClient(s Terminal_Server) Terminal {
	return Terminal(capnp.NewClient(Terminal_NewServer(s)))
}

// Terminal_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Terminal_Methods(methods []server.Method, s Terminal_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc0c1a3f1fdbabdfd,
			MethodID:      0,
			InterfaceName: "core.capnp:Terminal",
			MethodName:    "login",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Login(ctx, Terminal_login{call})
		},
	})

	return methods
}

// Terminal_login holds the state for a server call to Terminal.login.
// See server.Call for documentation.
type Terminal_login struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Terminal_login) Args() Terminal_login_Params {
	return Terminal_login_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Terminal_login) AllocResults() (Terminal_login_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(r), err
}

// Terminal_List is a list of Terminal.
type Terminal_List = capnp.CapList[Terminal]

// NewTerminal creates a new list of Terminal.
func NewTerminal_List(s *capnp.Segment, sz int32) (Terminal_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Terminal](l), err
}

type Terminal_login_Params capnp.Struct

// Terminal_login_Params_TypeID is the unique identifier for the type Terminal_login_Params.
const Terminal_login_Params_TypeID = 0xf7531ef46740370e

func NewTerminal_login_Params(s *capnp.Segment) (Terminal_login_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Params(st), err
}

func NewRootTerminal_login_Params(s *capnp.Segment) (Terminal_login_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Params(st), err
}

func ReadRootTerminal_login_Params(msg *capnp.Message) (Terminal_login_Params, error) {
	root, err := msg.Root()
	return Terminal_login_Params(root.Struct()), err
}

func (s Terminal_login_Params) String() string {
	str, _ := text.Marshal(0xf7531ef46740370e, capnp.Struct(s))
	return str
}

func (s Terminal_login_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Terminal_login_Params) DecodeFromPtr(p capnp.Ptr) Terminal_login_Params {
	return Terminal_login_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Terminal_login_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Terminal_login_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Terminal_login_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Terminal_login_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Terminal_login_Params) Account() cluster.Signer {
	p, _ := capnp.Struct(s).Ptr(0)
	return cluster.Signer(p.Interface().Client())
}

func (s Terminal_login_Params) HasAccount() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Terminal_login_Params) SetAccount(v cluster.Signer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Terminal_login_Params_List is a list of Terminal_login_Params.
type Terminal_login_Params_List = capnp.StructList[Terminal_login_Params]

// NewTerminal_login_Params creates a new list of Terminal_login_Params.
func NewTerminal_login_Params_List(s *capnp.Segment, sz int32) (Terminal_login_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Terminal_login_Params](l), err
}

// Terminal_login_Params_Future is a wrapper for a Terminal_login_Params promised by a client call.
type Terminal_login_Params_Future struct{ *capnp.Future }

func (f Terminal_login_Params_Future) Struct() (Terminal_login_Params, error) {
	p, err := f.Future.Ptr()
	return Terminal_login_Params(p.Struct()), err
}
func (p Terminal_login_Params_Future) Account() cluster.Signer {
	return cluster.Signer(p.Future.Field(0, nil).Client())
}

type Terminal_login_Results capnp.Struct

// Terminal_login_Results_TypeID is the unique identifier for the type Terminal_login_Results.
const Terminal_login_Results_TypeID = 0x9baeae5a95f57921

func NewTerminal_login_Results(s *capnp.Segment) (Terminal_login_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(st), err
}

func NewRootTerminal_login_Results(s *capnp.Segment) (Terminal_login_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(st), err
}

func ReadRootTerminal_login_Results(msg *capnp.Message) (Terminal_login_Results, error) {
	root, err := msg.Root()
	return Terminal_login_Results(root.Struct()), err
}

func (s Terminal_login_Results) String() string {
	str, _ := text.Marshal(0x9baeae5a95f57921, capnp.Struct(s))
	return str
}

func (s Terminal_login_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Terminal_login_Results) DecodeFromPtr(p capnp.Ptr) Terminal_login_Results {
	return Terminal_login_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Terminal_login_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Terminal_login_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Terminal_login_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Terminal_login_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Terminal_login_Results) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Terminal_login_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Terminal_login_Results) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Terminal_login_Results) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Terminal_login_Results_List is a list of Terminal_login_Results.
type Terminal_login_Results_List = capnp.StructList[Terminal_login_Results]

// NewTerminal_login_Results creates a new list of Terminal_login_Results.
func NewTerminal_login_Results_List(s *capnp.Segment, sz int32) (Terminal_login_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Terminal_login_Results](l), err
}

// Terminal_login_Results_Future is a wrapper for a Terminal_login_Results promised by a client call.
type Terminal_login_Results_Future struct{ *capnp.Future }

func (f Terminal_login_Results_Future) Struct() (Terminal_login_Results, error) {
	p, err := f.Future.Ptr()
	return Terminal_login_Results(p.Struct()), err
}
func (p Terminal_login_Results_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type Session capnp.Struct
type Session_local Session

// Session_TypeID is the unique identifier for the type Session.
const Session_TypeID = 0xc65521f186b6e059

func NewSession(s *capnp.Segment) (Session, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Session(st), err
}

func NewRootSession(s *capnp.Segment) (Session, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Session(st), err
}

func ReadRootSession(msg *capnp.Message) (Session, error) {
	root, err := msg.Root()
	return Session(root.Struct()), err
}

func (s Session) String() string {
	str, _ := text.Marshal(0xc65521f186b6e059, capnp.Struct(s))
	return str
}

func (s Session) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session) DecodeFromPtr(p capnp.Ptr) Session {
	return Session(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session) Local() Session_local { return Session_local(s) }

func (s Session_local) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_local) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_local) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session_local) Peer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Session_local) HasPeer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Session_local) PeerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Session_local) SetPeer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Session_local) Server() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Session_local) SetServer(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Session_local) Host() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Session_local) HasHost() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Session_local) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Session_local) SetHost(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Session) View() cluster.View {
	p, _ := capnp.Struct(s).Ptr(2)
	return cluster.View(p.Interface().Client())
}

func (s Session) HasView() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Session) SetView(v cluster.View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

func (s Session) Exec() Executor {
	p, _ := capnp.Struct(s).Ptr(3)
	return Executor(p.Interface().Client())
}

func (s Session) HasExec() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Session) SetExec(v Executor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

func (s Session) CapStore() capstore.CapStore {
	p, _ := capnp.Struct(s).Ptr(4)
	return capstore.CapStore(p.Interface().Client())
}

func (s Session) HasCapStore() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Session) SetCapStore(v capstore.CapStore) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(4, in.ToPtr())
}

func (s Session) Extra() (Session_Extra_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return Session_Extra_List(p.List()), err
}

func (s Session) HasExtra() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Session) SetExtra(v Session_Extra_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewExtra sets the extra field to a newly
// allocated Session_Extra_List, preferring placement in s's segment.
func (s Session) NewExtra(n int32) (Session_Extra_List, error) {
	l, err := NewSession_Extra_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Session_Extra_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}

// Session_List is a list of Session.
type Session_List = capnp.StructList[Session]

// NewSession creates a new list of Session.
func NewSession_List(s *capnp.Segment, sz int32) (Session_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return capnp.StructList[Session](l), err
}

// Session_Future is a wrapper for a Session promised by a client call.
type Session_Future struct{ *capnp.Future }

func (f Session_Future) Struct() (Session, error) {
	p, err := f.Future.Ptr()
	return Session(p.Struct()), err
}
func (p Session_Future) Local() Session_local_Future { return Session_local_Future{p.Future} }

// Session_local_Future is a wrapper for a Session_local promised by a client call.
type Session_local_Future struct{ *capnp.Future }

func (f Session_local_Future) Struct() (Session_local, error) {
	p, err := f.Future.Ptr()
	return Session_local(p.Struct()), err
}
func (p Session_Future) View() cluster.View {
	return cluster.View(p.Future.Field(2, nil).Client())
}

func (p Session_Future) Exec() Executor {
	return Executor(p.Future.Field(3, nil).Client())
}

func (p Session_Future) CapStore() capstore.CapStore {
	return capstore.CapStore(p.Future.Field(4, nil).Client())
}

type Session_Extra capnp.Struct

// Session_Extra_TypeID is the unique identifier for the type Session_Extra.
const Session_Extra_TypeID = 0xb6ead80127ea2fdd

func NewSession_Extra(s *capnp.Segment) (Session_Extra, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Session_Extra(st), err
}

func NewRootSession_Extra(s *capnp.Segment) (Session_Extra, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Session_Extra(st), err
}

func ReadRootSession_Extra(msg *capnp.Message) (Session_Extra, error) {
	root, err := msg.Root()
	return Session_Extra(root.Struct()), err
}

func (s Session_Extra) String() string {
	str, _ := text.Marshal(0xb6ead80127ea2fdd, capnp.Struct(s))
	return str
}

func (s Session_Extra) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_Extra) DecodeFromPtr(p capnp.Ptr) Session_Extra {
	return Session_Extra(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_Extra) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_Extra) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_Extra) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_Extra) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session_Extra) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Session_Extra) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Session_Extra) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Session_Extra) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Session_Extra) Client() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(1)
	return p.Interface().Client()
}

func (s Session_Extra) HasClient() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Session_Extra) SetClient(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Session_Extra_List is a list of Session_Extra.
type Session_Extra_List = capnp.StructList[Session_Extra]

// NewSession_Extra creates a new list of Session_Extra.
func NewSession_Extra_List(s *capnp.Segment, sz int32) (Session_Extra_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Session_Extra](l), err
}

// Session_Extra_Future is a wrapper for a Session_Extra promised by a client call.
type Session_Extra_Future struct{ *capnp.Future }

func (f Session_Extra_Future) Struct() (Session_Extra, error) {
	p, err := f.Future.Ptr()
	return Session_Extra(p.Struct()), err
}
func (p Session_Extra_Future) Client() capnp.Client {
	return p.Future.Field(1, nil).Client()
}

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0x804fe3440f678ff3

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      0,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release

}

func (c Executor) ExecCached(ctx context.Context, params func(Executor_execCached_Params) error) (Executor_execCached_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      1,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "execCached",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_execCached_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_execCached_Results_Future{Future: ans.Future()}, release

}

func (c Executor) Ps(ctx context.Context, params func(Executor_ps_Params) error) (Executor_ps_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      2,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "ps",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_ps_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_ps_Results_Future{Future: ans.Future()}, release

}

func (c Executor) BytecodeCache(ctx context.Context, params func(Executor_bytecodeCache_Params) error) (Executor_bytecodeCache_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      3,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "bytecodeCache",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_bytecodeCache_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_bytecodeCache_Results_Future{Future: ans.Future()}, release

}

func (c Executor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return "Executor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error

	ExecCached(context.Context, Executor_execCached) error

	Ps(context.Context, Executor_ps) error

	BytecodeCache(context.Context, Executor_bytecodeCache) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      0,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      1,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "execCached",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExecCached(ctx, Executor_execCached{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      2,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "ps",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ps(ctx, Executor_ps{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      3,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "bytecodeCache",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.BytecodeCache(ctx, Executor_bytecodeCache{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(r), err
}

// Executor_execCached holds the state for a server call to Executor.execCached.
// See server.Call for documentation.
type Executor_execCached struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_execCached) Args() Executor_execCached_Params {
	return Executor_execCached_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_execCached) AllocResults() (Executor_execCached_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(r), err
}

// Executor_ps holds the state for a server call to Executor.ps.
// See server.Call for documentation.
type Executor_ps struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_ps) Args() Executor_ps_Params {
	return Executor_ps_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_ps) AllocResults() (Executor_ps_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_ps_Results(r), err
}

// Executor_bytecodeCache holds the state for a server call to Executor.bytecodeCache.
// See server.Call for documentation.
type Executor_bytecodeCache struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_bytecodeCache) Args() Executor_bytecodeCache_Params {
	return Executor_bytecodeCache_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_bytecodeCache) AllocResults() (Executor_bytecodeCache_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_bytecodeCache_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_exec_Params capnp.Struct

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0x969e88e97ed79d94

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_exec_Params(st), err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_exec_Params(st), err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params(root.Struct()), err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0x969e88e97ed79d94, capnp.Struct(s))
	return str
}

func (s Executor_exec_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Params) DecodeFromPtr(p capnp.Ptr) Executor_exec_Params {
	return Executor_exec_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Params) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Executor_exec_Params) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Params) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Executor_exec_Params) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Executor_exec_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Executor_exec_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_exec_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Executor_exec_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_exec_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_exec_Params) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Executor_exec_Params) HasArgs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Executor_exec_Params) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Executor_exec_Params) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Executor_exec_Params](l), err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (f Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Params(p.Struct()), err
}
func (p Executor_exec_Params_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type Executor_exec_Results capnp.Struct

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0xd698fc716f499b07

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results(root.Struct()), err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0xd698fc716f499b07, capnp.Struct(s))
	return str
}

func (s Executor_exec_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Results) DecodeFromPtr(p capnp.Ptr) Executor_exec_Results {
	return Executor_exec_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Results) Process() process.Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Process(p.Interface().Client())
}

func (s Executor_exec_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Results) SetProcess(v process.Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results](l), err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (f Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Results(p.Struct()), err
}
func (p Executor_exec_Results_Future) Process() process.Process {
	return process.Process(p.Future.Field(0, nil).Client())
}

type Executor_execCached_Params capnp.Struct

// Executor_execCached_Params_TypeID is the unique identifier for the type Executor_execCached_Params.
const Executor_execCached_Params_TypeID = 0xb52aad0122df1319

func NewExecutor_execCached_Params(s *capnp.Segment) (Executor_execCached_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_execCached_Params(st), err
}

func NewRootExecutor_execCached_Params(s *capnp.Segment) (Executor_execCached_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_execCached_Params(st), err
}

func ReadRootExecutor_execCached_Params(msg *capnp.Message) (Executor_execCached_Params, error) {
	root, err := msg.Root()
	return Executor_execCached_Params(root.Struct()), err
}

func (s Executor_execCached_Params) String() string {
	str, _ := text.Marshal(0xb52aad0122df1319, capnp.Struct(s))
	return str
}

func (s Executor_execCached_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execCached_Params) DecodeFromPtr(p capnp.Ptr) Executor_execCached_Params {
	return Executor_execCached_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execCached_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execCached_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execCached_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execCached_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execCached_Params) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Executor_execCached_Params) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execCached_Params) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Executor_execCached_Params) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Executor_execCached_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Executor_execCached_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_execCached_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Executor_execCached_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_execCached_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_execCached_Params) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Executor_execCached_Params) HasArgs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Executor_execCached_Params) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Executor_execCached_Params) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Executor_execCached_Params_List is a list of Executor_execCached_Params.
type Executor_execCached_Params_List = capnp.StructList[Executor_execCached_Params]

// NewExecutor_execCached_Params creates a new list of Executor_execCached_Params.
func NewExecutor_execCached_Params_List(s *capnp.Segment, sz int32) (Executor_execCached_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Executor_execCached_Params](l), err
}

// Executor_execCached_Params_Future is a wrapper for a Executor_execCached_Params promised by a client call.
type Executor_execCached_Params_Future struct{ *capnp.Future }

func (f Executor_execCached_Params_Future) Struct() (Executor_execCached_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_execCached_Params(p.Struct()), err
}
func (p Executor_execCached_Params_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type Executor_execCached_Results capnp.Struct

// Executor_execCached_Results_TypeID is the unique identifier for the type Executor_execCached_Results.
const Executor_execCached_Results_TypeID = 0x81914daea9a63e6e

func NewExecutor_execCached_Results(s *capnp.Segment) (Executor_execCached_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(st), err
}

func NewRootExecutor_execCached_Results(s *capnp.Segment) (Executor_execCached_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(st), err
}

func ReadRootExecutor_execCached_Results(msg *capnp.Message) (Executor_execCached_Results, error) {
	root, err := msg.Root()
	return Executor_execCached_Results(root.Struct()), err
}

func (s Executor_execCached_Results) String() string {
	str, _ := text.Marshal(0x81914daea9a63e6e, capnp.Struct(s))
	return str
}

func (s Executor_execCached_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execCached_Results) DecodeFromPtr(p capnp.Ptr) Executor_execCached_Results {
	return Executor_execCached_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execCached_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execCached_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execCached_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execCached_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execCached_Results) Process() process.Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Process(p.Interface().Client())
}

func (s Executor_execCached_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execCached_Results) SetProcess(v process.Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_execCached_Results_List is a list of Executor_execCached_Results.
type Executor_execCached_Results_List = capnp.StructList[Executor_execCached_Results]

// NewExecutor_execCached_Results creates a new list of Executor_execCached_Results.
func NewExecutor_execCached_Results_List(s *capnp.Segment, sz int32) (Executor_execCached_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_execCached_Results](l), err
}

// Executor_execCached_Results_Future is a wrapper for a Executor_execCached_Results promised by a client call.
type Executor_execCached_Results_Future struct{ *capnp.Future }

func (f Executor_execCached_Results_Future) Struct() (Executor_execCached_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_execCached_Results(p.Struct()), err
}
func (p Executor_execCached_Results_Future) Process() process.Process {
	return process.Process(p.Future.Field(0, nil).Client())
}

type Executor_ps_Params capnp.Struct

// Executor_ps_Params_TypeID is the unique identifier for the type Executor_ps_Params.
const Executor_ps_Params_TypeID = 0xffdf64593702d802

func NewExecutor_ps_Params(s *capnp.Segment) (Executor_ps_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_ps_Params(st), err
}

func NewRootExecutor_ps_Params(s *capnp.Segment) (Executor_ps_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_ps_Params(st), err
}

func ReadRootExecutor_ps_Params(msg *capnp.Message) (Executor_ps_Params, error) {
	root, err := msg.Root()
	return Executor_ps_Params(root.Struct()), err
}

func (s Executor_ps_Params) String() string {
	str, _ := text.Marshal(0xffdf64593702d802, capnp.Struct(s))
	return str
}

func (s Executor_ps_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_ps_Params) DecodeFromPtr(p capnp.Ptr) Executor_ps_Params {
	return Executor_ps_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_ps_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_ps_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_ps_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_ps_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Executor_ps_Params_List is a list of Executor_ps_Params.
type Executor_ps_Params_List = capnp.StructList[Executor_ps_Params]

// NewExecutor_ps_Params creates a new list of Executor_ps_Params.
func NewExecutor_ps_Params_List(s *capnp.Segment, sz int32) (Executor_ps_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Executor_ps_Params](l), err
}

// Executor_ps_Params_Future is a wrapper for a Executor_ps_Params promised by a client call.
type Executor_ps_Params_Future struct{ *capnp.Future }

func (f Executor_ps_Params_Future) Struct() (Executor_ps_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_ps_Params(p.Struct()), err
}

type Executor_ps_Results capnp.Struct

// Executor_ps_Results_TypeID is the unique identifier for the type Executor_ps_Results.
const Executor_ps_Results_TypeID = 0xd13bb87cc9defbdd

func NewExecutor_ps_Results(s *capnp.Segment) (Executor_ps_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_ps_Results(st), err
}

func NewRootExecutor_ps_Results(s *capnp.Segment) (Executor_ps_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_ps_Results(st), err
}

func ReadRootExecutor_ps_Results(msg *capnp.Message) (Executor_ps_Results, error) {
	root, err := msg.Root()
	return Executor_ps_Results(root.Struct()), err
}

func (s Executor_ps_Results) String() string {
	str, _ := text.Marshal(0xd13bb87cc9defbdd, capnp.Struct(s))
	return str
}

func (s Executor_ps_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_ps_Results) DecodeFromPtr(p capnp.Ptr) Executor_ps_Results {
	return Executor_ps_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_ps_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_ps_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_ps_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_ps_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_ps_Results) Procs() (process.Info_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return process.Info_List(p.List()), err
}

func (s Executor_ps_Results) HasProcs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_ps_Results) SetProcs(v process.Info_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewProcs sets the procs field to a newly
// allocated process.Info_List, preferring placement in s's segment.
func (s Executor_ps_Results) NewProcs(n int32) (process.Info_List, error) {
	l, err := process.NewInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return process.Info_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Executor_ps_Results_List is a list of Executor_ps_Results.
type Executor_ps_Results_List = capnp.StructList[Executor_ps_Results]

// NewExecutor_ps_Results creates a new list of Executor_ps_Results.
func NewExecutor_ps_Results_List(s *capnp.Segment, sz int32) (Executor_ps_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_ps_Results](l), err
}

// Executor_ps_Results_Future is a wrapper for a Executor_ps_Results promised by a client call.
type Executor_ps_Results_Future struct{ *capnp.Future }

func (f Executor_ps_Results_Future) Struct() (Executor_ps_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_ps_Results(p.Struct()), err
}

type Executor_bytecodeCache_Params capnp.Struct

// Executor_bytecodeCache_Params_TypeID is the unique identifier for the type Executor_bytecodeCache_Params.
const Executor_bytecodeCache_Params_TypeID = 0x8b1d7e7251a6624c

func NewExecutor_bytecodeCache_Params(s *capnp.Segment) (Executor_bytecodeCache_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_bytecodeCache_Params(st), err
}

func NewRootExecutor_bytecodeCache_Params(s *capnp.Segment) (Executor_bytecodeCache_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_bytecodeCache_Params(st), err
}

func ReadRootExecutor_bytecodeCache_Params(msg *capnp.Message) (Executor_bytecodeCache_Params, error) {
	root, err := msg.Root()
	return Executor_bytecodeCache_Params(root.Struct()), err
}

func (s Executor_bytecodeCache_Params) String() string {
	str, _ := text.Marshal(0x8b1d7e7251a6624c, capnp.Struct(s))
	return str
}

func (s Executor_bytecodeCache_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_bytecodeCache_Params) DecodeFromPtr(p capnp.Ptr) Executor_bytecodeCache_Params {
	return Executor_bytecodeCache_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_bytecodeCache_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_bytecodeCache_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_bytecodeCache_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_bytecodeCache_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Executor_bytecodeCache_Params_List is a list of Executor_bytecodeCache_Params.
type Executor_bytecodeCache_Params_List = capnp.StructList[Executor_bytecodeCache_Params]

// NewExecutor_bytecodeCache_Params creates a new list of Executor_bytecodeCache_Params.
func NewExecutor_bytecodeCache_Params_List(s *capnp.Segment, sz int32) (Executor_bytecodeCache_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Executor_bytecodeCache_Params](l), err
}

// Executor_bytecodeCache_Params_Future is a wrapper for a Executor_bytecodeCache_Params promised by a client call.
type Executor_bytecodeCache_Params_Future struct{ *capnp.Future }

func (f Executor_bytecodeCache_Params_Future) Struct() (Executor_bytecodeCache_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_bytecodeCache_Params(p.Struct()), err
}

type Executor_bytecodeCache_Results capnp.Struct

// Executor_bytecodeCache_Results_TypeID is the unique identifier for the type Executor_bytecodeCache_Results.
const Executor_bytecodeCache_Results_TypeID = 0x9315a840d2a15700

func NewExecutor_bytecodeCache_Results(s *capnp.Segment) (Executor_bytecodeCache_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_bytecodeCache_Results(st), err
}

func NewRootExecutor_bytecodeCache_Results(s *capnp.Segment) (Executor_bytecodeCache_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_bytecodeCache_Results(st), err
}

func ReadRootExecutor_bytecodeCache_Results(msg *capnp.Message) (Executor_bytecodeCache_Results, error) {
	root, err := msg.Root()
	return Executor_bytecodeCache_Results(root.Struct()), err
}

func (s Executor_bytecodeCache_Results) String() string {
	str, _ := text.Marshal(0x9315a840d2a15700, capnp.Struct(s))
	return str
}

func (s Executor_bytecodeCache_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_bytecodeCache_Results) DecodeFromPtr(p capnp.Ptr) Executor_bytecodeCache_Results {
	return Executor_bytecodeCache_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_bytecodeCache_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_bytecodeCache_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_bytecodeCache_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_bytecodeCache_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_bytecodeCache_Results) Cache() process.BytecodeCache {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.BytecodeCache(p.Interface().Client())
}

func (s Executor_bytecodeCache_Results) HasCache() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_bytecodeCache_Results) SetCache(v process.BytecodeCache) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_bytecodeCache_Results_List is a list of Executor_bytecodeCache_Results.
type Executor_bytecodeCache_Results_List = capnp.StructList[Executor_bytecodeCache_Results]

// NewExecutor_bytecodeCache_Results creates a new list of Executor_bytecodeCache_Results.
func NewExecutor_bytecodeCache_Results_List(s *capnp.Segment, sz int32) (Executor_bytecodeCache_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_bytecodeCache_Results](l), err
}

// Executor_bytecodeCache_Results_Future is a wrapper for a Executor_bytecodeCache_Results promised by a client call.
type Executor_bytecodeCache_Results_Future struct{ *capnp.Future }

func (f Executor_bytecodeCache_Results_Future) Struct() (Executor_bytecodeCache_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_bytecodeCache_Results(p.Struct()), err
}
func (p Executor_bytecodeCache_Results_Future) Cache() process.BytecodeCache {
	return process.BytecodeCache(p.Future.Field(0, nil).Client())
}

type ProcessInit capnp.Client

// ProcessInit_TypeID is the unique identifier for the type ProcessInit.
const ProcessInit_TypeID = 0x8efe6ee8e0e56459

func (c ProcessInit) Terminal(ctx context.Context, params func(ProcessInit_terminal_Params) error) (ProcessInit_terminal_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      0,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "terminal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ProcessInit_terminal_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProcessInit_terminal_Results_Future{Future: ans.Future()}, release

}

func (c ProcessInit) Events(ctx context.Context, params func(ProcessInit_events_Params) error) (ProcessInit_events_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      1,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "events",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ProcessInit_events_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProcessInit_events_Results_Future{Future: ans.Future()}, release

}

func (c ProcessInit) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ProcessInit) String() string {
	return "ProcessInit(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ProcessInit) AddRef() ProcessInit {
	return ProcessInit(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ProcessInit) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ProcessInit) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ProcessInit) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ProcessInit) DecodeFromPtr(p capnp.Ptr) ProcessInit {
	return ProcessInit(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ProcessInit) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ProcessInit) IsSame(other ProcessInit) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ProcessInit) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ProcessInit) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ProcessInit_Server is a ProcessInit with a local implementation.
type ProcessInit_Server interface {
	Terminal(context.Context, ProcessInit_terminal) error

	Events(context.Context, ProcessInit_events) error
}

// ProcessInit_NewServer creates a new Server from an implementation of ProcessInit_Server.
func ProcessInit_NewServer(s ProcessInit_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ProcessInit_Methods(nil, s), s, c)
}

// ProcessInit_ServerToClient creates a new Client from an implementation of ProcessInit_Server.
// The caller is responsible for calling Release on the returned Client.
func ProcessInit_ServerToClient(s ProcessInit_Server) ProcessInit {
	return ProcessInit(capnp.NewClient(ProcessInit_NewServer(s)))
}

// ProcessInit_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ProcessInit_Methods(methods []server.Method, s ProcessInit_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      0,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "terminal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Terminal(ctx, ProcessInit_terminal{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      1,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "events",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Events(ctx, ProcessInit_events{call})
		},
	})

	return methods
}

// ProcessInit_terminal holds the state for a server call to ProcessInit.terminal.
// See server.Call for documentation.
type ProcessInit_terminal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ProcessInit_terminal) Args() ProcessInit_terminal_Params {
	return ProcessInit_terminal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ProcessInit_terminal) AllocResults() (ProcessInit_terminal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_terminal_Results(r), err
}

// ProcessInit_events holds the state for a server call to ProcessInit.events.
// See server.Call for documentation.
type ProcessInit_events struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ProcessInit_events) Args() ProcessInit_events_Params {
	return ProcessInit_events_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ProcessInit_events) AllocResults() (ProcessInit_events_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_events_Results(r), err
}

// ProcessInit_List is a list of ProcessInit.
type ProcessInit_List = capnp.CapList[ProcessInit]

// NewProcessInit creates a new list of ProcessInit.
func NewProcessInit_List(s *capnp.Segment, sz int32) (ProcessInit_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ProcessInit](l), err
}

type ProcessInit_terminal_Params capnp.Struct

// ProcessInit_terminal_Params_TypeID is the unique identifier for the type ProcessInit_terminal_Params.
const ProcessInit_terminal_Params_TypeID = 0xea6d16891c17db82

func NewProcessInit_terminal_Params(s *capnp.Segment) (ProcessInit_terminal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_terminal_Params(st), err
}

func NewRootProcessInit_terminal_Params(s *capnp.Segment) (ProcessInit_terminal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_terminal_Params(st), err
}

func ReadRootProcessInit_terminal_Params(msg *capnp.Message) (ProcessInit_terminal_Params, error) {
	root, err := msg.Root()
	return ProcessInit_terminal_Params(root.Struct()), err
}

func (s ProcessInit_terminal_Params) String() string {
	str, _ := text.Marshal(0xea6d16891c17db82, capnp.Struct(s))
	return str
}

func (s ProcessInit_terminal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_terminal_Params) DecodeFromPtr(p capnp.Ptr) ProcessInit_terminal_Params {
	return ProcessInit_terminal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_terminal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_terminal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_terminal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_terminal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ProcessInit_terminal_Params_List is a list of ProcessInit_terminal_Params.
type ProcessInit_terminal_Params_List = capnp.StructList[ProcessInit_terminal_Params]

// NewProcessInit_terminal_Params creates a new list of ProcessInit_terminal_Params.
func NewProcessInit_terminal_Params_List(s *capnp.Segment, sz int32) (ProcessInit_terminal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ProcessInit_terminal_Params](l), err
}

// ProcessInit_terminal_Params_Future is a wrapper for a ProcessInit_terminal_Params promised by a client call.
type ProcessInit_terminal_Params_Future struct{ *capnp.Future }

func (f ProcessInit_terminal_Params_Future) Struct() (ProcessInit_terminal_Params, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_terminal_Params(p.Struct()), err
}

type ProcessInit_terminal_Results capnp.Struct

// ProcessInit_terminal_Results_TypeID is the unique identifier for the type ProcessInit_terminal_Results.
const ProcessInit_terminal_Results_TypeID = 0xb2239bbcb9521b14

func NewProcessInit_terminal_Results(s *capnp.Segment) (ProcessInit_terminal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_terminal_Results(st), err
}

func NewRootProcessInit_terminal_Results(s *capnp.Segment) (ProcessInit_terminal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_terminal_Results(st), err
}

func ReadRootProcessInit_terminal_Results(msg *capnp.Message) (ProcessInit_terminal_Results, error) {
	root, err := msg.Root()
	return ProcessInit_terminal_Results(root.Struct()), err
}

func (s ProcessInit_terminal_Results) String() string {
	str, _ := text.Marshal(0xb2239bbcb9521b14, capnp.Struct(s))
	return str
}

func (s ProcessInit_terminal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_terminal_Results) DecodeFromPtr(p capnp.Ptr) ProcessInit_terminal_Results {
	return ProcessInit_terminal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_terminal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_terminal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_terminal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_terminal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProcessInit_terminal_Results) Terminal() Terminal {
	p, _ := capnp.Struct(s).Ptr(0)
	return Terminal(p.Interface().Client())
}

func (s ProcessInit_terminal_Results) HasTerminal() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProcessInit_terminal_Results) SetTerminal(v Terminal) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ProcessInit_terminal_Results_List is a list of ProcessInit_terminal_Results.
type ProcessInit_terminal_Results_List = capnp.StructList[ProcessInit_terminal_Results]

// NewProcessInit_terminal_Results creates a new list of ProcessInit_terminal_Results.
func NewProcessInit_terminal_Results_List(s *capnp.Segment, sz int32) (ProcessInit_terminal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ProcessInit_terminal_Results](l), err
}

// ProcessInit_terminal_Results_Future is a wrapper for a ProcessInit_terminal_Results promised by a client call.
type ProcessInit_terminal_Results_Future struct{ *capnp.Future }

func (f ProcessInit_terminal_Results_Future) Struct() (ProcessInit_terminal_Results, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_terminal_Results(p.Struct()), err
}
func (p ProcessInit_terminal_Results_Future) Terminal() Terminal {
	return Terminal(p.Future.Field(0, nil).Client())
}

type ProcessInit_events_Params capnp.Struct

// ProcessInit_events_Params_TypeID is the unique identifier for the type ProcessInit_events_Params.
const ProcessInit_events_Params_TypeID = 0xca85f2cfe432ed49

func NewProcessInit_events_Params(s *capnp.Segment) (ProcessInit_events_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_events_Params(st), err
}

func NewRootProcessInit_events_Params(s *capnp.Segment) (ProcessInit_events_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_events_Params(st), err
}

func ReadRootProcessInit_events_Params(msg *capnp.Message) (ProcessInit_events_Params, error) {
	root, err := msg.Root()
	return ProcessInit_events_Params(root.Struct()), err
}

func (s ProcessInit_events_Params) String() string {
	str, _ := text.Marshal(0xca85f2cfe432ed49, capnp.Struct(s))
	return str
}

func (s ProcessInit_events_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_events_Params) DecodeFromPtr(p capnp.Ptr) ProcessInit_events_Params {
	return ProcessInit_events_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_events_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_events_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_events_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_events_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProcessInit_events_Params) Handler() process.Events {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Events(p.Interface().Client())
}

func (s ProcessInit_events_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProcessInit_events_Params) SetHandler(v process.Events) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ProcessInit_events_Params_List is a list of ProcessInit_events_Params.
type ProcessInit_events_Params_List = capnp.StructList[ProcessInit_events_Params]

// NewProcessInit_events_Params creates a new list of ProcessInit_events_Params.
func NewProcessInit_events_Params_List(s *capnp.Segment, sz int32) (ProcessInit_events_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ProcessInit_events_Params](l), err
}

// ProcessInit_events_Params_Future is a wrapper for a ProcessInit_events_Params promised by a client call.
type ProcessInit_events_Params_Future struct{ *capnp.Future }

func (f ProcessInit_events_Params_Future) Struct() (ProcessInit_events_Params, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_events_Params(p.Struct()), err
}
func (p ProcessInit_events_Params_Future) Handler() process.Events {
	return process.Events(p.Future.Field(0, nil).Client())
}

type ProcessInit_events_Results capnp.Struct

// ProcessInit_events_Results_TypeID is the unique identifier for the type ProcessInit_events_Results.
const ProcessInit_events_Results_TypeID = 0xc6398605d1d1ffd8

func NewProcessInit_events_Results(s *capnp.Segment) (ProcessInit_events_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_events_Results(st), err
}

func NewRootProcessInit_events_Results(s *capnp.Segment) (ProcessInit_events_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_events_Results(st), err
}

func ReadRootProcessInit_events_Results(msg *capnp.Message) (ProcessInit_events_Results, error) {
	root, err := msg.Root()
	return ProcessInit_events_Results(root.Struct()), err
}

func (s ProcessInit_events_Results) String() string {
	str, _ := text.Marshal(0xc6398605d1d1ffd8, capnp.Struct(s))
	return str
}

func (s ProcessInit_events_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_events_Results) DecodeFromPtr(p capnp.Ptr) ProcessInit_events_Results {
	return ProcessInit_events_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_events_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_events_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_events_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_events_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ProcessInit_events_Results_List is a list of ProcessInit_events_Results.
type ProcessInit_events_Results_List = capnp.StructList[ProcessInit_events_Results]

// NewProcessInit_events_Results creates a new list of ProcessInit_events_Results.
func NewProcessInit_events_Results_List(s *capnp.Segment, sz int32) (ProcessInit_events_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ProcessInit_events_Results](l), err
}

// ProcessInit_events_Results_Future is a wrapper for a ProcessInit_events_Results promised by a client call.
type ProcessInit_events_Results_Future struct{ *capnp.Future }

func (f ProcessInit_events_Results_Future) Struct() (ProcessInit_events_Results, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_events_Results(p.Struct()), err
}

const schema_e82706a772b0927b = "x\xda\x9cV\x7flTU\x16>\xdf}3\x9dvi" +
	"g\xe6\xce\x9b.\xcb.\xec\x04(\xcb\xd2\x84.\xb4\x9b" +
	"\x10\xbaa;\xb04K\x1b\x1a\xe7\xb54\xa6\x8d&\x0e" +
	"3\xd7v\x92\xe9\x9b\xe1\xbd)\x94( F\x11\xd1h" +
	"\xfc\x811\x10L\xc0\x80\xf0\x07U\x8c\x10!\x90HL" +
	"H\xe0\x0f\x0d\x9a(J\x10\x14T\xda\xc4\x08U4Q" +
	"\xe0\x99\xfbf\xde\xcc\x1b\xdaB\xf4\xafy\xc9=\xf7|" +
	"\xe7\xfb\xcew\xce\x9d\x05\xe7\xbdQ\xcf\xc2\x9aE\xd3\x89" +
	"u\xad\x80\xb7\xc2\xfa\xe1\xf9\xbe\xc0\xf2\xcb\xf7=F|" +
	"\x8ab=\xf2\xe2[\xc6\x1b\x15s\xaf\x12A\x85\x7f\x8f" +
	"Z\xe5\xf7\x115y\xfd>\xa8\x07\xe5\xa7\xa5\xffw\xdf" +
	"\x81\xe1\x8e\x176\x13\x0f\x83\xc8\x0by\xbc\xdd\xdf\x0c\x82" +
	"\xba\xcb\xdfB\xb0V\xae\xde\xa7\x19\x1bg<\x93\x0f\xf0" +
	"\xc8\xf3\x13\xfev\x90\xc7\xeaI~}\xe9\xaa~\xfb\xb9" +
	"q@\x07\xfc\xc7\xd4C2\xbbz\xd0\xff\x94\x8a\x80\x8f" +
	"\xe8\xf6\xfd\xbb?\x8a\xee\xaf}\xc9\x852\xe2\xef\x94(" +
	"7l\x94\x97w}\xbaqd\xebk\xaf\x90\x16\x86\x8c" +
	"PdDm\x80\xc9\x88i\x81o\x09\xd6\xcc\xf57\xb6" +
	"\xf7\x0e\x0f\xeft\x17\x8a`H\x06T\x05e\x8a\xf0\xdf" +
	":\x8f\x1e\xdf9\xfbm\xe2S\x8b\x01\xf3\x82\xcbd\xc0" +
	"B;`\x9azq\x16\x0e\xd6\x1f.\xc3\xe8\x0e6\xca" +
	"\x88\x07\x83\x12\xe3\xc2\xbfF\xe7\xe2\xdc\xe8\x11\xe2*\xac" +
	"\x9eKG\xb6\\\x9f\xd9}\x8a\xbcLRY\xca\xcf\xa8" +
	"\x1d\\~\xb5\xf1u\x04\x8b\xa5/\xbc\xd3\xd3t\xf98" +
	"i*\\\xc1\xb5\x15>\x10\xa9{\xf9\x19)\x04\x7f\x93" +
	"`\xdd:q\xec\xd6\xf5\xd7O\xbe7N\xa7\xa5\xa1=" +
	"j[H\xa6l\x0d\xfd_\x1d\x90_\xd69\xeb\xecY" +
	"\xef\x96\xc5\xa7\xf2,l\xb9\xbbC\x8d\xb6\xdc\x0e\x846" +
	"\x05(\xe5\xf1V\xc8\x04KB;\xd4\xd6\xd0T\xa2\xa6" +
	"\x8eP\x04\x04\xab\xed\xbb\xc6+\x1f\x8e=y\xc6\xadF" +
	"\xb7ZosU\xa5\x1a\x17~\xfd\xe2\xf4\xa3\xef\xfe\xe7" +
	"\xacKOu\x83\xfa\x0bA\xddl\x9f\xfbv\xb6e\xd6" +
	"\xdc|\xf5\x13\xb7\xde\x87\xd4?\xc9\x04G\xed\x80\xc7\xcf" +
	"O\x9d\xfe\xf4\x9f\x07F]\x95~\xa66\xcbJ\xfd\x8b" +
	"\xa2}?\xfe\xbd\xebg\xf7\xd5\x93\xf9\xab\xa7\xed\xab\xec" +
	"\x1c[\xd4\x93\xbch\x95<\xa5\x8e\xa8cd\x91E\xc3" +
	"V\"c\x88\x86D<\x0b=\xdb\xdc:$\x12\x83\xbe" +
	"\\\xc6\x88\x01ZP\xf1\x12\x15\x9d\x02\xa7@\xbe\xa6\x9e" +
	"\x18\x17>\x94:\x0c\xc7\xd5\xbc\xa7\x97\x18\xd7|`E" +
	"L8\xc4y\xeb_\x89\xf1\xc5>(E\x8f\x83\x1c\x9b" +
	"\xce7\x88\xf19\xbe\x80\x18\x12\x89(,\xf9\xf3\xbfx" +
	"\xa2\x9f\x14\x91\x8cB\xc9\x9aQX\xab\xd7\xe7D\"\x93" +
	"\x14\x14\x91'\"\x8a\x18P,^q\x8a\xcfe\x8c\x06" +
	"\xe7\xb6H\xd6u\xb6\x08s0\x9d35\x8f\xe2!\xf2" +
	"\x80\x88\xd7,#\xd2*\x15ha\x86MY#\x93\x10" +
	"\xa6\x09n5U\xcc\xd9\xff\xf1\xb5\xd9\x9f\x13\x01\x9cJ" +
	"\x99=\xee\xccN\x0dv\xf6\xbaX\xdc\x88\x0f\x98De" +
	"\x12\xc6d\xc6\x16\xd3l\xd3S9\xa9b\xa5\xad\xa2\xd3" +
	"<8S\xc3\x17\xb6\x13\xe3\xf3\xa4\x8a\x8eu\xe0x\x91" +
	"\xcfh&\xc6\xb9\xcf\xca\x09c \xa5\xc7\xd3D\x14E" +
	"\x8bX+\xf4\x9cY\xce\xfb.\xd5u\xda\xccQF\xbd" +
	"\xb1D=\x92\x90Q\xe0V\x0eU?)WV~s" +
	"'\xf1q\x92:|\xb5`1a\\j\xf9\x80\x02\xad" +
	"\x9f\x81\x03\xf6\x9cs\xd1N\xa4%\x15hY\x06\xb00" +
	"\x18\x11\x1f\xa8'\xd2\xfa\x15h9\x06\xae\xb00\x14\"" +
	"i$\xd2\xd2\x0a\xb4\xad\x0c\x9bLa\x9a\xa9\x8c\x8e`" +
	"i\xf0\x08\x08\x92\xab\xf1D\xa8!\x86\x1aB \x9bM" +
	"%QI\x0c\x95\x84@\xdc\xe83\xe1'\xc4\x14\xa0\x9a" +
	"\x98\xfc,c\xb1\xaa cC:\xd3\x97\xd2'\x14\xc6" +
	"\xed\x89\xc9+q\xab\x1e\xcb;G\xb6\xb9\xc1\xe9S!" +
	"\xb5I\xee\xd4R\x8dj\x05\xda_\x18\xdc\x0d\x05/-" +
	"\xaa{)_0s,b7\xe0\x9e\xfa\xcf\"\xd2\x1e" +
	"R\xa0\xa5K\xfa\xa7\xeaK=)\xea_l\xca\x13w" +
	"c\xedK\xa4\x92\xbf_w\xa6g\x9b\xbb\xf2)\x1bZ" +
	"\x87rF\x9c(?\x0dN\xe9\xf3$x\x9d\x02m\x81" +
	"\xab\xf4\xf9\xcdD\xda?\x15h\xfff\x08\xe8\xf1\x01a" +
	"\xe7\xad&\xb4$\xd2)\xa1\xe7\x10\xf2(\x04\x84&\x01" +
	"Jg\x12R[\xad\xba\x88\xd2*Q\xa2\x0a\xb4\x95\x0c" +
	"\x0eH\x9b\x04Y\xae@\x8b1p\x86\xbc@\x1d2p" +
	"\x85\x02m\x15C +\x84QD6\x85\xb1V\x18\xa8" +
	"\"\x86*B\xa0?c\xe6\x9c\xb3\xb2\xc1\xb7]\xe6\xd3" +
	"\xe3i\xc9\xd3cO\xbd\xb3\x98\xe1<\xa6\x9c7\x12\xe3" +
	"^_\xc4v\xe2\xf8\x15\xe66U~\xdc\xeb:E\xc4" +
	"\xf6T\x19\x96MX\xc9\xe8\x9a\x07\xeeW\x14\x8d\x11[" +
	"k-,\x05\x80\xeb\xd1\xe4\x1b$0\x0a\x8d\x17\xf5%" +
	"\x87p\xa6\x84\xe1\x19g\x11O\x18^i\x91\xf6\xc2\x88" +
	"\x0e1p\x8f7\x8c\x0a\">(\xd7HV\x81\xf6," +
	"C\xc4\xd6<\xb06%\xd6\x81[;\xean\xf66]" +
	"\x9b\xb1\xad\xe0h{\x9d\x83\x97\xfe\"9F\x8fg\xbb" +
	"r\x19C\xe4\xc7\xe0T\xeb\xf7\xdb\xb6L\xd9\xfbU\xe1" +
	"4\"$\x05\xc7W\xc1\x12=\xc2\xb8\xc9\x9e@\xafX" +
	"<`\x0f\xc9$\xc3\xdd\x1f\xd7\x93ia\x80[\x0f\xaf" +
	"\xee\x15\xcbF\x0f\x8f\xdc9}\xcc=}Ys\xc2'" +
	"\xc4\xd9\xa3u\x0c\x11\xf9\x84\x98\xa5r\xff\xb1m\xc9\xee" +
	"\xbd-\xb5\xefOTn\xf9:u\x96\x05\xfd\xf1\xc7I" +
	"\x99l\x11\xb5\xe4w\xf5\xdd\xd6\xa0\xf3zM\x86\x1eO" +
	"$2\x83z\x0e\xdc:>v\xf2\x83\xe5_\x8e]\xbf" +
	"\x97R\x85\xfd\xf4[\x00\x00\x00\xff\xff2\x96\xf9\xbd"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e82706a772b0927b,
		Nodes: []uint64{
			0x804fe3440f678ff3,
			0x81914daea9a63e6e,
			0x8b1d7e7251a6624c,
			0x8efe6ee8e0e56459,
			0x9315a840d2a15700,
			0x969e88e97ed79d94,
			0x9baeae5a95f57921,
			0xb2239bbcb9521b14,
			0xb52aad0122df1319,
			0xb6ead80127ea2fdd,
			0xbce33359b4dd6c02,
			0xc0c1a3f1fdbabdfd,
			0xc6398605d1d1ffd8,
			0xc65521f186b6e059,
			0xca85f2cfe432ed49,
			0xd13bb87cc9defbdd,
			0xd698fc716f499b07,
			0xea6d16891c17db82,
			0xf7531ef46740370e,
			0xffdf64593702d802,
		},
		Compressed: true,
	})
}
