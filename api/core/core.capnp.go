// Code generated by capnpc-go. DO NOT EDIT.

package core

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	capstore "github.com/wetware/pkg/api/capstore"
	cluster "github.com/wetware/pkg/api/cluster"
	process "github.com/wetware/pkg/api/process"
)

type Terminal capnp.Client

// Terminal_TypeID is the unique identifier for the type Terminal.
const Terminal_TypeID = 0xc0c1a3f1fdbabdfd

func (c Terminal) Login(ctx context.Context, params func(Terminal_login_Params) error) (Terminal_login_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc0c1a3f1fdbabdfd,
			MethodID:      0,
			InterfaceName: "core.capnp:Terminal",
			MethodName:    "login",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Terminal_login_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Terminal_login_Results_Future{Future: ans.Future()}, release

}

func (c Terminal) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Terminal) String() string {
	return "Terminal(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Terminal) AddRef() Terminal {
	return Terminal(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Terminal) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Terminal) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Terminal) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Terminal) DecodeFromPtr(p capnp.Ptr) Terminal {
	return Terminal(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Terminal) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Terminal) IsSame(other Terminal) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Terminal) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Terminal) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Terminal_Server is a Terminal with a local implementation.
type Terminal_Server interface {
	Login(context.Context, Terminal_login) error
}

// Terminal_NewServer creates a new Server from an implementation of Terminal_Server.
func Terminal_NewServer(s Terminal_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Terminal_Methods(nil, s), s, c)
}

// Terminal_ServerToClient creates a new Client from an implementation of Terminal_Server.
// The caller is responsible for calling Release on the returned Client.
func Terminal_ServerToClient(s Terminal_Server) Terminal {
	return Terminal(capnp.NewClient(Terminal_NewServer(s)))
}

// Terminal_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Terminal_Methods(methods []server.Method, s Terminal_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc0c1a3f1fdbabdfd,
			MethodID:      0,
			InterfaceName: "core.capnp:Terminal",
			MethodName:    "login",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Login(ctx, Terminal_login{call})
		},
	})

	return methods
}

// Terminal_login holds the state for a server call to Terminal.login.
// See server.Call for documentation.
type Terminal_login struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Terminal_login) Args() Terminal_login_Params {
	return Terminal_login_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Terminal_login) AllocResults() (Terminal_login_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(r), err
}

// Terminal_List is a list of Terminal.
type Terminal_List = capnp.CapList[Terminal]

// NewTerminal creates a new list of Terminal.
func NewTerminal_List(s *capnp.Segment, sz int32) (Terminal_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Terminal](l), err
}

type Terminal_login_Params capnp.Struct

// Terminal_login_Params_TypeID is the unique identifier for the type Terminal_login_Params.
const Terminal_login_Params_TypeID = 0xf7531ef46740370e

func NewTerminal_login_Params(s *capnp.Segment) (Terminal_login_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Params(st), err
}

func NewRootTerminal_login_Params(s *capnp.Segment) (Terminal_login_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Params(st), err
}

func ReadRootTerminal_login_Params(msg *capnp.Message) (Terminal_login_Params, error) {
	root, err := msg.Root()
	return Terminal_login_Params(root.Struct()), err
}

func (s Terminal_login_Params) String() string {
	str, _ := text.Marshal(0xf7531ef46740370e, capnp.Struct(s))
	return str
}

func (s Terminal_login_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Terminal_login_Params) DecodeFromPtr(p capnp.Ptr) Terminal_login_Params {
	return Terminal_login_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Terminal_login_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Terminal_login_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Terminal_login_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Terminal_login_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Terminal_login_Params) Account() cluster.Signer {
	p, _ := capnp.Struct(s).Ptr(0)
	return cluster.Signer(p.Interface().Client())
}

func (s Terminal_login_Params) HasAccount() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Terminal_login_Params) SetAccount(v cluster.Signer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Terminal_login_Params_List is a list of Terminal_login_Params.
type Terminal_login_Params_List = capnp.StructList[Terminal_login_Params]

// NewTerminal_login_Params creates a new list of Terminal_login_Params.
func NewTerminal_login_Params_List(s *capnp.Segment, sz int32) (Terminal_login_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Terminal_login_Params](l), err
}

// Terminal_login_Params_Future is a wrapper for a Terminal_login_Params promised by a client call.
type Terminal_login_Params_Future struct{ *capnp.Future }

func (f Terminal_login_Params_Future) Struct() (Terminal_login_Params, error) {
	p, err := f.Future.Ptr()
	return Terminal_login_Params(p.Struct()), err
}
func (p Terminal_login_Params_Future) Account() cluster.Signer {
	return cluster.Signer(p.Future.Field(0, nil).Client())
}

type Terminal_login_Results capnp.Struct

// Terminal_login_Results_TypeID is the unique identifier for the type Terminal_login_Results.
const Terminal_login_Results_TypeID = 0x9baeae5a95f57921

func NewTerminal_login_Results(s *capnp.Segment) (Terminal_login_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(st), err
}

func NewRootTerminal_login_Results(s *capnp.Segment) (Terminal_login_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Terminal_login_Results(st), err
}

func ReadRootTerminal_login_Results(msg *capnp.Message) (Terminal_login_Results, error) {
	root, err := msg.Root()
	return Terminal_login_Results(root.Struct()), err
}

func (s Terminal_login_Results) String() string {
	str, _ := text.Marshal(0x9baeae5a95f57921, capnp.Struct(s))
	return str
}

func (s Terminal_login_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Terminal_login_Results) DecodeFromPtr(p capnp.Ptr) Terminal_login_Results {
	return Terminal_login_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Terminal_login_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Terminal_login_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Terminal_login_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Terminal_login_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Terminal_login_Results) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Terminal_login_Results) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Terminal_login_Results) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Terminal_login_Results) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Terminal_login_Results_List is a list of Terminal_login_Results.
type Terminal_login_Results_List = capnp.StructList[Terminal_login_Results]

// NewTerminal_login_Results creates a new list of Terminal_login_Results.
func NewTerminal_login_Results_List(s *capnp.Segment, sz int32) (Terminal_login_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Terminal_login_Results](l), err
}

// Terminal_login_Results_Future is a wrapper for a Terminal_login_Results promised by a client call.
type Terminal_login_Results_Future struct{ *capnp.Future }

func (f Terminal_login_Results_Future) Struct() (Terminal_login_Results, error) {
	p, err := f.Future.Ptr()
	return Terminal_login_Results(p.Struct()), err
}
func (p Terminal_login_Results_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type Session capnp.Struct
type Session_local Session

// Session_TypeID is the unique identifier for the type Session.
const Session_TypeID = 0xc65521f186b6e059

func NewSession(s *capnp.Segment) (Session, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Session(st), err
}

func NewRootSession(s *capnp.Segment) (Session, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Session(st), err
}

func ReadRootSession(msg *capnp.Message) (Session, error) {
	root, err := msg.Root()
	return Session(root.Struct()), err
}

func (s Session) String() string {
	str, _ := text.Marshal(0xc65521f186b6e059, capnp.Struct(s))
	return str
}

func (s Session) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session) DecodeFromPtr(p capnp.Ptr) Session {
	return Session(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session) Local() Session_local { return Session_local(s) }

func (s Session_local) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_local) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_local) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session_local) Peer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Session_local) HasPeer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Session_local) PeerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Session_local) SetPeer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Session_local) Server() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Session_local) SetServer(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Session_local) Host() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Session_local) HasHost() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Session_local) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Session_local) SetHost(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Session) View() cluster.View {
	p, _ := capnp.Struct(s).Ptr(2)
	return cluster.View(p.Interface().Client())
}

func (s Session) HasView() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Session) SetView(v cluster.View) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

func (s Session) Exec() Executor {
	p, _ := capnp.Struct(s).Ptr(3)
	return Executor(p.Interface().Client())
}

func (s Session) HasExec() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Session) SetExec(v Executor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(3, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(3, in.ToPtr())
}

func (s Session) CapStore() capstore.CapStore {
	p, _ := capnp.Struct(s).Ptr(4)
	return capstore.CapStore(p.Interface().Client())
}

func (s Session) HasCapStore() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Session) SetCapStore(v capstore.CapStore) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(4, in.ToPtr())
}

func (s Session) Extra() (Session_Extra_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return Session_Extra_List(p.List()), err
}

func (s Session) HasExtra() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Session) SetExtra(v Session_Extra_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewExtra sets the extra field to a newly
// allocated Session_Extra_List, preferring placement in s's segment.
func (s Session) NewExtra(n int32) (Session_Extra_List, error) {
	l, err := NewSession_Extra_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Session_Extra_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}

// Session_List is a list of Session.
type Session_List = capnp.StructList[Session]

// NewSession creates a new list of Session.
func NewSession_List(s *capnp.Segment, sz int32) (Session_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return capnp.StructList[Session](l), err
}

// Session_Future is a wrapper for a Session promised by a client call.
type Session_Future struct{ *capnp.Future }

func (f Session_Future) Struct() (Session, error) {
	p, err := f.Future.Ptr()
	return Session(p.Struct()), err
}
func (p Session_Future) Local() Session_local_Future { return Session_local_Future{p.Future} }

// Session_local_Future is a wrapper for a Session_local promised by a client call.
type Session_local_Future struct{ *capnp.Future }

func (f Session_local_Future) Struct() (Session_local, error) {
	p, err := f.Future.Ptr()
	return Session_local(p.Struct()), err
}
func (p Session_Future) View() cluster.View {
	return cluster.View(p.Future.Field(2, nil).Client())
}

func (p Session_Future) Exec() Executor {
	return Executor(p.Future.Field(3, nil).Client())
}

func (p Session_Future) CapStore() capstore.CapStore {
	return capstore.CapStore(p.Future.Field(4, nil).Client())
}

type Session_Extra capnp.Struct

// Session_Extra_TypeID is the unique identifier for the type Session_Extra.
const Session_Extra_TypeID = 0xb6ead80127ea2fdd

func NewSession_Extra(s *capnp.Segment) (Session_Extra, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Session_Extra(st), err
}

func NewRootSession_Extra(s *capnp.Segment) (Session_Extra, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Session_Extra(st), err
}

func ReadRootSession_Extra(msg *capnp.Message) (Session_Extra, error) {
	root, err := msg.Root()
	return Session_Extra(root.Struct()), err
}

func (s Session_Extra) String() string {
	str, _ := text.Marshal(0xb6ead80127ea2fdd, capnp.Struct(s))
	return str
}

func (s Session_Extra) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Session_Extra) DecodeFromPtr(p capnp.Ptr) Session_Extra {
	return Session_Extra(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Session_Extra) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Session_Extra) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Session_Extra) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Session_Extra) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Session_Extra) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Session_Extra) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Session_Extra) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Session_Extra) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Session_Extra) Client() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(1)
	return p.Interface().Client()
}

func (s Session_Extra) HasClient() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Session_Extra) SetClient(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Session_Extra_List is a list of Session_Extra.
type Session_Extra_List = capnp.StructList[Session_Extra]

// NewSession_Extra creates a new list of Session_Extra.
func NewSession_Extra_List(s *capnp.Segment, sz int32) (Session_Extra_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Session_Extra](l), err
}

// Session_Extra_Future is a wrapper for a Session_Extra promised by a client call.
type Session_Extra_Future struct{ *capnp.Future }

func (f Session_Extra_Future) Struct() (Session_Extra, error) {
	p, err := f.Future.Ptr()
	return Session_Extra(p.Struct()), err
}
func (p Session_Extra_Future) Client() capnp.Client {
	return p.Future.Field(1, nil).Client()
}

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0x804fe3440f678ff3

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      0,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release

}

func (c Executor) ExecCached(ctx context.Context, params func(Executor_execCached_Params) error) (Executor_execCached_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      1,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "execCached",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_execCached_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_execCached_Results_Future{Future: ans.Future()}, release

}

func (c Executor) Ps(ctx context.Context, params func(Executor_ps_Params) error) (Executor_ps_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      2,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "ps",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_ps_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_ps_Results_Future{Future: ans.Future()}, release

}

func (c Executor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return "Executor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error

	ExecCached(context.Context, Executor_execCached) error

	Ps(context.Context, Executor_ps) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      0,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      1,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "execCached",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExecCached(ctx, Executor_execCached{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x804fe3440f678ff3,
			MethodID:      2,
			InterfaceName: "core.capnp:Executor",
			MethodName:    "ps",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ps(ctx, Executor_ps{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(r), err
}

// Executor_execCached holds the state for a server call to Executor.execCached.
// See server.Call for documentation.
type Executor_execCached struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_execCached) Args() Executor_execCached_Params {
	return Executor_execCached_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_execCached) AllocResults() (Executor_execCached_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(r), err
}

// Executor_ps holds the state for a server call to Executor.ps.
// See server.Call for documentation.
type Executor_ps struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_ps) Args() Executor_ps_Params {
	return Executor_ps_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_ps) AllocResults() (Executor_ps_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_ps_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_exec_Params capnp.Struct

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0x969e88e97ed79d94

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_exec_Params(st), err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_exec_Params(st), err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params(root.Struct()), err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0x969e88e97ed79d94, capnp.Struct(s))
	return str
}

func (s Executor_exec_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Params) DecodeFromPtr(p capnp.Ptr) Executor_exec_Params {
	return Executor_exec_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Params) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Executor_exec_Params) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Params) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Executor_exec_Params) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Executor_exec_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Executor_exec_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_exec_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Executor_exec_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_exec_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_exec_Params) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Executor_exec_Params) HasArgs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Executor_exec_Params) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Executor_exec_Params) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Executor_exec_Params](l), err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (f Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Params(p.Struct()), err
}
func (p Executor_exec_Params_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type Executor_exec_Results capnp.Struct

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0xd698fc716f499b07

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results(root.Struct()), err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0xd698fc716f499b07, capnp.Struct(s))
	return str
}

func (s Executor_exec_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Results) DecodeFromPtr(p capnp.Ptr) Executor_exec_Results {
	return Executor_exec_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Results) Process() process.Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Process(p.Interface().Client())
}

func (s Executor_exec_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Results) SetProcess(v process.Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results](l), err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (f Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Results(p.Struct()), err
}
func (p Executor_exec_Results_Future) Process() process.Process {
	return process.Process(p.Future.Field(0, nil).Client())
}

type Executor_execCached_Params capnp.Struct

// Executor_execCached_Params_TypeID is the unique identifier for the type Executor_execCached_Params.
const Executor_execCached_Params_TypeID = 0xb52aad0122df1319

func NewExecutor_execCached_Params(s *capnp.Segment) (Executor_execCached_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_execCached_Params(st), err
}

func NewRootExecutor_execCached_Params(s *capnp.Segment) (Executor_execCached_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Executor_execCached_Params(st), err
}

func ReadRootExecutor_execCached_Params(msg *capnp.Message) (Executor_execCached_Params, error) {
	root, err := msg.Root()
	return Executor_execCached_Params(root.Struct()), err
}

func (s Executor_execCached_Params) String() string {
	str, _ := text.Marshal(0xb52aad0122df1319, capnp.Struct(s))
	return str
}

func (s Executor_execCached_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execCached_Params) DecodeFromPtr(p capnp.Ptr) Executor_execCached_Params {
	return Executor_execCached_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execCached_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execCached_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execCached_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execCached_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execCached_Params) Session() (Session, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Session(p.Struct()), err
}

func (s Executor_execCached_Params) HasSession() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execCached_Params) SetSession(v Session) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSession sets the session field to a newly
// allocated Session struct, preferring placement in s's segment.
func (s Executor_execCached_Params) NewSession() (Session, error) {
	ss, err := NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Executor_execCached_Params) Cid() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Executor_execCached_Params) HasCid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_execCached_Params) SetCid(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Executor_execCached_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_execCached_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_execCached_Params) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Executor_execCached_Params) HasArgs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Executor_execCached_Params) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Executor_execCached_Params) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Executor_execCached_Params_List is a list of Executor_execCached_Params.
type Executor_execCached_Params_List = capnp.StructList[Executor_execCached_Params]

// NewExecutor_execCached_Params creates a new list of Executor_execCached_Params.
func NewExecutor_execCached_Params_List(s *capnp.Segment, sz int32) (Executor_execCached_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Executor_execCached_Params](l), err
}

// Executor_execCached_Params_Future is a wrapper for a Executor_execCached_Params promised by a client call.
type Executor_execCached_Params_Future struct{ *capnp.Future }

func (f Executor_execCached_Params_Future) Struct() (Executor_execCached_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_execCached_Params(p.Struct()), err
}
func (p Executor_execCached_Params_Future) Session() Session_Future {
	return Session_Future{Future: p.Future.Field(0, nil)}
}

type Executor_execCached_Results capnp.Struct

// Executor_execCached_Results_TypeID is the unique identifier for the type Executor_execCached_Results.
const Executor_execCached_Results_TypeID = 0x81914daea9a63e6e

func NewExecutor_execCached_Results(s *capnp.Segment) (Executor_execCached_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(st), err
}

func NewRootExecutor_execCached_Results(s *capnp.Segment) (Executor_execCached_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execCached_Results(st), err
}

func ReadRootExecutor_execCached_Results(msg *capnp.Message) (Executor_execCached_Results, error) {
	root, err := msg.Root()
	return Executor_execCached_Results(root.Struct()), err
}

func (s Executor_execCached_Results) String() string {
	str, _ := text.Marshal(0x81914daea9a63e6e, capnp.Struct(s))
	return str
}

func (s Executor_execCached_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execCached_Results) DecodeFromPtr(p capnp.Ptr) Executor_execCached_Results {
	return Executor_execCached_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execCached_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execCached_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execCached_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execCached_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execCached_Results) Process() process.Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Process(p.Interface().Client())
}

func (s Executor_execCached_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execCached_Results) SetProcess(v process.Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_execCached_Results_List is a list of Executor_execCached_Results.
type Executor_execCached_Results_List = capnp.StructList[Executor_execCached_Results]

// NewExecutor_execCached_Results creates a new list of Executor_execCached_Results.
func NewExecutor_execCached_Results_List(s *capnp.Segment, sz int32) (Executor_execCached_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_execCached_Results](l), err
}

// Executor_execCached_Results_Future is a wrapper for a Executor_execCached_Results promised by a client call.
type Executor_execCached_Results_Future struct{ *capnp.Future }

func (f Executor_execCached_Results_Future) Struct() (Executor_execCached_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_execCached_Results(p.Struct()), err
}
func (p Executor_execCached_Results_Future) Process() process.Process {
	return process.Process(p.Future.Field(0, nil).Client())
}

type Executor_ps_Params capnp.Struct

// Executor_ps_Params_TypeID is the unique identifier for the type Executor_ps_Params.
const Executor_ps_Params_TypeID = 0xffdf64593702d802

func NewExecutor_ps_Params(s *capnp.Segment) (Executor_ps_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_ps_Params(st), err
}

func NewRootExecutor_ps_Params(s *capnp.Segment) (Executor_ps_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_ps_Params(st), err
}

func ReadRootExecutor_ps_Params(msg *capnp.Message) (Executor_ps_Params, error) {
	root, err := msg.Root()
	return Executor_ps_Params(root.Struct()), err
}

func (s Executor_ps_Params) String() string {
	str, _ := text.Marshal(0xffdf64593702d802, capnp.Struct(s))
	return str
}

func (s Executor_ps_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_ps_Params) DecodeFromPtr(p capnp.Ptr) Executor_ps_Params {
	return Executor_ps_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_ps_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_ps_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_ps_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_ps_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Executor_ps_Params_List is a list of Executor_ps_Params.
type Executor_ps_Params_List = capnp.StructList[Executor_ps_Params]

// NewExecutor_ps_Params creates a new list of Executor_ps_Params.
func NewExecutor_ps_Params_List(s *capnp.Segment, sz int32) (Executor_ps_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Executor_ps_Params](l), err
}

// Executor_ps_Params_Future is a wrapper for a Executor_ps_Params promised by a client call.
type Executor_ps_Params_Future struct{ *capnp.Future }

func (f Executor_ps_Params_Future) Struct() (Executor_ps_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_ps_Params(p.Struct()), err
}

type Executor_ps_Results capnp.Struct

// Executor_ps_Results_TypeID is the unique identifier for the type Executor_ps_Results.
const Executor_ps_Results_TypeID = 0xd13bb87cc9defbdd

func NewExecutor_ps_Results(s *capnp.Segment) (Executor_ps_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_ps_Results(st), err
}

func NewRootExecutor_ps_Results(s *capnp.Segment) (Executor_ps_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_ps_Results(st), err
}

func ReadRootExecutor_ps_Results(msg *capnp.Message) (Executor_ps_Results, error) {
	root, err := msg.Root()
	return Executor_ps_Results(root.Struct()), err
}

func (s Executor_ps_Results) String() string {
	str, _ := text.Marshal(0xd13bb87cc9defbdd, capnp.Struct(s))
	return str
}

func (s Executor_ps_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_ps_Results) DecodeFromPtr(p capnp.Ptr) Executor_ps_Results {
	return Executor_ps_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_ps_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_ps_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_ps_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_ps_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_ps_Results) Procs() (process.Info_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return process.Info_List(p.List()), err
}

func (s Executor_ps_Results) HasProcs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_ps_Results) SetProcs(v process.Info_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewProcs sets the procs field to a newly
// allocated process.Info_List, preferring placement in s's segment.
func (s Executor_ps_Results) NewProcs(n int32) (process.Info_List, error) {
	l, err := process.NewInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return process.Info_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Executor_ps_Results_List is a list of Executor_ps_Results.
type Executor_ps_Results_List = capnp.StructList[Executor_ps_Results]

// NewExecutor_ps_Results creates a new list of Executor_ps_Results.
func NewExecutor_ps_Results_List(s *capnp.Segment, sz int32) (Executor_ps_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_ps_Results](l), err
}

// Executor_ps_Results_Future is a wrapper for a Executor_ps_Results promised by a client call.
type Executor_ps_Results_Future struct{ *capnp.Future }

func (f Executor_ps_Results_Future) Struct() (Executor_ps_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_ps_Results(p.Struct()), err
}

type ProcessInit capnp.Client

// ProcessInit_TypeID is the unique identifier for the type ProcessInit.
const ProcessInit_TypeID = 0x8efe6ee8e0e56459

func (c ProcessInit) Terminal(ctx context.Context, params func(ProcessInit_terminal_Params) error) (ProcessInit_terminal_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      0,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "terminal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ProcessInit_terminal_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProcessInit_terminal_Results_Future{Future: ans.Future()}, release

}

func (c ProcessInit) Events(ctx context.Context, params func(ProcessInit_events_Params) error) (ProcessInit_events_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      1,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "events",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ProcessInit_events_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProcessInit_events_Results_Future{Future: ans.Future()}, release

}

func (c ProcessInit) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ProcessInit) String() string {
	return "ProcessInit(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ProcessInit) AddRef() ProcessInit {
	return ProcessInit(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ProcessInit) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ProcessInit) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ProcessInit) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ProcessInit) DecodeFromPtr(p capnp.Ptr) ProcessInit {
	return ProcessInit(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ProcessInit) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ProcessInit) IsSame(other ProcessInit) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ProcessInit) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ProcessInit) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ProcessInit_Server is a ProcessInit with a local implementation.
type ProcessInit_Server interface {
	Terminal(context.Context, ProcessInit_terminal) error

	Events(context.Context, ProcessInit_events) error
}

// ProcessInit_NewServer creates a new Server from an implementation of ProcessInit_Server.
func ProcessInit_NewServer(s ProcessInit_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ProcessInit_Methods(nil, s), s, c)
}

// ProcessInit_ServerToClient creates a new Client from an implementation of ProcessInit_Server.
// The caller is responsible for calling Release on the returned Client.
func ProcessInit_ServerToClient(s ProcessInit_Server) ProcessInit {
	return ProcessInit(capnp.NewClient(ProcessInit_NewServer(s)))
}

// ProcessInit_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ProcessInit_Methods(methods []server.Method, s ProcessInit_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      0,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "terminal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Terminal(ctx, ProcessInit_terminal{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8efe6ee8e0e56459,
			MethodID:      1,
			InterfaceName: "core.capnp:ProcessInit",
			MethodName:    "events",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Events(ctx, ProcessInit_events{call})
		},
	})

	return methods
}

// ProcessInit_terminal holds the state for a server call to ProcessInit.terminal.
// See server.Call for documentation.
type ProcessInit_terminal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ProcessInit_terminal) Args() ProcessInit_terminal_Params {
	return ProcessInit_terminal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ProcessInit_terminal) AllocResults() (ProcessInit_terminal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_terminal_Results(r), err
}

// ProcessInit_events holds the state for a server call to ProcessInit.events.
// See server.Call for documentation.
type ProcessInit_events struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ProcessInit_events) Args() ProcessInit_events_Params {
	return ProcessInit_events_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ProcessInit_events) AllocResults() (ProcessInit_events_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_events_Results(r), err
}

// ProcessInit_List is a list of ProcessInit.
type ProcessInit_List = capnp.CapList[ProcessInit]

// NewProcessInit creates a new list of ProcessInit.
func NewProcessInit_List(s *capnp.Segment, sz int32) (ProcessInit_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ProcessInit](l), err
}

type ProcessInit_terminal_Params capnp.Struct

// ProcessInit_terminal_Params_TypeID is the unique identifier for the type ProcessInit_terminal_Params.
const ProcessInit_terminal_Params_TypeID = 0xea6d16891c17db82

func NewProcessInit_terminal_Params(s *capnp.Segment) (ProcessInit_terminal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_terminal_Params(st), err
}

func NewRootProcessInit_terminal_Params(s *capnp.Segment) (ProcessInit_terminal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_terminal_Params(st), err
}

func ReadRootProcessInit_terminal_Params(msg *capnp.Message) (ProcessInit_terminal_Params, error) {
	root, err := msg.Root()
	return ProcessInit_terminal_Params(root.Struct()), err
}

func (s ProcessInit_terminal_Params) String() string {
	str, _ := text.Marshal(0xea6d16891c17db82, capnp.Struct(s))
	return str
}

func (s ProcessInit_terminal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_terminal_Params) DecodeFromPtr(p capnp.Ptr) ProcessInit_terminal_Params {
	return ProcessInit_terminal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_terminal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_terminal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_terminal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_terminal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ProcessInit_terminal_Params_List is a list of ProcessInit_terminal_Params.
type ProcessInit_terminal_Params_List = capnp.StructList[ProcessInit_terminal_Params]

// NewProcessInit_terminal_Params creates a new list of ProcessInit_terminal_Params.
func NewProcessInit_terminal_Params_List(s *capnp.Segment, sz int32) (ProcessInit_terminal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ProcessInit_terminal_Params](l), err
}

// ProcessInit_terminal_Params_Future is a wrapper for a ProcessInit_terminal_Params promised by a client call.
type ProcessInit_terminal_Params_Future struct{ *capnp.Future }

func (f ProcessInit_terminal_Params_Future) Struct() (ProcessInit_terminal_Params, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_terminal_Params(p.Struct()), err
}

type ProcessInit_terminal_Results capnp.Struct

// ProcessInit_terminal_Results_TypeID is the unique identifier for the type ProcessInit_terminal_Results.
const ProcessInit_terminal_Results_TypeID = 0xb2239bbcb9521b14

func NewProcessInit_terminal_Results(s *capnp.Segment) (ProcessInit_terminal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_terminal_Results(st), err
}

func NewRootProcessInit_terminal_Results(s *capnp.Segment) (ProcessInit_terminal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_terminal_Results(st), err
}

func ReadRootProcessInit_terminal_Results(msg *capnp.Message) (ProcessInit_terminal_Results, error) {
	root, err := msg.Root()
	return ProcessInit_terminal_Results(root.Struct()), err
}

func (s ProcessInit_terminal_Results) String() string {
	str, _ := text.Marshal(0xb2239bbcb9521b14, capnp.Struct(s))
	return str
}

func (s ProcessInit_terminal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_terminal_Results) DecodeFromPtr(p capnp.Ptr) ProcessInit_terminal_Results {
	return ProcessInit_terminal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_terminal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_terminal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_terminal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_terminal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProcessInit_terminal_Results) Terminal() Terminal {
	p, _ := capnp.Struct(s).Ptr(0)
	return Terminal(p.Interface().Client())
}

func (s ProcessInit_terminal_Results) HasTerminal() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProcessInit_terminal_Results) SetTerminal(v Terminal) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ProcessInit_terminal_Results_List is a list of ProcessInit_terminal_Results.
type ProcessInit_terminal_Results_List = capnp.StructList[ProcessInit_terminal_Results]

// NewProcessInit_terminal_Results creates a new list of ProcessInit_terminal_Results.
func NewProcessInit_terminal_Results_List(s *capnp.Segment, sz int32) (ProcessInit_terminal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ProcessInit_terminal_Results](l), err
}

// ProcessInit_terminal_Results_Future is a wrapper for a ProcessInit_terminal_Results promised by a client call.
type ProcessInit_terminal_Results_Future struct{ *capnp.Future }

func (f ProcessInit_terminal_Results_Future) Struct() (ProcessInit_terminal_Results, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_terminal_Results(p.Struct()), err
}
func (p ProcessInit_terminal_Results_Future) Terminal() Terminal {
	return Terminal(p.Future.Field(0, nil).Client())
}

type ProcessInit_events_Params capnp.Struct

// ProcessInit_events_Params_TypeID is the unique identifier for the type ProcessInit_events_Params.
const ProcessInit_events_Params_TypeID = 0xca85f2cfe432ed49

func NewProcessInit_events_Params(s *capnp.Segment) (ProcessInit_events_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_events_Params(st), err
}

func NewRootProcessInit_events_Params(s *capnp.Segment) (ProcessInit_events_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ProcessInit_events_Params(st), err
}

func ReadRootProcessInit_events_Params(msg *capnp.Message) (ProcessInit_events_Params, error) {
	root, err := msg.Root()
	return ProcessInit_events_Params(root.Struct()), err
}

func (s ProcessInit_events_Params) String() string {
	str, _ := text.Marshal(0xca85f2cfe432ed49, capnp.Struct(s))
	return str
}

func (s ProcessInit_events_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_events_Params) DecodeFromPtr(p capnp.Ptr) ProcessInit_events_Params {
	return ProcessInit_events_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_events_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_events_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_events_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_events_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProcessInit_events_Params) Handler() process.Events {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Events(p.Interface().Client())
}

func (s ProcessInit_events_Params) HasHandler() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProcessInit_events_Params) SetHandler(v process.Events) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ProcessInit_events_Params_List is a list of ProcessInit_events_Params.
type ProcessInit_events_Params_List = capnp.StructList[ProcessInit_events_Params]

// NewProcessInit_events_Params creates a new list of ProcessInit_events_Params.
func NewProcessInit_events_Params_List(s *capnp.Segment, sz int32) (ProcessInit_events_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ProcessInit_events_Params](l), err
}

// ProcessInit_events_Params_Future is a wrapper for a ProcessInit_events_Params promised by a client call.
type ProcessInit_events_Params_Future struct{ *capnp.Future }

func (f ProcessInit_events_Params_Future) Struct() (ProcessInit_events_Params, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_events_Params(p.Struct()), err
}
func (p ProcessInit_events_Params_Future) Handler() process.Events {
	return process.Events(p.Future.Field(0, nil).Client())
}

type ProcessInit_events_Results capnp.Struct

// ProcessInit_events_Results_TypeID is the unique identifier for the type ProcessInit_events_Results.
const ProcessInit_events_Results_TypeID = 0xc6398605d1d1ffd8

func NewProcessInit_events_Results(s *capnp.Segment) (ProcessInit_events_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_events_Results(st), err
}

func NewRootProcessInit_events_Results(s *capnp.Segment) (ProcessInit_events_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ProcessInit_events_Results(st), err
}

func ReadRootProcessInit_events_Results(msg *capnp.Message) (ProcessInit_events_Results, error) {
	root, err := msg.Root()
	return ProcessInit_events_Results(root.Struct()), err
}

func (s ProcessInit_events_Results) String() string {
	str, _ := text.Marshal(0xc6398605d1d1ffd8, capnp.Struct(s))
	return str
}

func (s ProcessInit_events_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcessInit_events_Results) DecodeFromPtr(p capnp.Ptr) ProcessInit_events_Results {
	return ProcessInit_events_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcessInit_events_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcessInit_events_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcessInit_events_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcessInit_events_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ProcessInit_events_Results_List is a list of ProcessInit_events_Results.
type ProcessInit_events_Results_List = capnp.StructList[ProcessInit_events_Results]

// NewProcessInit_events_Results creates a new list of ProcessInit_events_Results.
func NewProcessInit_events_Results_List(s *capnp.Segment, sz int32) (ProcessInit_events_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ProcessInit_events_Results](l), err
}

// ProcessInit_events_Results_Future is a wrapper for a ProcessInit_events_Results promised by a client call.
type ProcessInit_events_Results_Future struct{ *capnp.Future }

func (f ProcessInit_events_Results_Future) Struct() (ProcessInit_events_Results, error) {
	p, err := f.Future.Ptr()
	return ProcessInit_events_Results(p.Struct()), err
}

const schema_e82706a772b0927b = "x\xda\x9cV\x7fl\x14U\x17\xbd\xe7\xcdn\xb7|\xdd" +
	"\xed\xf41\xcb\xd7\x8fOq\x03\xb4\"M\xa8\xb4\x95\x10" +
	"j\xb4\x15i\xb4D\xe2\xbe\x16\xfeh\xa3\x89\xcb\xee\xb3" +
	"\xddd;\xbb\xccl\xa1\xc4\x1f\x88Q\x04b4\x1a1" +
	"\x0a\xd1D\x0c*\x7f\x80?\"D\x09D\x1b\x03\x06\x12" +
	"4\xc4\xa0DSA\xd1\x08M\x88P5&\x0a\x8ey" +
	"\xb3;\xbbSJ!\xfa\x17\x1b\xe6\xce9\xf7\x9c{\xee" +
	"\x9d\xce\xaf\x0f\xb6\x07\x9a\"\x1f\xd5\x12\xeb\x8e\"X\xe1" +
	"\xfc\xf2l\x9f\xbe\xe4\xf4\xbd\x8f\x11\xaf\xd2\x9c\x87\x9e\x7f" +
	"\xc7z\xb3b\xce\x19\"\x18\x07\xab\xb6\x1bG\xabBD" +
	"\xc6\xe1\xaaO\x8d\x8ep\x88\xc81o\x7fc\xe7\xeee" +
	"\xcf\xad'\x1e\x05Q\x10!\xa2\x96y\xe1V\x10\x8c\x05" +
	"\xe16\x82\xd3\x93\xfa\xf1\xd4\x19\xf3\xafg&\xa0\xad\x08" +
	"\xef3\xeeW\x18FO\xf8)c\x97\x8b\xf6\xc2+_" +
	"=zv\xe3\xab/\x92\x88B\xc1i\x0anK\x98)" +
	"\xb8\x97\xc3?\x11\x9c\x99k\x7f\xdb\xd2\xbb{\xf76?" +
	"\xdf\xfa\xc8TU\xb0)\xa2\xf8\xa2\xd7u}\xb8\x7f\xdb" +
	"\xec\xf7\x88\xd7\x96\x0avF\x16\xab\x82w\xdd\x82\xe9\xc6" +
	"\xc9Y\xd8\xd5\xb0g\x1c\xc7\xf1H\xb3\xaa\x18\x89(\x8e" +
	"\x91\x9bG\xe7\xe0\xc4\xe8^\xe2\x06\x9c\x9eS{7\\" +
	"\x98\xb9\xe2\x10\x05\x99\xeau\xb8\xfa\x88q\xb4\xda\xf5\xa0" +
	"z\x0d\xc1a\x99\x91\xf7{ZN\xef'a\xc0W<" +
	"\xad\"\x04\"\xa3^?B0\xe6\xeao\x13\x9cK\x07" +
	"\xf6]\xba\xf0\xfa\xf0\xc7\x13\x8c\x18\xd6\xb7\x1b\x87u\x05" +
	"yP\xbf\xcb8\xa7~9'\x9cc\xc7\x82\x1b\x16\x1d" +
	"*\xa8\x08\xb8-\xea\xcd\xa0@\x99BT\x01e\x9c`" +
	"\x85\x028\xa0o5\x0e\xea\xb5D-G\xf5\x18\x08N" +
	"\xe7\xb9\xe6\x1f>\x1f{\xf2\x88\xdf\x8d\xe35\x0d\xae\xd6" +
	"\x1a\xe5\xc6\xc8\x9f\xdf\x1e~\xf8\x83[\x8f\xf9\xfc4." +
	"\xd5\xfcA0\xc0\xd5\xf3\xd0\xb6\xce\xec\xaa\x8b/}\xe9" +
	"\xf7\xbb\x89\xffG\x01,r\x0b\x1e\xff\xa6\xf6\xfaM\xff" +
	"\x1d\x18\xf5u\xda\xc3[U\xa7\xd5\x0b\xdb\xfb~\xbd\xa1" +
	"\xfbw\xff\xabw\x14^\xedt_e'\xd8\xc2\x9e\xd4" +
	"I\xa7P\xa0^5\xd2|\x8c\x1crh\x81\x93\xccZ" +
	"\xb21\x99\xc8\xc1\xcc\xb5v\x0c\xc9\xe4`(\x9f\xb5\xe2" +
	"\x80\x08kA_R\xe05\xc8E\x031\xde\x11By" +
	"\xc2\xf0\xc2\xc9\x17\xf5\x12\xe3M!\xb0\x12'<\xe1\xbc" +
	"\xfe\xff\xc4\xf8\xf4\x90.\x87d\xb2\x1d\x8e\xfa\xe7\xceD" +
	"\xb2\x9f4\x99j\x87\x96\xb3\xdb\x11\x07J\xedh^;" +
	"\xf9\xac\xd5\xe8\xd5\xcaT]W\x9b\xb4\x073y[\x04" +
	"\xb4\x00Q\x00D<\xb2\x98HTj\x10Q\x86u9" +
	"+\x9b\x94\xb6\x0d\xee\xb4T\xd4\xbf\xf5\xc5\xf9\xd9_\x13" +
	"\x01\x9c0Nh\\U\xb5\xd9v\xa7\x99\xce+\xad\x95" +
	"\xaeV\xcfbx\xd9\xe6MK\x89\xf1\xb9J\xab7`" +
	"x\x89\xe13Z\x89q\x1er\xf2\xd2\x1aH\x9b\x89\x0c" +
	"\x11\xb5\xa3M\xae\x96f\xfeZZ\xea\xe2\x09+1`" +
	"\x93\xa8)\x89H(\x11\xf7i\x10\xfd\x0c\x1cpW\x86" +
	"\xcb\xa5D\"\xa5A\xe4\x18\xc0\xa2`D|\xa0\x81H" +
	"\xf4k\x10y\x06\xae\xb1(4\"\xbeJ\xfdgF\x83" +
	"\xd8\xc8\xb0\xce\x96\xb6\x9d\xce\x9a\xa8)g\x98\x80\x1a\x82" +
	"\xb3rm^&\xb3)ID\x88\x10C\x84\xa0\xe7r" +
	"\xe9\x14*\x89\xa1\x92\xa0'\xac>\x1b\xd5\x84\xb8\x06\x84" +
	"\x89\xa9\x9f\xe3T,/jm\xccd\xfb\xd2f]\x97" +
	";\x0bL:\x8c\xc9;\xf1@\x03\xde0\x0a\xb3h\xf4" +
	"\xcc,B\xdb\xe4\x87Vn\x845\x88\xff1\xf8]\x07" +
	"/\xef\xfce\xb3\x9e,E\xf1\x98;\x80k\xfa?\x8b" +
	"H<\xa0Ad\xca\xfe\xa7\x1b\xca3)\xf9_\x1a\xca" +
	"\x13WS\x1dJ\xa6S\xff\xdcwf\xe6Z\xbb\x0b\x90" +
	"\x8d\x1dCy+AT\x88\xac\xd7\xfa\\E^\xa7A" +
	"\xcc\xf7\xb5>\xaf\x95H\xdc\xa4A\xdc\xc2\xa0\x9b\x89\x01" +
	"\xe9\xe2\x86\x09m\xc9LZ\x9ayL\x0dh\x04L\x9d" +
	"\x84(\x93M*oE\xb8\xc4\xd2\xa1X\xda5\x88{" +
	"\x18<\x92NE\xb2D\x83\x883p\x86\x82A\xcbT" +
	"\xe1\xdd\x1a\xc4r\x06='\xa5Ub\xb6\xa5\xb5ZZ" +
	"\x98B\x0cS\x08z\x7f\xd6\xce{\xcf\xc6m\xa7\x9b\xb2" +
	"\x90\x99\xc8(\x9d\x01w5\xbd\x1b\x07\xef\xbb\xc4y3" +
	"1\x1e\x0c\xc5\xdc$N\xdc7\x7f\xa8\x0a;Y\xd7%" +
	"cn\xa6\xc6q\xb9\x82\xb5\xac)\x02\xf0\x7f\x90\xd0\x1c" +
	"s\xbd\x16Qe\x00|\xdf\x1f\xfe\x88\"Fq\xf0\xb2" +
	"\xa1\x9c\x10\xce\xb4(\x02\x13\"\x12\x88\"\xa8\"\xb2\xb4" +
	"\xb8\xa2C\x0c<\x10\x8c\xa2\x82\x88\x0f6\x13\x89\x9c\x06" +
	"\xf14C\xcc\xf5\\_\x9d\x96k\xc0\x9d\xadu\x17{" +
	"[\xce\xcf\xd8\\L\xb4{5\xc1\xcb\x7f3xAO" +
	"\xe4\xba\xf3YK\x16\xd6\xe0P\xc7\xcf\x9b7T\xed\xf8" +
	"\xbe\xf84&\x95\x04/W5ey\x84\x09\x9b}\x05" +
	"\xbf\xe2\x09\xdd]\x92I\x96\xbb?a\xa62\xd2\x02w" +
	"\x1e\\\xd9+\x17\x8f\xee9{\xf9\xf61\xff\xf6\xe5\xec" +
	"+\xde\xee\xe6\"b\x1dCL\xddn\xbb\xdc\xee\x8d\x9b" +
	"o{mG\xdb\xb4O\xae\xd4\xee\xf8s\xea\x1d\x0b\xfa" +
	"\xf7_\x05m\xb2C\xd4V\xb8\xd5W;\x83\xc5k>" +
	"){\"\x99\xcc\x0e\x9aypg\xff\xd8\xf0gK\xbe" +
	"\x1b\xbbp-\xa7\x8a\xf7\xe9\xef\x00\x00\x00\xff\xff\xe9)" +
	"\xba\x05"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e82706a772b0927b,
		Nodes: []uint64{
			0x804fe3440f678ff3,
			0x81914daea9a63e6e,
			0x8efe6ee8e0e56459,
			0x969e88e97ed79d94,
			0x9baeae5a95f57921,
			0xb2239bbcb9521b14,
			0xb52aad0122df1319,
			0xb6ead80127ea2fdd,
			0xbce33359b4dd6c02,
			0xc0c1a3f1fdbabdfd,
			0xc6398605d1d1ffd8,
			0xc65521f186b6e059,
			0xca85f2cfe432ed49,
			0xd13bb87cc9defbdd,
			0xd698fc716f499b07,
			0xea6d16891c17db82,
			0xf7531ef46740370e,
			0xffdf64593702d802,
		},
		Compressed: true,
	})
}
